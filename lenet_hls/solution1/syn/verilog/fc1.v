// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        out_V_din,
        out_V_full_n,
        out_V_write,
        in_V_dout,
        in_V_empty_n,
        in_V_read
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [31:0] out_V_din;
input   out_V_full_n;
output   out_V_write;
input  [31:0] in_V_dout;
input   in_V_empty_n;
output   in_V_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg out_V_write;
reg in_V_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [16:0] fc1_layer_weights_address0;
reg    fc1_layer_weights_ce0;
wire   [31:0] fc1_layer_weights_q0;
wire   [6:0] fc1_layer_bias_address0;
reg    fc1_layer_bias_ce0;
wire   [31:0] fc1_layer_bias_q0;
reg    out_V_blk_n;
wire    ap_CS_fsm_state28;
reg    in_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond9_fu_381_p2;
wire   [31:0] output_q0;
reg   [31:0] reg_320;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_307_p2;
reg   [31:0] reg_325;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state26;
wire   [6:0] indvarinc_fu_331_p2;
wire    ap_CS_fsm_state2;
wire   [16:0] indvarinc1_fu_348_p2;
wire    ap_CS_fsm_state3;
wire   [9:0] i_cast5_fu_365_p1;
reg   [9:0] i_cast5_reg_573;
wire    ap_CS_fsm_state4;
wire   [4:0] i_8_fu_375_p2;
reg   [4:0] i_8_reg_581;
wire   [5:0] j_5_fu_387_p2;
reg    ap_block_state5;
wire   [9:0] j_6_fu_417_p2;
reg   [9:0] j_6_reg_597;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond8_fu_411_p2;
wire   [17:0] tmp_62_fu_452_p2;
reg   [17:0] tmp_62_reg_607;
wire    ap_CS_fsm_state7;
wire   [31:0] fc1_buff_q0;
reg   [31:0] fc1_buff_load_reg_612;
wire   [6:0] i_10_fu_464_p2;
reg   [6:0] i_10_reg_620;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond7_fu_458_p2;
reg   [31:0] fc1_layer_weights_lo_reg_630;
wire    ap_CS_fsm_state9;
reg   [6:0] output_addr_7_reg_635;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_311_p2;
reg   [31:0] tmp_55_reg_640;
wire   [6:0] i_9_fu_495_p2;
reg   [6:0] i_9_reg_648;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond_fu_489_p2;
reg   [31:0] fc1_layer_bias_load_reg_663;
wire   [31:0] tmp_64_fu_549_p3;
reg   [31:0] tmp_64_reg_668;
wire    ap_CS_fsm_state27;
reg   [6:0] output_address0;
reg    output_ce0;
reg    output_we0;
reg   [31:0] output_d0;
reg   [16:0] fc1_buff_address0;
reg    fc1_buff_ce0;
reg    fc1_buff_we0;
reg   [31:0] fc1_buff_d0;
reg   [6:0] invdar_reg_228;
reg    ap_block_state1;
wire   [0:0] tmp_s_fu_342_p2;
reg   [16:0] invdar1_reg_239;
wire   [0:0] tmp_47_fu_359_p2;
reg   [4:0] i_reg_250;
reg   [5:0] j_reg_261;
wire   [0:0] exitcond3_fu_369_p2;
reg   [9:0] j1_reg_272;
reg   [6:0] i2_reg_284;
wire    ap_CS_fsm_state19;
reg   [6:0] i3_reg_296;
wire   [63:0] tmp_fu_337_p1;
wire   [63:0] tmp_46_fu_354_p1;
wire   [63:0] tmp_51_fu_406_p1;
wire   [63:0] tmp_48_fu_423_p1;
wire  signed [63:0] tmp_65_cast_fu_479_p1;
wire   [63:0] tmp_54_fu_484_p1;
wire   [63:0] tmp_52_fu_501_p1;
reg   [31:0] grp_fu_307_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state10;
wire   [9:0] tmp_49_fu_393_p3;
wire   [9:0] tmp_50_fu_401_p2;
wire   [16:0] tmp_57_fu_428_p3;
wire   [12:0] tmp_61_fu_440_p3;
wire   [17:0] p_shl_cast_fu_436_p1;
wire   [17:0] p_shl1_cast_fu_448_p1;
wire   [17:0] tmp_54_cast_fu_470_p1;
wire   [17:0] tmp_65_fu_474_p2;
wire   [31:0] a_assign_to_int_fu_507_p1;
wire   [7:0] tmp_53_fu_511_p4;
wire   [22:0] tmp_66_fu_521_p1;
wire   [0:0] notrhs_fu_531_p2;
wire   [0:0] notlhs_fu_525_p2;
wire   [0:0] tmp_58_fu_537_p2;
wire   [0:0] tmp_59_fu_315_p2;
wire   [0:0] tmp_60_fu_543_p2;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 28'd1;
end

fc1_fc1_layer_weights #(
    .DataWidth( 32 ),
    .AddressRange( 69120 ),
    .AddressWidth( 17 ))
fc1_layer_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_layer_weights_address0),
    .ce0(fc1_layer_weights_ce0),
    .q0(fc1_layer_weights_q0)
);

fc1_fc1_layer_bias #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
fc1_layer_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_layer_bias_address0),
    .ce0(fc1_layer_bias_ce0),
    .q0(fc1_layer_bias_q0)
);

fc1_output #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(output_d0),
    .q0(output_q0)
);

fc1_fc1_buff #(
    .DataWidth( 32 ),
    .AddressRange( 69120 ),
    .AddressWidth( 17 ))
fc1_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_buff_address0),
    .ce0(fc1_buff_ce0),
    .we0(fc1_buff_we0),
    .d0(fc1_buff_d0),
    .q0(fc1_buff_q0)
);

lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_320),
    .din1(grp_fu_307_p1),
    .ce(1'b1),
    .dout(grp_fu_307_p2)
);

lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fc1_layer_weights_lo_reg_630),
    .din1(fc1_buff_load_reg_612),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

lenet_hls_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_hls_fcmp_32ns_32ns_1_1_1_U31(
    .din0(reg_325),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_59_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_reg_284 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i2_reg_284 <= i_10_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond8_fu_411_p2 == 1'd1))) begin
        i3_reg_296 <= 7'd0;
    end else if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        i3_reg_296 <= i_9_reg_648;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_47_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_250 <= 5'd0;
    end else if ((~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_250 <= i_8_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar1_reg_239 <= 17'd0;
    end else if (((tmp_47_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar1_reg_239 <= indvarinc1_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_228 <= indvarinc_fu_331_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_228 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j1_reg_272 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_458_p2 == 1'd1))) begin
        j1_reg_272 <= j_6_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_261 <= 6'd0;
    end else if ((~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_261 <= j_5_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fc1_buff_load_reg_612 <= fc1_buff_q0;
        tmp_62_reg_607[17 : 3] <= tmp_62_fu_452_p2[17 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        fc1_layer_bias_load_reg_663 <= fc1_layer_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fc1_layer_weights_lo_reg_630 <= fc1_layer_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_10_reg_620 <= i_10_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_8_reg_581 <= i_8_fu_375_p2;
        i_cast5_reg_573[4 : 0] <= i_cast5_fu_365_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_9_reg_648 <= i_9_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_6_reg_597 <= j_6_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_addr_7_reg_635 <= tmp_54_fu_484_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_320 <= output_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_325 <= grp_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_55_reg_640 <= grp_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_64_reg_668 <= tmp_64_fu_549_p3;
    end
end

always @ (*) begin
    if (((exitcond_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fc1_buff_address0 = tmp_48_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fc1_buff_address0 = tmp_51_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc1_buff_address0 = tmp_46_fu_354_p1;
    end else begin
        fc1_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        fc1_buff_ce0 = 1'b1;
    end else begin
        fc1_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc1_buff_d0 = in_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc1_buff_d0 = 32'd0;
    end else begin
        fc1_buff_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fc1_buff_we0 = 1'b1;
    end else begin
        fc1_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        fc1_layer_bias_ce0 = 1'b1;
    end else begin
        fc1_layer_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fc1_layer_weights_ce0 = 1'b1;
    end else begin
        fc1_layer_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_307_p1 = fc1_layer_bias_load_reg_663;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_307_p1 = tmp_55_reg_640;
    end else begin
        grp_fu_307_p1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond9_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_V_blk_n = in_V_empty_n;
    end else begin
        in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_V_read = 1'b1;
    end else begin
        in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        out_V_blk_n = out_V_full_n;
    end else begin
        out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        out_V_write = 1'b1;
    end else begin
        out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_address0 = tmp_52_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_address0 = output_addr_7_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_address0 = tmp_54_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_address0 = tmp_fu_337_p1;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        output_ce0 = 1'b1;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_d0 = reg_325;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_d0 = 32'd0;
    end else begin
        output_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state2))) begin
        output_we0 = 1'b1;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_47_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond9_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond8_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_458_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state20 : begin
            if (((exitcond_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_to_int_fu_507_p1 = reg_325;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((exitcond9_fu_381_p2 == 1'd0) & (in_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign exitcond3_fu_369_p2 = ((i_reg_250 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond7_fu_458_p2 = ((i2_reg_284 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond8_fu_411_p2 = ((j1_reg_272 == 10'd576) ? 1'b1 : 1'b0);

assign exitcond9_fu_381_p2 = ((j_reg_261 == 6'd36) ? 1'b1 : 1'b0);

assign exitcond_fu_489_p2 = ((i3_reg_296 == 7'd120) ? 1'b1 : 1'b0);

assign fc1_layer_bias_address0 = tmp_52_fu_501_p1;

assign fc1_layer_weights_address0 = tmp_65_cast_fu_479_p1;

assign i_10_fu_464_p2 = (i2_reg_284 + 7'd1);

assign i_8_fu_375_p2 = (i_reg_250 + 5'd1);

assign i_9_fu_495_p2 = (i3_reg_296 + 7'd1);

assign i_cast5_fu_365_p1 = i_reg_250;

assign indvarinc1_fu_348_p2 = (invdar1_reg_239 + 17'd1);

assign indvarinc_fu_331_p2 = (invdar_reg_228 + 7'd1);

assign j_5_fu_387_p2 = (j_reg_261 + 6'd1);

assign j_6_fu_417_p2 = (j1_reg_272 + 10'd1);

assign notlhs_fu_525_p2 = ((tmp_53_fu_511_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_531_p2 = ((tmp_66_fu_521_p1 == 23'd0) ? 1'b1 : 1'b0);

assign out_V_din = tmp_64_reg_668;

assign p_shl1_cast_fu_448_p1 = tmp_61_fu_440_p3;

assign p_shl_cast_fu_436_p1 = tmp_57_fu_428_p3;

assign start_out = real_start;

assign tmp_46_fu_354_p1 = invdar1_reg_239;

assign tmp_47_fu_359_p2 = ((invdar1_reg_239 == 17'd69119) ? 1'b1 : 1'b0);

assign tmp_48_fu_423_p1 = j1_reg_272;

assign tmp_49_fu_393_p3 = {{j_reg_261}, {4'd0}};

assign tmp_50_fu_401_p2 = (i_cast5_reg_573 + tmp_49_fu_393_p3);

assign tmp_51_fu_406_p1 = tmp_50_fu_401_p2;

assign tmp_52_fu_501_p1 = i3_reg_296;

assign tmp_53_fu_511_p4 = {{a_assign_to_int_fu_507_p1[30:23]}};

assign tmp_54_cast_fu_470_p1 = i2_reg_284;

assign tmp_54_fu_484_p1 = i2_reg_284;

assign tmp_57_fu_428_p3 = {{j1_reg_272}, {7'd0}};

assign tmp_58_fu_537_p2 = (notrhs_fu_531_p2 | notlhs_fu_525_p2);

assign tmp_60_fu_543_p2 = (tmp_59_fu_315_p2 & tmp_58_fu_537_p2);

assign tmp_61_fu_440_p3 = {{j1_reg_272}, {3'd0}};

assign tmp_62_fu_452_p2 = (p_shl_cast_fu_436_p1 - p_shl1_cast_fu_448_p1);

assign tmp_64_fu_549_p3 = ((tmp_60_fu_543_p2[0:0] === 1'b1) ? reg_325 : 32'd0);

assign tmp_65_cast_fu_479_p1 = $signed(tmp_65_fu_474_p2);

assign tmp_65_fu_474_p2 = (tmp_62_reg_607 + tmp_54_cast_fu_470_p1);

assign tmp_66_fu_521_p1 = a_assign_to_int_fu_507_p1[22:0];

assign tmp_fu_337_p1 = invdar_reg_228;

assign tmp_s_fu_342_p2 = ((invdar_reg_228 == 7'd119) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_cast5_reg_573[9:5] <= 5'b00000;
    tmp_62_reg_607[2:0] <= 3'b000;
end

endmodule //fc1
