// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_din,
        out_V_full_n,
        out_V_write,
        in_V_dout,
        in_V_empty_n,
        in_V_read
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_state31 = 64'd1073741824;
parameter    ap_ST_fsm_state32 = 64'd2147483648;
parameter    ap_ST_fsm_state33 = 64'd4294967296;
parameter    ap_ST_fsm_state34 = 64'd8589934592;
parameter    ap_ST_fsm_state35 = 64'd17179869184;
parameter    ap_ST_fsm_state36 = 64'd34359738368;
parameter    ap_ST_fsm_state37 = 64'd68719476736;
parameter    ap_ST_fsm_state38 = 64'd137438953472;
parameter    ap_ST_fsm_state39 = 64'd274877906944;
parameter    ap_ST_fsm_state40 = 64'd549755813888;
parameter    ap_ST_fsm_state41 = 64'd1099511627776;
parameter    ap_ST_fsm_state42 = 64'd2199023255552;
parameter    ap_ST_fsm_state43 = 64'd4398046511104;
parameter    ap_ST_fsm_state44 = 64'd8796093022208;
parameter    ap_ST_fsm_state45 = 64'd17592186044416;
parameter    ap_ST_fsm_state46 = 64'd35184372088832;
parameter    ap_ST_fsm_state47 = 64'd70368744177664;
parameter    ap_ST_fsm_state48 = 64'd140737488355328;
parameter    ap_ST_fsm_state49 = 64'd281474976710656;
parameter    ap_ST_fsm_state50 = 64'd562949953421312;
parameter    ap_ST_fsm_state51 = 64'd1125899906842624;
parameter    ap_ST_fsm_state52 = 64'd2251799813685248;
parameter    ap_ST_fsm_state53 = 64'd4503599627370496;
parameter    ap_ST_fsm_state54 = 64'd9007199254740992;
parameter    ap_ST_fsm_state55 = 64'd18014398509481984;
parameter    ap_ST_fsm_state56 = 64'd36028797018963968;
parameter    ap_ST_fsm_state57 = 64'd72057594037927936;
parameter    ap_ST_fsm_state58 = 64'd144115188075855872;
parameter    ap_ST_fsm_state59 = 64'd288230376151711744;
parameter    ap_ST_fsm_state60 = 64'd576460752303423488;
parameter    ap_ST_fsm_state61 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 64'd9223372036854775808;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] out_V_din;
input   out_V_full_n;
output   out_V_write;
input  [31:0] in_V_dout;
input   in_V_empty_n;
output   in_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_write;
reg in_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] fc3_layer_weights_address0;
reg    fc3_layer_weights_ce0;
wire   [31:0] fc3_layer_weights_q0;
wire   [3:0] fc3_layer_bias_address0;
reg    fc3_layer_bias_ce0;
wire   [31:0] fc3_layer_bias_q0;
reg    out_V_blk_n;
wire    ap_CS_fsm_state64;
reg    in_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond9_fu_297_p2;
wire   [31:0] output_q0;
reg   [31:0] reg_262;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] reg_268;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_257_p2;
reg   [31:0] reg_274;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state47;
wire   [3:0] indvarinc_fu_280_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] j_3_fu_303_p2;
reg   [6:0] j_3_reg_416;
reg    ap_block_state3;
reg   [31:0] tmp_40_reg_421;
wire   [10:0] tmp_28_fu_333_p2;
reg   [10:0] tmp_28_reg_426;
wire   [3:0] i_4_fu_345_p2;
reg   [3:0] i_4_reg_434;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond8_fu_339_p2;
reg   [31:0] fc3_layer_weights_lo_reg_444;
wire    ap_CS_fsm_state5;
reg   [3:0] output_addr_2_reg_449;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] tmp_32_reg_454;
wire   [3:0] i_3_fu_376_p2;
reg   [3:0] i_3_reg_462;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond7_fu_370_p2;
reg   [3:0] output_addr_1_reg_472;
reg   [31:0] fc3_layer_bias_load_reg_477;
wire    ap_CS_fsm_state36;
wire   [3:0] i_5_fu_394_p2;
reg   [3:0] i_5_reg_490;
wire    ap_CS_fsm_state37;
wire   [0:0] exitcond_fu_388_p2;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] tmp_35_reg_500;
wire    ap_CS_fsm_state63;
reg   [3:0] output_address0;
reg    output_ce0;
reg    output_we0;
reg   [31:0] output_d0;
reg   [3:0] invdar_reg_175;
reg    ap_block_state1;
wire   [0:0] tmp_s_fu_291_p2;
reg   [6:0] j_reg_186;
reg   [3:0] i_reg_197;
wire    ap_CS_fsm_state15;
reg   [31:0] soft_max_value_reg_209;
reg   [3:0] i1_reg_221;
reg   [3:0] i2_reg_232;
wire   [63:0] tmp_fu_286_p1;
wire   [63:0] tmp_38_cast_fu_360_p1;
wire   [63:0] tmp_30_fu_365_p1;
wire   [63:0] tmp_29_fu_382_p1;
wire   [63:0] tmp_34_fu_400_p1;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_243_p0;
reg   [31:0] grp_fu_243_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state48;
reg   [31:0] grp_fu_257_p1;
wire    ap_CS_fsm_state39;
wire   [9:0] tmp_26_fu_309_p3;
wire   [7:0] tmp_27_fu_321_p3;
wire   [10:0] p_shl1_cast_fu_329_p1;
wire   [10:0] p_shl_cast_fu_317_p1;
wire   [10:0] tmp_31_cast_fu_351_p1;
wire   [10:0] tmp_31_fu_355_p2;
reg   [63:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 64'd1;
end

fc3_fc3_layer_weights #(
    .DataWidth( 32 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
fc3_layer_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_layer_weights_address0),
    .ce0(fc3_layer_weights_ce0),
    .q0(fc3_layer_weights_q0)
);

fc3_fc3_layer_bias #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc3_layer_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_layer_bias_address0),
    .ce0(fc3_layer_bias_ce0),
    .q0(fc3_layer_bias_q0)
);

fc3_output #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(output_d0),
    .q0(output_q0)
);

lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_243_p0),
    .din1(grp_fu_243_p1),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fc3_layer_weights_lo_reg_444),
    .din1(tmp_40_reg_421),
    .ce(1'b1),
    .dout(grp_fu_248_p2)
);

lenet_hls_fdiv_32ns_32ns_32_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fdiv_32ns_32ns_32_16_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_274),
    .din1(soft_max_value_reg_209),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

lenet_hls_fexp_32ns_32ns_32_9_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fexp_32ns_32ns_32_9_full_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_257_p1),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd1))) begin
        i1_reg_221 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i1_reg_221 <= i_3_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i2_reg_232 <= 4'd0;
    end else if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        i2_reg_232 <= i_5_reg_490;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_197 <= i_4_reg_434;
    end else if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd0))) begin
        i_reg_197 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_291_p2 == 1'd0))) begin
        invdar_reg_175 <= indvarinc_fu_280_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_175 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_186 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_339_p2 == 1'd1))) begin
        j_reg_186 <= j_3_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd1))) begin
        soft_max_value_reg_209 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        soft_max_value_reg_209 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        fc3_layer_bias_load_reg_477 <= fc3_layer_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc3_layer_weights_lo_reg_444 <= fc3_layer_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_3_reg_462 <= i_3_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_434 <= i_4_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_5_reg_490 <= i_5_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3))) begin
        j_3_reg_416 <= j_3_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond7_fu_370_p2 == 1'd0))) begin
        output_addr_1_reg_472 <= tmp_29_fu_382_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_addr_2_reg_449 <= tmp_30_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_262 <= output_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_268 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_274 <= grp_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd0))) begin
        tmp_28_reg_426[10 : 1] <= tmp_28_fu_333_p2[10 : 1];
        tmp_40_reg_421 <= in_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_32_reg_454 <= grp_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_35_reg_500 <= grp_fu_252_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fc3_layer_bias_ce0 = 1'b1;
    end else begin
        fc3_layer_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc3_layer_weights_ce0 = 1'b1;
    end else begin
        fc3_layer_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_243_p0 = reg_274;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_243_p0 = reg_262;
    end else begin
        grp_fu_243_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_243_p1 = soft_max_value_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_243_p1 = fc3_layer_bias_load_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_243_p1 = tmp_32_reg_454;
    end else begin
        grp_fu_243_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_257_p1 = reg_262;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_257_p1 = reg_268;
    end else begin
        grp_fu_257_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd0))) begin
        in_V_blk_n = in_V_empty_n;
    end else begin
        in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd0))) begin
        in_V_read = 1'b1;
    end else begin
        in_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        out_V_blk_n = out_V_full_n;
    end else begin
        out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        out_V_write = 1'b1;
    end else begin
        out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_address0 = tmp_34_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_address0 = output_addr_1_reg_472;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_address0 = tmp_29_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_address0 = output_addr_2_reg_449;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_address0 = tmp_30_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_address0 = tmp_fu_286_p1;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        output_ce0 = 1'b1;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        output_d0 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_d0 = 32'd0;
    end else begin
        output_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2))) begin
        output_we0 = 1'b1;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_297_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_339_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state16 : begin
            if (((exitcond7_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state37 : begin
            if (((exitcond_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((in_V_empty_n == 1'b0) & (exitcond9_fu_297_p2 == 1'd0));
end

assign exitcond7_fu_370_p2 = ((i1_reg_221 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond8_fu_339_p2 = ((i_reg_197 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond9_fu_297_p2 = ((j_reg_186 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_388_p2 = ((i2_reg_232 == 4'd10) ? 1'b1 : 1'b0);

assign fc3_layer_bias_address0 = tmp_29_fu_382_p1;

assign fc3_layer_weights_address0 = tmp_38_cast_fu_360_p1;

assign i_3_fu_376_p2 = (i1_reg_221 + 4'd1);

assign i_4_fu_345_p2 = (i_reg_197 + 4'd1);

assign i_5_fu_394_p2 = (i2_reg_232 + 4'd1);

assign indvarinc_fu_280_p2 = (invdar_reg_175 + 4'd1);

assign j_3_fu_303_p2 = (j_reg_186 + 7'd1);

assign out_V_din = tmp_35_reg_500;

assign p_shl1_cast_fu_329_p1 = tmp_27_fu_321_p3;

assign p_shl_cast_fu_317_p1 = tmp_26_fu_309_p3;

assign tmp_26_fu_309_p3 = {{j_reg_186}, {3'd0}};

assign tmp_27_fu_321_p3 = {{j_reg_186}, {1'd0}};

assign tmp_28_fu_333_p2 = (p_shl1_cast_fu_329_p1 + p_shl_cast_fu_317_p1);

assign tmp_29_fu_382_p1 = i1_reg_221;

assign tmp_30_fu_365_p1 = i_reg_197;

assign tmp_31_cast_fu_351_p1 = i_reg_197;

assign tmp_31_fu_355_p2 = (tmp_28_reg_426 + tmp_31_cast_fu_351_p1);

assign tmp_34_fu_400_p1 = i2_reg_232;

assign tmp_38_cast_fu_360_p1 = tmp_31_fu_355_p2;

assign tmp_fu_286_p1 = invdar_reg_175;

assign tmp_s_fu_291_p2 = ((invdar_reg_175 == 4'd9) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_28_reg_426[0] <= 1'b0;
end

endmodule //fc3
