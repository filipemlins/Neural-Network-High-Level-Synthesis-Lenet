// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pool2_HH_
#define _pool2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lenet_hls_fcmp_32ns_32ns_1_1_1.h"
#include "pool2_pool_buff.h"

namespace ap_rtl {

struct pool2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<32> > out_V_din;
    sc_in< sc_logic > out_V_full_n;
    sc_out< sc_logic > out_V_write;
    sc_in< sc_lv<32> > in_V_dout;
    sc_in< sc_logic > in_V_empty_n;
    sc_out< sc_logic > in_V_read;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    pool2(sc_module_name name);
    SC_HAS_PROCESS(pool2);

    ~pool2();

    sc_trace_file* mVcdFile;

    pool2_pool_buff* pool_buff_U;
    lenet_hls_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>* lenet_hls_fcmp_32ns_32ns_1_1_1_U25;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > out_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > or_cond_reg_572;
    sc_signal< sc_logic > in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond9_fu_244_p2;
    sc_signal< sc_lv<5> > k_1_fu_238_p2;
    sc_signal< sc_lv<5> > k_1_reg_501;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > p_1_fu_250_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<4> > i_1_fu_273_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_6_fu_267_p2;
    sc_signal< sc_lv<1> > tmp_15_fu_283_p1;
    sc_signal< sc_lv<1> > tmp_15_reg_525;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<2> > l_1_fu_293_p2;
    sc_signal< sc_lv<2> > l_1_reg_533;
    sc_signal< sc_lv<8> > tmp_s_fu_309_p2;
    sc_signal< sc_lv<8> > tmp_s_reg_538;
    sc_signal< sc_lv<1> > exitcond8_fu_287_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_315_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_543;
    sc_signal< sc_lv<4> > j_1_fu_321_p2;
    sc_signal< sc_lv<2> > m_1_fu_341_p2;
    sc_signal< sc_lv<2> > m_1_reg_556;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_5_fu_362_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_561;
    sc_signal< sc_lv<1> > exitcond_fu_335_p2;
    sc_signal< sc_lv<1> > or_cond_fu_378_p2;
    sc_signal< sc_lv<32> > pool_buff_q0;
    sc_signal< sc_lv<32> > value_reg_576;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > tmp_21_fu_223_p2;
    sc_signal< sc_lv<1> > tmp_21_reg_590;
    sc_signal< sc_lv<8> > pool_buff_address0;
    sc_signal< sc_logic > pool_buff_ce0;
    sc_signal< sc_logic > pool_buff_we0;
    sc_signal< sc_lv<5> > k_reg_155;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_4_fu_261_p2;
    sc_signal< sc_lv<8> > p_reg_166;
    sc_signal< sc_lv<1> > exitcond1_fu_232_p2;
    sc_signal< sc_lv<4> > i_reg_177;
    sc_signal< sc_lv<4> > j_reg_189;
    sc_signal< sc_lv<2> > l_reg_201;
    sc_signal< sc_lv<2> > m_reg_212;
    sc_signal< bool > ap_block_state10;
    sc_signal< sc_lv<64> > tmp_fu_256_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_367_p1;
    sc_signal< sc_lv<32> > value_3_fu_479_p3;
    sc_signal< sc_lv<32> > tmp_1_fu_114;
    sc_signal< sc_lv<4> > l_cast4_fu_279_p1;
    sc_signal< sc_lv<4> > tmp_9_fu_299_p2;
    sc_signal< sc_lv<4> > tmp_s_fu_309_p0;
    sc_signal< sc_lv<4> > m_cast2_cast_fu_327_p1;
    sc_signal< sc_lv<4> > tmp4_fu_347_p2;
    sc_signal< sc_lv<8> > tmp4_cast_fu_353_p1;
    sc_signal< sc_lv<1> > tmp_17_fu_331_p1;
    sc_signal< sc_lv<8> > array_access_fu_357_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_372_p2;
    sc_signal< sc_lv<32> > p_0_4_to_int_fu_387_p1;
    sc_signal< sc_lv<32> > value_to_int_fu_404_p1;
    sc_signal< sc_lv<8> > tmp_12_fu_390_p4;
    sc_signal< sc_lv<23> > tmp_23_fu_400_p1;
    sc_signal< sc_lv<1> > notrhs_fu_427_p2;
    sc_signal< sc_lv<1> > notlhs_fu_421_p2;
    sc_signal< sc_lv<8> > tmp_16_fu_407_p4;
    sc_signal< sc_lv<23> > tmp_24_fu_417_p1;
    sc_signal< sc_lv<1> > notrhs6_fu_445_p2;
    sc_signal< sc_lv<1> > notlhs5_fu_439_p2;
    sc_signal< sc_lv<1> > tmp_18_fu_433_p2;
    sc_signal< sc_lv<1> > tmp_19_fu_451_p2;
    sc_signal< sc_lv<1> > tmp_20_fu_457_p2;
    sc_signal< sc_lv<1> > tmp_22_fu_463_p2;
    sc_signal< sc_lv<1> > sel_tmp_fu_468_p2;
    sc_signal< sc_lv<32> > value_1_fu_473_p3;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_lv<8> > tmp_s_fu_309_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_A9;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_block_state10();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_access_fu_357_p2();
    void thread_exitcond1_fu_232_p2();
    void thread_exitcond8_fu_287_p2();
    void thread_exitcond9_fu_244_p2();
    void thread_exitcond_fu_335_p2();
    void thread_i_1_fu_273_p2();
    void thread_in_V_blk_n();
    void thread_in_V_read();
    void thread_internal_ap_ready();
    void thread_j_1_fu_321_p2();
    void thread_k_1_fu_238_p2();
    void thread_l_1_fu_293_p2();
    void thread_l_cast4_fu_279_p1();
    void thread_m_1_fu_341_p2();
    void thread_m_cast2_cast_fu_327_p1();
    void thread_notlhs5_fu_439_p2();
    void thread_notlhs_fu_421_p2();
    void thread_notrhs6_fu_445_p2();
    void thread_notrhs_fu_427_p2();
    void thread_or_cond_fu_378_p2();
    void thread_out_V_blk_n();
    void thread_out_V_din();
    void thread_out_V_write();
    void thread_p_0_4_to_int_fu_387_p1();
    void thread_p_1_fu_250_p2();
    void thread_pool_buff_address0();
    void thread_pool_buff_ce0();
    void thread_pool_buff_we0();
    void thread_real_start();
    void thread_sel_tmp_fu_468_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp4_cast_fu_353_p1();
    void thread_tmp4_fu_347_p2();
    void thread_tmp_12_fu_390_p4();
    void thread_tmp_13_fu_372_p2();
    void thread_tmp_15_fu_283_p1();
    void thread_tmp_16_fu_407_p4();
    void thread_tmp_17_fu_331_p1();
    void thread_tmp_18_fu_433_p2();
    void thread_tmp_19_fu_451_p2();
    void thread_tmp_20_fu_457_p2();
    void thread_tmp_22_fu_463_p2();
    void thread_tmp_23_fu_400_p1();
    void thread_tmp_24_fu_417_p1();
    void thread_tmp_2_fu_315_p2();
    void thread_tmp_4_fu_261_p2();
    void thread_tmp_5_fu_362_p2();
    void thread_tmp_6_fu_267_p2();
    void thread_tmp_8_fu_367_p1();
    void thread_tmp_9_fu_299_p2();
    void thread_tmp_fu_256_p1();
    void thread_tmp_s_fu_309_p0();
    void thread_tmp_s_fu_309_p00();
    void thread_tmp_s_fu_309_p2();
    void thread_value_1_fu_473_p3();
    void thread_value_3_fu_479_p3();
    void thread_value_to_int_fu_404_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
