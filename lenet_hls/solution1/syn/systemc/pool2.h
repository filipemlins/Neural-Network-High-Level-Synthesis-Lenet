// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pool2_HH_
#define _pool2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pool2_pool_buff_V.h"

namespace ap_rtl {

struct pool2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<16> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_in< sc_lv<16> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;


    // Module declarations
    pool2(sc_module_name name);
    SC_HAS_PROCESS(pool2);

    ~pool2();

    sc_trace_file* mVcdFile;

    pool2_pool_buff_V* pool_buff_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > or_cond_reg_478;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond2_fu_230_p2;
    sc_signal< sc_lv<5> > k_1_fu_224_p2;
    sc_signal< sc_lv<5> > k_1_reg_408;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > p_1_fu_236_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<4> > i_1_fu_259_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_7_fu_253_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_269_p1;
    sc_signal< sc_lv<1> > tmp_13_reg_432;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<2> > l_1_fu_279_p2;
    sc_signal< sc_lv<2> > l_1_reg_440;
    sc_signal< sc_lv<8> > tmp_1_fu_295_p2;
    sc_signal< sc_lv<8> > tmp_1_reg_445;
    sc_signal< sc_lv<1> > exitcond3_fu_273_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_301_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_450;
    sc_signal< sc_lv<4> > j_1_fu_307_p2;
    sc_signal< sc_lv<1> > tmp_14_fu_317_p1;
    sc_signal< sc_lv<1> > tmp_14_reg_460;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<2> > m_1_fu_327_p2;
    sc_signal< sc_lv<2> > m_1_reg_468;
    sc_signal< sc_lv<1> > exitcond_fu_321_p2;
    sc_signal< sc_lv<1> > or_cond_fu_359_p2;
    sc_signal< sc_lv<16> > value_V_3_fu_385_p3;
    sc_signal< sc_lv<16> > value_V_3_reg_482;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > pool_buff_V_address0;
    sc_signal< sc_logic > pool_buff_V_ce0;
    sc_signal< sc_logic > pool_buff_V_we0;
    sc_signal< sc_lv<16> > pool_buff_V_q0;
    sc_signal< sc_lv<5> > k_reg_145;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_5_fu_247_p2;
    sc_signal< sc_lv<8> > p_reg_156;
    sc_signal< sc_lv<1> > exitcond1_fu_218_p2;
    sc_signal< sc_lv<4> > i_reg_167;
    sc_signal< sc_lv<4> > j_reg_179;
    sc_signal< sc_lv<2> > l_reg_191;
    sc_signal< sc_lv<2> > m_reg_202;
    sc_signal< bool > ap_block_state9;
    sc_signal< sc_lv<64> > tmp_2_fu_242_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_348_p1;
    sc_signal< sc_lv<16> > tmp_V_fu_104;
    sc_signal< sc_lv<4> > l_cast9_fu_265_p1;
    sc_signal< sc_lv<4> > tmp_s_fu_285_p2;
    sc_signal< sc_lv<4> > tmp_1_fu_295_p0;
    sc_signal< sc_lv<4> > m_cast7_cast_fu_313_p1;
    sc_signal< sc_lv<4> > tmp1_fu_333_p2;
    sc_signal< sc_lv<8> > tmp1_cast_fu_339_p1;
    sc_signal< sc_lv<8> > array_access_fu_343_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_353_p2;
    sc_signal< sc_lv<1> > tmp_11_fu_371_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_367_p2;
    sc_signal< sc_lv<16> > value_V_1_fu_377_p3;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_lv<8> > tmp_1_fu_295_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_A9;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<8> ap_const_lv8_D;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_block_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_access_fu_343_p2();
    void thread_exitcond1_fu_218_p2();
    void thread_exitcond2_fu_230_p2();
    void thread_exitcond3_fu_273_p2();
    void thread_exitcond_fu_321_p2();
    void thread_i_1_fu_259_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_internal_ap_ready();
    void thread_j_1_fu_307_p2();
    void thread_k_1_fu_224_p2();
    void thread_l_1_fu_279_p2();
    void thread_l_cast9_fu_265_p1();
    void thread_m_1_fu_327_p2();
    void thread_m_cast7_cast_fu_313_p1();
    void thread_or_cond_fu_359_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_1_fu_236_p2();
    void thread_pool_buff_V_address0();
    void thread_pool_buff_V_ce0();
    void thread_pool_buff_V_we0();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_cast_fu_339_p1();
    void thread_tmp1_fu_333_p2();
    void thread_tmp_11_fu_371_p2();
    void thread_tmp_12_fu_353_p2();
    void thread_tmp_13_fu_269_p1();
    void thread_tmp_14_fu_317_p1();
    void thread_tmp_1_fu_295_p0();
    void thread_tmp_1_fu_295_p00();
    void thread_tmp_1_fu_295_p2();
    void thread_tmp_2_fu_242_p1();
    void thread_tmp_3_fu_301_p2();
    void thread_tmp_5_fu_247_p2();
    void thread_tmp_6_fu_367_p2();
    void thread_tmp_7_fu_253_p2();
    void thread_tmp_9_fu_348_p1();
    void thread_tmp_s_fu_285_p2();
    void thread_value_V_1_fu_377_p3();
    void thread_value_V_3_fu_385_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
