// ==============================================================
// File generated on Wed Jun 17 16:36:41 -03 2020
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __fc2_fc2_layer_bias_H__
#define __fc2_fc2_layer_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct fc2_fc2_layer_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(fc2_fc2_layer_bias_ram) {
        ram[0] = "0b00111011101000000010100000001110";
        ram[1] = "0b10110101100010111010101111011101";
        ram[2] = "0b00111100011111000001001111100010";
        ram[3] = "0b00111100000010000000100100010011";
        ram[4] = "0b00111011111010011110100101110100";
        ram[5] = "0b10111100100110111001101100011000";
        ram[6] = "0b10111010010010011111110000011111";
        ram[7] = "0b00111100011010110101011010110001";
        ram[8] = "0b10111011100111001000110100011010";
        ram[9] = "0b10111011011110010101000110110011";
        ram[10] = "0b10111100000101101100100100111000";
        ram[11] = "0b00111010010110110010101110011001";
        ram[12] = "0b10111100011000001000100010010111";
        ram[13] = "0b00111100100101000101100001001010";
        ram[14] = "0b00111010000000011110100111011110";
        ram[15] = "0b00111010101010010110101100111001";
        ram[16] = "0b00111100110000101001010000101010";
        ram[17] = "0b00110111011000011111010111010100";
        ram[18] = "0b10111010010000111100110000101011";
        ram[19] = "0b10111100011001111011110011011111";
        ram[20] = "0b10111010000101000100011100011110";
        ram[21] = "0b10111010100000000101010100110000";
        ram[22] = "0b00111100000100110110000100010100";
        ram[23] = "0b10111100000111101000101000000011";
        ram[24] = "0b10111001111011101100000101000101";
        ram[25] = "0b10111011011101111100001111100111";
        ram[26] = "0b10111010101111001000010011011101";
        ram[27] = "0b10111011000010000101000111000100";
        ram[28] = "0b10111010010000001100101000100011";
        ram[29] = "0b00111010110111010000111101000110";
        ram[30] = "0b00111100010010000010101010110100";
        ram[31] = "0b10111011111010011110101001100111";
        ram[32] = "0b10111101000000000110011110011111";
        ram[33] = "0b00111100111010010101000010110110";
        ram[34] = "0b10111010100111010000111100011001";
        ram[35] = "0b00111100100010101010010101101101";
        ram[36] = "0b00111011010011000010000000100101";
        ram[37] = "0b00111011101100110001111110000000";
        ram[38] = "0b10111100101000100101100111000001";
        ram[39] = "0b10111010110001100111000111100110";
        ram[40] = "0b00111100000110100111000001101001";
        ram[41] = "0b10111100011000001100101001111100";
        ram[42] = "0b10111000100100010011000111110000";
        ram[43] = "0b00111100010011011110110100001110";
        ram[44] = "0b10111011101000010011011001010010";
        ram[45] = "0b10111011001001011010100010001101";
        ram[46] = "0b10111011101111100100101000000100";
        ram[47] = "0b10111011100100110011100100100111";
        ram[48] = "0b10111010100100001000100000011000";
        ram[49] = "0b00000000000000000000000000000000";
        ram[50] = "0b10111100011101111011001001101111";
        ram[51] = "0b10111000110110100001110101011110";
        ram[52] = "0b00111001100101000011110110111111";
        ram[53] = "0b00111000111110111100110010010001";
        ram[54] = "0b00111010100001111110010110010010";
        ram[55] = "0b10111011101000110100000011111101";
        ram[56] = "0b10111010100001100111110001110011";
        ram[57] = "0b00111011110011100000010110100011";
        ram[58] = "0b10111100010000010011110011001000";
        ram[59] = "0b10111100011101110111101100100101";
        ram[60] = "0b00111011101010101011001000111111";
        ram[61] = "0b10111010101011111101000011001000";
        ram[62] = "0b10111000011000111010000001001001";
        ram[63] = "0b00111011100111001101110011111111";
        ram[64] = "0b10111001100110000101011111101101";
        ram[65] = "0b10111100001101011000010010111001";
        ram[66] = "0b10111010110100100100100010101001";
        ram[67] = "0b00111011111011001101000100100111";
        ram[68] = "0b10111100110000100111100000010110";
        ram[69] = "0b10111010100101101000011101000100";
        ram[70] = "0b10111010111001100100100001111010";
        ram[71] = "0b00111011001111000100000001010010";
        ram[72] = "0b10111100011111101111010001000111";
        ram[73] = "0b00111100001100001110110000110110";
        ram[74] = "0b00111100101100011101100010000001";
        ram[75] = "0b10111011010011101101100110010110";
        ram[76] = "0b10111010111110101110110110110101";
        ram[77] = "0b00110111110001111101011010111111";
        ram[78] = "0b00111010110011000110001010110100";
        ram[79] = "0b00111010101101011000110011101111";
        ram[80] = "0b10111100000100011000111010011001";
        ram[81] = "0b10111001000010111010000011011111";
        ram[82] = "0b10111010101101111011100010011101";
        ram[83] = "0b00111100010000001100000101011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(fc2_fc2_layer_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


fc2_fc2_layer_bias_ram* meminst;


SC_CTOR(fc2_fc2_layer_bias) {
meminst = new fc2_fc2_layer_bias_ram("fc2_fc2_layer_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~fc2_fc2_layer_bias() {
    delete meminst;
}


};//endmodule
#endif
