// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<58> fc3::ap_ST_fsm_state1 = "1";
const sc_lv<58> fc3::ap_ST_fsm_state2 = "10";
const sc_lv<58> fc3::ap_ST_fsm_state3 = "100";
const sc_lv<58> fc3::ap_ST_fsm_state4 = "1000";
const sc_lv<58> fc3::ap_ST_fsm_state5 = "10000";
const sc_lv<58> fc3::ap_ST_fsm_state6 = "100000";
const sc_lv<58> fc3::ap_ST_fsm_state7 = "1000000";
const sc_lv<58> fc3::ap_ST_fsm_state8 = "10000000";
const sc_lv<58> fc3::ap_ST_fsm_state9 = "100000000";
const sc_lv<58> fc3::ap_ST_fsm_state10 = "1000000000";
const sc_lv<58> fc3::ap_ST_fsm_state11 = "10000000000";
const sc_lv<58> fc3::ap_ST_fsm_state12 = "100000000000";
const sc_lv<58> fc3::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fc3::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> fc3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fc3::ap_const_lv32_39 = "111001";
const sc_lv<32> fc3::ap_const_lv32_2 = "10";
const sc_lv<1> fc3::ap_const_lv1_0 = "0";
const sc_lv<32> fc3::ap_const_lv32_8 = "1000";
const sc_lv<32> fc3::ap_const_lv32_10 = "10000";
const sc_lv<32> fc3::ap_const_lv32_24 = "100100";
const sc_lv<32> fc3::ap_const_lv32_D = "1101";
const sc_lv<32> fc3::ap_const_lv32_15 = "10101";
const sc_lv<32> fc3::ap_const_lv32_1D = "11101";
const sc_lv<32> fc3::ap_const_lv32_2C = "101100";
const sc_lv<32> fc3::ap_const_lv32_1 = "1";
const sc_lv<32> fc3::ap_const_lv32_3 = "11";
const sc_lv<32> fc3::ap_const_lv32_4 = "100";
const sc_lv<32> fc3::ap_const_lv32_7 = "111";
const sc_lv<32> fc3::ap_const_lv32_F = "1111";
const sc_lv<32> fc3::ap_const_lv32_22 = "100010";
const sc_lv<32> fc3::ap_const_lv32_23 = "100011";
const sc_lv<32> fc3::ap_const_lv32_38 = "111000";
const sc_lv<4> fc3::ap_const_lv4_0 = "0000";
const sc_lv<1> fc3::ap_const_lv1_1 = "1";
const sc_lv<7> fc3::ap_const_lv7_0 = "0000000";
const sc_lv<32> fc3::ap_const_lv32_E = "1110";
const sc_lv<32> fc3::ap_const_lv32_16 = "10110";
const sc_lv<32> fc3::ap_const_lv32_9 = "1001";
const sc_lv<32> fc3::ap_const_lv32_11 = "10001";
const sc_lv<32> fc3::ap_const_lv32_1E = "11110";
const sc_lv<32> fc3::ap_const_lv32_5 = "101";
const sc_lv<32> fc3::ap_const_lv32_2D = "101101";
const sc_lv<32> fc3::ap_const_lv32_25 = "100101";
const sc_lv<4> fc3::ap_const_lv4_1 = "1";
const sc_lv<4> fc3::ap_const_lv4_9 = "1001";
const sc_lv<7> fc3::ap_const_lv7_54 = "1010100";
const sc_lv<7> fc3::ap_const_lv7_1 = "1";
const sc_lv<3> fc3::ap_const_lv3_0 = "000";
const sc_lv<4> fc3::ap_const_lv4_A = "1010";
const bool fc3::ap_const_boolean_1 = true;

fc3::fc3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc3_layer_weights_U = new fc3_fc3_layer_weights("fc3_layer_weights_U");
    fc3_layer_weights_U->clk(ap_clk);
    fc3_layer_weights_U->reset(ap_rst);
    fc3_layer_weights_U->address0(fc3_layer_weights_address0);
    fc3_layer_weights_U->ce0(fc3_layer_weights_ce0);
    fc3_layer_weights_U->q0(fc3_layer_weights_q0);
    fc3_layer_bias_U = new fc3_fc3_layer_bias("fc3_layer_bias_U");
    fc3_layer_bias_U->clk(ap_clk);
    fc3_layer_bias_U->reset(ap_rst);
    fc3_layer_bias_U->address0(fc3_layer_bias_address0);
    fc3_layer_bias_U->ce0(fc3_layer_bias_ce0);
    fc3_layer_bias_U->q0(fc3_layer_bias_q0);
    output_U = new fc3_output("output_U");
    output_U->clk(ap_clk);
    output_U->reset(ap_rst);
    output_U->address0(output_address0);
    output_U->ce0(output_ce0);
    output_U->we0(output_we0);
    output_U->d0(output_d0);
    output_U->q0(output_q0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46 = new lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46");
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->clk(ap_clk);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->reset(ap_rst);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->din0(grp_fu_243_p0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->din1(grp_fu_243_p1);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->ce(ap_var_for_const0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46->dout(grp_fu_243_p2);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47 = new lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47");
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->clk(ap_clk);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->reset(ap_rst);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->din0(fc3_layer_weights_lo_reg_444);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->din1(tmp_40_reg_421);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->ce(ap_var_for_const0);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47->dout(grp_fu_248_p2);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48 = new lenet_hls_fdiv_32ns_32ns_32_12_1<1,12,32,32,32>("lenet_hls_fdiv_32ns_32ns_32_12_1_U48");
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->clk(ap_clk);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->reset(ap_rst);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->din0(reg_274);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->din1(soft_max_value_reg_209);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->ce(ap_var_for_const0);
    lenet_hls_fdiv_32ns_32ns_32_12_1_U48->dout(grp_fu_252_p2);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49 = new lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1<1,8,32,32,32>("lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49");
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->clk(ap_clk);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->reset(ap_rst);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->din0(ap_var_for_const1);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->din1(grp_fu_257_p1);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->ce(ap_var_for_const0);
    lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49->dout(grp_fu_257_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( in_V_empty_n );
    sensitive << ( exitcond9_fu_297_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( exitcond_fu_388_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( exitcond_fu_388_p2 );

    SC_METHOD(thread_exitcond7_fu_370_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( i1_reg_221 );

    SC_METHOD(thread_exitcond8_fu_339_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_exitcond9_fu_297_p2);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_297_p2 );
    sensitive << ( j_reg_186 );

    SC_METHOD(thread_exitcond_fu_388_p2);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( i2_reg_232 );

    SC_METHOD(thread_fc3_layer_bias_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_27_fu_382_p1 );

    SC_METHOD(thread_fc3_layer_bias_ce0);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_fc3_layer_weights_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_38_cast_fu_360_p1 );

    SC_METHOD(thread_fc3_layer_weights_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_243_p0);
    sensitive << ( reg_262 );
    sensitive << ( soft_max_value_reg_209 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_grp_fu_243_p1);
    sensitive << ( reg_274 );
    sensitive << ( tmp_31_reg_454 );
    sensitive << ( fc3_layer_bias_load_reg_477 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_grp_fu_257_p1);
    sensitive << ( reg_262 );
    sensitive << ( reg_268 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_i_3_fu_376_p2);
    sensitive << ( i1_reg_221 );

    SC_METHOD(thread_i_4_fu_345_p2);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_i_5_fu_394_p2);
    sensitive << ( i2_reg_232 );

    SC_METHOD(thread_in_V_blk_n);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_297_p2 );

    SC_METHOD(thread_in_V_read);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_297_p2 );

    SC_METHOD(thread_indvarinc_fu_280_p2);
    sensitive << ( invdar_reg_175 );

    SC_METHOD(thread_j_3_fu_303_p2);
    sensitive << ( j_reg_186 );

    SC_METHOD(thread_out_V_blk_n);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_out_V_din);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( tmp_34_reg_500 );

    SC_METHOD(thread_out_V_write);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_output_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_addr_2_reg_449 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( output_addr_1_reg_472 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_fu_286_p1 );
    sensitive << ( tmp_29_fu_365_p1 );
    sensitive << ( tmp_27_fu_382_p1 );
    sensitive << ( tmp_33_fu_400_p1 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_output_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_output_d0);
    sensitive << ( reg_268 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_output_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_p_shl1_cast_fu_329_p1);
    sensitive << ( tmp_36_fu_321_p3 );

    SC_METHOD(thread_p_shl_cast_fu_317_p1);
    sensitive << ( tmp_35_fu_309_p3 );

    SC_METHOD(thread_tmp_27_fu_382_p1);
    sensitive << ( i1_reg_221 );

    SC_METHOD(thread_tmp_29_cast_fu_351_p1);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_tmp_29_fu_365_p1);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_tmp_33_fu_400_p1);
    sensitive << ( i2_reg_232 );

    SC_METHOD(thread_tmp_35_fu_309_p3);
    sensitive << ( j_reg_186 );

    SC_METHOD(thread_tmp_36_fu_321_p3);
    sensitive << ( j_reg_186 );

    SC_METHOD(thread_tmp_37_fu_333_p2);
    sensitive << ( p_shl1_cast_fu_329_p1 );
    sensitive << ( p_shl_cast_fu_317_p1 );

    SC_METHOD(thread_tmp_38_cast_fu_360_p1);
    sensitive << ( tmp_38_fu_355_p2 );

    SC_METHOD(thread_tmp_38_fu_355_p2);
    sensitive << ( tmp_37_reg_426 );
    sensitive << ( tmp_29_cast_fu_351_p1 );

    SC_METHOD(thread_tmp_fu_286_p1);
    sensitive << ( invdar_reg_175 );

    SC_METHOD(thread_tmp_s_fu_291_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_175 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_full_n );
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond9_fu_297_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond8_fu_339_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond7_fu_370_p2 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( exitcond_fu_388_p2 );
    sensitive << ( tmp_s_fu_291_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_V_din, "(port)out_V_din");
    sc_trace(mVcdFile, out_V_full_n, "(port)out_V_full_n");
    sc_trace(mVcdFile, out_V_write, "(port)out_V_write");
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, fc3_layer_weights_address0, "fc3_layer_weights_address0");
    sc_trace(mVcdFile, fc3_layer_weights_ce0, "fc3_layer_weights_ce0");
    sc_trace(mVcdFile, fc3_layer_weights_q0, "fc3_layer_weights_q0");
    sc_trace(mVcdFile, fc3_layer_bias_address0, "fc3_layer_bias_address0");
    sc_trace(mVcdFile, fc3_layer_bias_ce0, "fc3_layer_bias_ce0");
    sc_trace(mVcdFile, fc3_layer_bias_q0, "fc3_layer_bias_q0");
    sc_trace(mVcdFile, out_V_blk_n, "out_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, in_V_blk_n, "in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond9_fu_297_p2, "exitcond9_fu_297_p2");
    sc_trace(mVcdFile, output_q0, "output_q0");
    sc_trace(mVcdFile, reg_262, "reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, grp_fu_243_p2, "grp_fu_243_p2");
    sc_trace(mVcdFile, reg_268, "reg_268");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_257_p2, "grp_fu_257_p2");
    sc_trace(mVcdFile, reg_274, "reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, indvarinc_fu_280_p2, "indvarinc_fu_280_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_3_fu_303_p2, "j_3_fu_303_p2");
    sc_trace(mVcdFile, j_3_reg_416, "j_3_reg_416");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, tmp_40_reg_421, "tmp_40_reg_421");
    sc_trace(mVcdFile, tmp_37_fu_333_p2, "tmp_37_fu_333_p2");
    sc_trace(mVcdFile, tmp_37_reg_426, "tmp_37_reg_426");
    sc_trace(mVcdFile, i_4_fu_345_p2, "i_4_fu_345_p2");
    sc_trace(mVcdFile, i_4_reg_434, "i_4_reg_434");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond8_fu_339_p2, "exitcond8_fu_339_p2");
    sc_trace(mVcdFile, fc3_layer_weights_lo_reg_444, "fc3_layer_weights_lo_reg_444");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, output_addr_2_reg_449, "output_addr_2_reg_449");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_248_p2, "grp_fu_248_p2");
    sc_trace(mVcdFile, tmp_31_reg_454, "tmp_31_reg_454");
    sc_trace(mVcdFile, i_3_fu_376_p2, "i_3_fu_376_p2");
    sc_trace(mVcdFile, i_3_reg_462, "i_3_reg_462");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, exitcond7_fu_370_p2, "exitcond7_fu_370_p2");
    sc_trace(mVcdFile, output_addr_1_reg_472, "output_addr_1_reg_472");
    sc_trace(mVcdFile, fc3_layer_bias_load_reg_477, "fc3_layer_bias_load_reg_477");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, i_5_fu_394_p2, "i_5_fu_394_p2");
    sc_trace(mVcdFile, i_5_reg_490, "i_5_reg_490");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, exitcond_fu_388_p2, "exitcond_fu_388_p2");
    sc_trace(mVcdFile, grp_fu_252_p2, "grp_fu_252_p2");
    sc_trace(mVcdFile, tmp_34_reg_500, "tmp_34_reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, output_address0, "output_address0");
    sc_trace(mVcdFile, output_ce0, "output_ce0");
    sc_trace(mVcdFile, output_we0, "output_we0");
    sc_trace(mVcdFile, output_d0, "output_d0");
    sc_trace(mVcdFile, invdar_reg_175, "invdar_reg_175");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_s_fu_291_p2, "tmp_s_fu_291_p2");
    sc_trace(mVcdFile, j_reg_186, "j_reg_186");
    sc_trace(mVcdFile, i_reg_197, "i_reg_197");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, soft_max_value_reg_209, "soft_max_value_reg_209");
    sc_trace(mVcdFile, i1_reg_221, "i1_reg_221");
    sc_trace(mVcdFile, i2_reg_232, "i2_reg_232");
    sc_trace(mVcdFile, tmp_fu_286_p1, "tmp_fu_286_p1");
    sc_trace(mVcdFile, tmp_38_cast_fu_360_p1, "tmp_38_cast_fu_360_p1");
    sc_trace(mVcdFile, tmp_29_fu_365_p1, "tmp_29_fu_365_p1");
    sc_trace(mVcdFile, tmp_27_fu_382_p1, "tmp_27_fu_382_p1");
    sc_trace(mVcdFile, tmp_33_fu_400_p1, "tmp_33_fu_400_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_243_p0, "grp_fu_243_p0");
    sc_trace(mVcdFile, grp_fu_243_p1, "grp_fu_243_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, grp_fu_257_p1, "grp_fu_257_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, tmp_35_fu_309_p3, "tmp_35_fu_309_p3");
    sc_trace(mVcdFile, tmp_36_fu_321_p3, "tmp_36_fu_321_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_329_p1, "p_shl1_cast_fu_329_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_317_p1, "p_shl_cast_fu_317_p1");
    sc_trace(mVcdFile, tmp_29_cast_fu_351_p1, "tmp_29_cast_fu_351_p1");
    sc_trace(mVcdFile, tmp_38_fu_355_p2, "tmp_38_fu_355_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fc3::~fc3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc3_layer_weights_U;
    delete fc3_layer_bias_U;
    delete output_U;
    delete lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U46;
    delete lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U47;
    delete lenet_hls_fdiv_32ns_32ns_32_12_1_U48;
    delete lenet_hls_fexp_32ns_32ns_32_8_full_dsp_1_U49;
}

void fc3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc3::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void fc3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                    esl_seteq<1,1,1>(exitcond_fu_388_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_1))) {
        i1_reg_221 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        i1_reg_221 = i_3_reg_462.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond7_fu_370_p2.read(), ap_const_lv1_1))) {
        i2_reg_232 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
                esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        i2_reg_232 = i_5_reg_490.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_reg_197 = i_4_reg_434.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        i_reg_197 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_291_p2.read()))) {
        invdar_reg_175 = indvarinc_fu_280_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        invdar_reg_175 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_291_p2.read(), ap_const_lv1_1))) {
        j_reg_186 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond8_fu_339_p2.read(), ap_const_lv1_1))) {
        j_reg_186 = j_3_reg_416.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_1))) {
        soft_max_value_reg_209 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        soft_max_value_reg_209 = grp_fu_243_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        fc3_layer_bias_load_reg_477 = fc3_layer_bias_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fc3_layer_weights_lo_reg_444 = fc3_layer_weights_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_3_reg_462 = i_3_fu_376_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_4_reg_434 = i_4_fu_345_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        i_5_reg_490 = i_5_fu_394_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        j_3_reg_416 = j_3_fu_303_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_370_p2.read()))) {
        output_addr_1_reg_472 =  (sc_lv<4>) (tmp_27_fu_382_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_addr_2_reg_449 =  (sc_lv<4>) (tmp_29_fu_365_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        reg_262 = output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        reg_268 = grp_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        reg_274 = grp_fu_257_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_31_reg_454 = grp_fu_248_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
        tmp_34_reg_500 = grp_fu_252_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        tmp_37_reg_426 = tmp_37_fu_333_p2.read();
        tmp_40_reg_421 = in_V_dout.read();
    }
}

void fc3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fc3::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fc3::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fc3::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fc3::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fc3::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc3::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fc3::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void fc3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fc3::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void fc3::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fc3::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void fc3::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void fc3::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void fc3::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void fc3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fc3::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void fc3::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void fc3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fc3::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void fc3::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void fc3::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fc3::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc3::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc3::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void fc3::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()));
}

void fc3::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_388_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void fc3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_388_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc3::thread_exitcond7_fu_370_p2() {
    exitcond7_fu_370_p2 = (!i1_reg_221.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_221.read() == ap_const_lv4_A);
}

void fc3::thread_exitcond8_fu_339_p2() {
    exitcond8_fu_339_p2 = (!i_reg_197.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_197.read() == ap_const_lv4_A);
}

void fc3::thread_exitcond9_fu_297_p2() {
    exitcond9_fu_297_p2 = (!j_reg_186.read().is_01() || !ap_const_lv7_54.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_186.read() == ap_const_lv7_54);
}

void fc3::thread_exitcond_fu_388_p2() {
    exitcond_fu_388_p2 = (!i2_reg_232.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i2_reg_232.read() == ap_const_lv4_A);
}

void fc3::thread_fc3_layer_bias_address0() {
    fc3_layer_bias_address0 =  (sc_lv<4>) (tmp_27_fu_382_p1.read());
}

void fc3::thread_fc3_layer_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        fc3_layer_bias_ce0 = ap_const_logic_1;
    } else {
        fc3_layer_bias_ce0 = ap_const_logic_0;
    }
}

void fc3::thread_fc3_layer_weights_address0() {
    fc3_layer_weights_address0 =  (sc_lv<10>) (tmp_38_cast_fu_360_p1.read());
}

void fc3::thread_fc3_layer_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fc3_layer_weights_ce0 = ap_const_logic_1;
    } else {
        fc3_layer_weights_ce0 = ap_const_logic_0;
    }
}

void fc3::thread_grp_fu_243_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_fu_243_p0 = soft_max_value_reg_209.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        grp_fu_243_p0 = reg_262.read();
    } else {
        grp_fu_243_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc3::thread_grp_fu_243_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_fu_243_p1 = reg_274.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_243_p1 = fc3_layer_bias_load_reg_477.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_243_p1 = tmp_31_reg_454.read();
    } else {
        grp_fu_243_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc3::thread_grp_fu_257_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_257_p1 = reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_257_p1 = reg_268.read();
    } else {
        grp_fu_257_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc3::thread_i_3_fu_376_p2() {
    i_3_fu_376_p2 = (!i1_reg_221.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i1_reg_221.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc3::thread_i_4_fu_345_p2() {
    i_4_fu_345_p2 = (!i_reg_197.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_197.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc3::thread_i_5_fu_394_p2() {
    i_5_fu_394_p2 = (!i2_reg_232.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i2_reg_232.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc3::thread_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0))) {
        in_V_blk_n = in_V_empty_n.read();
    } else {
        in_V_blk_n = ap_const_logic_1;
    }
}

void fc3::thread_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        in_V_read = ap_const_logic_1;
    } else {
        in_V_read = ap_const_logic_0;
    }
}

void fc3::thread_indvarinc_fu_280_p2() {
    indvarinc_fu_280_p2 = (!invdar_reg_175.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(invdar_reg_175.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc3::thread_j_3_fu_303_p2() {
    j_3_fu_303_p2 = (!j_reg_186.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_reg_186.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc3::thread_out_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        out_V_blk_n = out_V_full_n.read();
    } else {
        out_V_blk_n = ap_const_logic_1;
    }
}

void fc3::thread_out_V_din() {
    out_V_din = tmp_34_reg_500.read();
}

void fc3::thread_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
         esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        out_V_write = ap_const_logic_1;
    } else {
        out_V_write = ap_const_logic_0;
    }
}

void fc3::thread_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        output_address0 =  (sc_lv<4>) (tmp_33_fu_400_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        output_address0 = output_addr_1_reg_472.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_address0 =  (sc_lv<4>) (tmp_27_fu_382_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        output_address0 = output_addr_2_reg_449.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_address0 =  (sc_lv<4>) (tmp_29_fu_365_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_address0 =  (sc_lv<4>) (tmp_fu_286_p1.read());
    } else {
        output_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void fc3::thread_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        output_ce0 = ap_const_logic_1;
    } else {
        output_ce0 = ap_const_logic_0;
    }
}

void fc3::thread_output_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        output_d0 = reg_268.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_d0 = ap_const_lv32_0;
    } else {
        output_d0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc3::thread_output_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        output_we0 = ap_const_logic_1;
    } else {
        output_we0 = ap_const_logic_0;
    }
}

void fc3::thread_p_shl1_cast_fu_329_p1() {
    p_shl1_cast_fu_329_p1 = esl_zext<11,8>(tmp_36_fu_321_p3.read());
}

void fc3::thread_p_shl_cast_fu_317_p1() {
    p_shl_cast_fu_317_p1 = esl_zext<11,10>(tmp_35_fu_309_p3.read());
}

void fc3::thread_tmp_27_fu_382_p1() {
    tmp_27_fu_382_p1 = esl_zext<64,4>(i1_reg_221.read());
}

void fc3::thread_tmp_29_cast_fu_351_p1() {
    tmp_29_cast_fu_351_p1 = esl_zext<11,4>(i_reg_197.read());
}

void fc3::thread_tmp_29_fu_365_p1() {
    tmp_29_fu_365_p1 = esl_zext<64,4>(i_reg_197.read());
}

void fc3::thread_tmp_33_fu_400_p1() {
    tmp_33_fu_400_p1 = esl_zext<64,4>(i2_reg_232.read());
}

void fc3::thread_tmp_35_fu_309_p3() {
    tmp_35_fu_309_p3 = esl_concat<7,3>(j_reg_186.read(), ap_const_lv3_0);
}

void fc3::thread_tmp_36_fu_321_p3() {
    tmp_36_fu_321_p3 = esl_concat<7,1>(j_reg_186.read(), ap_const_lv1_0);
}

void fc3::thread_tmp_37_fu_333_p2() {
    tmp_37_fu_333_p2 = (!p_shl1_cast_fu_329_p1.read().is_01() || !p_shl_cast_fu_317_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl1_cast_fu_329_p1.read()) + sc_biguint<11>(p_shl_cast_fu_317_p1.read()));
}

void fc3::thread_tmp_38_cast_fu_360_p1() {
    tmp_38_cast_fu_360_p1 = esl_zext<64,11>(tmp_38_fu_355_p2.read());
}

void fc3::thread_tmp_38_fu_355_p2() {
    tmp_38_fu_355_p2 = (!tmp_37_reg_426.read().is_01() || !tmp_29_cast_fu_351_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_37_reg_426.read()) + sc_biguint<11>(tmp_29_cast_fu_351_p1.read()));
}

void fc3::thread_tmp_fu_286_p1() {
    tmp_fu_286_p1 = esl_zext<64,4>(invdar_reg_175.read());
}

void fc3::thread_tmp_s_fu_291_p2() {
    tmp_s_fu_291_p2 = (!invdar_reg_175.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_175.read() == ap_const_lv4_9);
}

void fc3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_291_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond9_fu_297_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond8_fu_339_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(exitcond7_fu_370_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(exitcond_fu_388_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state58;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<58>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

