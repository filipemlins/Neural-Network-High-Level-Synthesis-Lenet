// ==============================================================
// File generated on Wed Jun 17 16:36:41 -03 2020
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __fc1_fc1_layer_bias_H__
#define __fc1_fc1_layer_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct fc1_fc1_layer_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(fc1_fc1_layer_bias_ram) {
        ram[0] = "0b10111010001100101110011111111011";
        ram[1] = "0b00111100000011011001110100111000";
        ram[2] = "0b00111010100001001111111011110101";
        ram[3] = "0b10111001100001011101110101011100";
        ram[4] = "0b00111001110110100100000100100010";
        ram[5] = "0b10111011101100001010100000111011";
        ram[6] = "0b10111011001100011001010001010100";
        ram[7] = "0b00111011101101001010011110111011";
        ram[8] = "0b00111010010100111111100010100110";
        ram[9] = "0b00111011111110011111110000011000";
        ram[10] = "0b10111001100010001000010011110000";
        ram[11] = "0b00110100110101000001110010100110";
        ram[12] = "0b00111000000111011010110010010101";
        ram[13] = "0b10111100011110010111011010001000";
        ram[14] = "0b10111011110111011110001110111010";
        ram[15] = "0b10111011011011100000000010011001";
        ram[16] = "0b00111010110001110101111011100110";
        ram[17] = "0b00111011100100110100001010001111";
        ram[18] = "0b00111100000000111010111111001110";
        ram[19] = "0b00111100001011011111011100101011";
        ram[20] = "0b00111011111000010000111011001010";
        ram[21] = "0b10110111110100010100110011000101";
        ram[22] = "0b00111011010100101011001110001001";
        ram[23] = "0b10111010111001111110101111001110";
        ram[24] = "0b10111011110100111011111100011110";
        ram[25] = "0b00111001101101001110101001111000";
        ram[26] = "0b10111011000010111100101001110110";
        ram[27] = "0b00111100000010100000110100000011";
        ram[28] = "0b10111011000110001001101000111101";
        ram[29] = "0b00111011111111000000100100010101";
        ram[30] = "0b00111100010100110110110110111101";
        ram[31] = "0b10111010010001011011010001110101";
        ram[32] = "0b10111011110001010000101010001100";
        ram[33] = "0b00111011000011100111011111111111";
        ram[34] = "0b10111010000010110000001111010100";
        ram[35] = "0b10111011110010110001100111101101";
        ram[36] = "0b00111011010010110100101101011111";
        ram[37] = "0b10111010011001001111100011000001";
        ram[38] = "0b10111001001001100000100101011110";
        ram[39] = "0b10111011000110100101000001010100";
        ram[40] = "0b10111011101010000010111100100100";
        ram[41] = "0b00111100010101011001110010010011";
        ram[42] = "0b00111100000110111111010000111001";
        ram[43] = "0b10111010101110100111010100000110";
        ram[44] = "0b10111011001010100110001101011000";
        ram[45] = "0b10111011101011000001010011000111";
        ram[46] = "0b00111010010100011010100100101100";
        ram[47] = "0b00111011110100101110000110110011";
        ram[48] = "0b00111011100001010011001011111011";
        ram[49] = "0b10111010101011001111111101010101";
        ram[50] = "0b10111011101000101111101011011100";
        ram[51] = "0b10111011110011011001110011101100";
        ram[52] = "0b00111011000100111100101110111011";
        ram[53] = "0b00111010100010111000101111100010";
        ram[54] = "0b00111010111010010110001000101111";
        ram[55] = "0b00111010000100100111110101000110";
        ram[56] = "0b10111010110111111001111100000011";
        ram[57] = "0b00111011011010100011110010000111";
        ram[58] = "0b10111100011100111011010101110010";
        ram[59] = "0b00111100000111010011101011101101";
        ram[60] = "0b00111000001100111000110101111111";
        ram[61] = "0b10111011010111000111011101100111";
        ram[62] = "0b10111011100011100110111110011100";
        ram[63] = "0b00111010010001100011110000101000";
        ram[64] = "0b10111011100001100100110101011000";
        ram[65] = "0b00111100011000011011100110010011";
        ram[66] = "0b10111010101011001010111011010011";
        ram[67] = "0b10111011110000111111000110100000";
        ram[68] = "0b00111011110101000101101010110110";
        ram[69] = "0b00111011010111110000101101001110";
        ram[70] = "0b00111100000010011110101111010000";
        ram[71] = "0b10111010100100110100000111011111";
        ram[72] = "0b10111000110011110101000011101000";
        ram[73] = "0b10111100011011000111000001011011";
        ram[74] = "0b10111011101010010001101111011010";
        ram[75] = "0b10111011010001010101110010101100";
        ram[76] = "0b00111010010000100110111010001111";
        ram[77] = "0b10111011010000010001000000100001";
        ram[78] = "0b00111100100000011011010110001100";
        ram[79] = "0b00111011111101000001110100001000";
        ram[80] = "0b10111011111100011111101100001101";
        ram[81] = "0b00111100000000000101000001100101";
        ram[82] = "0b00110111101010010101110101101100";
        ram[83] = "0b10111011011000011111001000100010";
        ram[84] = "0b00111010101101100000010101100100";
        ram[85] = "0b00111011100110000101001101000001";
        ram[86] = "0b00111010101100000101001011111111";
        ram[87] = "0b00111011110011111111000000111011";
        ram[88] = "0b10111010000110101000110010001101";
        ram[89] = "0b00111000010101110101001011101000";
        ram[90] = "0b10111001101100000110101001011000";
        ram[91] = "0b10111011111111111010110111101000";
        ram[92] = "0b10111010101001011100101111111101";
        ram[93] = "0b00111100000110100101001100001101";
        ram[94] = "0b00111100101010000100110110111101";
        ram[95] = "0b00111100000000110100011010110000";
        ram[96] = "0b00111100100110111110011111111110";
        ram[97] = "0b00111100000010001100101010100110";
        ram[98] = "0b00110110100100101011101010000111";
        ram[99] = "0b00111100000010010001000111000011";
        ram[100] = "0b10111011101010111110101110000110";
        ram[101] = "0b00111011001101010111000110100100";
        ram[102] = "0b00111011011011101111101000110111";
        ram[103] = "0b00111010011001000011110010001000";
        ram[104] = "0b10111011001100000001110100111011";
        ram[105] = "0b10111011000100111001001100110011";
        ram[106] = "0b00111100000110110111001011101010";
        ram[107] = "0b10111011101010101011101011000010";
        ram[108] = "0b00111011100010110101010101000101";
        ram[109] = "0b00111100000110111011011111111000";
        ram[110] = "0b00111010011101100111100001010110";
        ram[111] = "0b10111011100101110101111101110001";
        ram[112] = "0b10111100001111110100000111000001";
        ram[113] = "0b00111011101010110001001100110111";
        ram[114] = "0b10111011011111011101011110111111";
        ram[115] = "0b10111100010010010001110010010100";
        ram[116] = "0b00111010111110101011011111010000";
        ram[117] = "0b10111011001110100001111001010000";
        ram[118] = "0b00111011000110011001001100111110";
        ram[119] = "0b10111011101100101001010101001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(fc1_fc1_layer_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


fc1_fc1_layer_bias_ram* meminst;


SC_CTOR(fc1_fc1_layer_bias) {
meminst = new fc1_fc1_layer_bias_ram("fc1_fc1_layer_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~fc1_fc1_layer_bias() {
    delete meminst;
}


};//endmodule
#endif
