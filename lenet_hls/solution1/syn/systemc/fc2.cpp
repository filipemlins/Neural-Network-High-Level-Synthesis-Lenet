// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<24> fc2::ap_ST_fsm_state1 = "1";
const sc_lv<24> fc2::ap_ST_fsm_state2 = "10";
const sc_lv<24> fc2::ap_ST_fsm_state3 = "100";
const sc_lv<24> fc2::ap_ST_fsm_state4 = "1000";
const sc_lv<24> fc2::ap_ST_fsm_state5 = "10000";
const sc_lv<24> fc2::ap_ST_fsm_state6 = "100000";
const sc_lv<24> fc2::ap_ST_fsm_state7 = "1000000";
const sc_lv<24> fc2::ap_ST_fsm_state8 = "10000000";
const sc_lv<24> fc2::ap_ST_fsm_state9 = "100000000";
const sc_lv<24> fc2::ap_ST_fsm_state10 = "1000000000";
const sc_lv<24> fc2::ap_ST_fsm_state11 = "10000000000";
const sc_lv<24> fc2::ap_ST_fsm_state12 = "100000000000";
const sc_lv<24> fc2::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<24> fc2::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<32> fc2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fc2::ap_const_lv32_17 = "10111";
const sc_lv<32> fc2::ap_const_lv32_2 = "10";
const sc_lv<1> fc2::ap_const_lv1_0 = "0";
const sc_lv<32> fc2::ap_const_lv32_8 = "1000";
const sc_lv<32> fc2::ap_const_lv32_10 = "10000";
const sc_lv<32> fc2::ap_const_lv32_D = "1101";
const sc_lv<32> fc2::ap_const_lv32_15 = "10101";
const sc_lv<32> fc2::ap_const_lv32_1 = "1";
const sc_lv<32> fc2::ap_const_lv32_3 = "11";
const sc_lv<32> fc2::ap_const_lv32_4 = "100";
const sc_lv<32> fc2::ap_const_lv32_7 = "111";
const sc_lv<32> fc2::ap_const_lv32_F = "1111";
const sc_lv<32> fc2::ap_const_lv32_16 = "10110";
const sc_lv<7> fc2::ap_const_lv7_0 = "0000000";
const sc_lv<1> fc2::ap_const_lv1_1 = "1";
const sc_lv<14> fc2::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> fc2::ap_const_lv32_E = "1110";
const sc_lv<32> fc2::ap_const_lv32_9 = "1001";
const sc_lv<32> fc2::ap_const_lv32_11 = "10001";
const sc_lv<32> fc2::ap_const_lv32_5 = "101";
const sc_lv<7> fc2::ap_const_lv7_1 = "1";
const sc_lv<7> fc2::ap_const_lv7_53 = "1010011";
const sc_lv<14> fc2::ap_const_lv14_54 = "1010100";
const sc_lv<7> fc2::ap_const_lv7_78 = "1111000";
const sc_lv<7> fc2::ap_const_lv7_54 = "1010100";
const sc_lv<32> fc2::ap_const_lv32_1E = "11110";
const sc_lv<8> fc2::ap_const_lv8_FF = "11111111";
const sc_lv<23> fc2::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> fc2::ap_const_lv5_2 = "10";
const bool fc2::ap_const_boolean_1 = true;

fc2::fc2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc2_layer_weights_U = new fc2_fc2_layer_weights("fc2_layer_weights_U");
    fc2_layer_weights_U->clk(ap_clk);
    fc2_layer_weights_U->reset(ap_rst);
    fc2_layer_weights_U->address0(fc2_layer_weights_address0);
    fc2_layer_weights_U->ce0(fc2_layer_weights_ce0);
    fc2_layer_weights_U->q0(fc2_layer_weights_q0);
    fc2_layer_bias_U = new fc2_fc2_layer_bias("fc2_layer_bias_U");
    fc2_layer_bias_U->clk(ap_clk);
    fc2_layer_bias_U->reset(ap_rst);
    fc2_layer_bias_U->address0(fc2_layer_bias_address0);
    fc2_layer_bias_U->ce0(fc2_layer_bias_ce0);
    fc2_layer_bias_U->q0(fc2_layer_bias_q0);
    output_U = new fc2_output("output_U");
    output_U->clk(ap_clk);
    output_U->reset(ap_rst);
    output_U->address0(output_address0);
    output_U->ce0(output_ce0);
    output_U->we0(output_we0);
    output_U->d0(output_d0);
    output_U->q0(output_q0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38 = new lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38");
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->clk(ap_clk);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->reset(ap_rst);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->din0(reg_236);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->din1(grp_fu_223_p1);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->ce(ap_var_for_const0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38->dout(grp_fu_223_p2);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39 = new lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39");
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->clk(ap_clk);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->reset(ap_rst);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->din0(fc2_layer_weights_lo_reg_421);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->din1(tmp_49_reg_403);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->ce(ap_var_for_const0);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39->dout(grp_fu_227_p2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U40 = new lenet_hls_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>("lenet_hls_fcmp_32ns_32ns_1_1_1_U40");
    lenet_hls_fcmp_32ns_32ns_1_1_1_U40->din0(reg_241);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U40->din1(ap_var_for_const1);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U40->opcode(ap_var_for_const2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U40->dout(tmp_41_fu_231_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_to_int_fu_332_p1);
    sensitive << ( reg_241 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( in_V_empty_n );
    sensitive << ( exitcond7_fu_270_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_314_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond6_fu_282_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_200 );

    SC_METHOD(thread_exitcond7_fu_270_p2);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond7_fu_270_p2 );
    sensitive << ( j_reg_177 );

    SC_METHOD(thread_exitcond_fu_314_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( i1_reg_212 );

    SC_METHOD(thread_fc2_layer_bias_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_38_fu_326_p1 );

    SC_METHOD(thread_fc2_layer_bias_ce0);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_fc2_layer_weights_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_50_cast_fu_304_p1 );

    SC_METHOD(thread_fc2_layer_weights_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_223_p1);
    sensitive << ( tmp_44_reg_431 );
    sensitive << ( fc2_layer_bias_load_reg_454 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_i_6_fu_320_p2);
    sensitive << ( i1_reg_212 );

    SC_METHOD(thread_i_7_fu_288_p2);
    sensitive << ( i_reg_200 );

    SC_METHOD(thread_in_V_blk_n);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond7_fu_270_p2 );

    SC_METHOD(thread_in_V_read);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond7_fu_270_p2 );

    SC_METHOD(thread_indvarinc_fu_247_p2);
    sensitive << ( invdar_reg_166 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_314_p2 );

    SC_METHOD(thread_j_4_fu_276_p2);
    sensitive << ( j_reg_177 );

    SC_METHOD(thread_next_mul_fu_264_p2);
    sensitive << ( phi_mul_reg_188 );

    SC_METHOD(thread_notlhs_fu_350_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_39_fu_336_p4 );

    SC_METHOD(thread_notrhs_fu_356_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_48_fu_346_p1 );

    SC_METHOD(thread_out_V_blk_n);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_out_V_din);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_46_reg_459 );

    SC_METHOD(thread_out_V_write);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_output_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_addr_5_reg_426 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_fu_253_p1 );
    sensitive << ( tmp_43_fu_309_p1 );
    sensitive << ( tmp_38_fu_326_p1 );

    SC_METHOD(thread_output_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_output_d0);
    sensitive << ( reg_241 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_output_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_38_fu_326_p1);
    sensitive << ( i1_reg_212 );

    SC_METHOD(thread_tmp_39_fu_336_p4);
    sensitive << ( a_assign_to_int_fu_332_p1 );

    SC_METHOD(thread_tmp_40_fu_362_p2);
    sensitive << ( notrhs_fu_356_p2 );
    sensitive << ( notlhs_fu_350_p2 );

    SC_METHOD(thread_tmp_42_fu_368_p2);
    sensitive << ( tmp_40_fu_362_p2 );
    sensitive << ( tmp_41_fu_231_p2 );

    SC_METHOD(thread_tmp_43_cast_fu_294_p1);
    sensitive << ( i_reg_200 );

    SC_METHOD(thread_tmp_43_fu_309_p1);
    sensitive << ( i_reg_200 );

    SC_METHOD(thread_tmp_46_fu_374_p3);
    sensitive << ( reg_241 );
    sensitive << ( tmp_42_fu_368_p2 );

    SC_METHOD(thread_tmp_47_fu_298_p2);
    sensitive << ( phi_mul_reg_188 );
    sensitive << ( tmp_43_cast_fu_294_p1 );

    SC_METHOD(thread_tmp_48_fu_346_p1);
    sensitive << ( a_assign_to_int_fu_332_p1 );

    SC_METHOD(thread_tmp_50_cast_fu_304_p1);
    sensitive << ( tmp_47_fu_298_p2 );

    SC_METHOD(thread_tmp_fu_253_p1);
    sensitive << ( invdar_reg_166 );

    SC_METHOD(thread_tmp_s_fu_258_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_166 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_full_n );
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond7_fu_270_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond6_fu_282_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_314_p2 );
    sensitive << ( tmp_s_fu_258_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, out_V_din, "(port)out_V_din");
    sc_trace(mVcdFile, out_V_full_n, "(port)out_V_full_n");
    sc_trace(mVcdFile, out_V_write, "(port)out_V_write");
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, fc2_layer_weights_address0, "fc2_layer_weights_address0");
    sc_trace(mVcdFile, fc2_layer_weights_ce0, "fc2_layer_weights_ce0");
    sc_trace(mVcdFile, fc2_layer_weights_q0, "fc2_layer_weights_q0");
    sc_trace(mVcdFile, fc2_layer_bias_address0, "fc2_layer_bias_address0");
    sc_trace(mVcdFile, fc2_layer_bias_ce0, "fc2_layer_bias_ce0");
    sc_trace(mVcdFile, fc2_layer_bias_q0, "fc2_layer_bias_q0");
    sc_trace(mVcdFile, out_V_blk_n, "out_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, in_V_blk_n, "in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond7_fu_270_p2, "exitcond7_fu_270_p2");
    sc_trace(mVcdFile, output_q0, "output_q0");
    sc_trace(mVcdFile, reg_236, "reg_236");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_223_p2, "grp_fu_223_p2");
    sc_trace(mVcdFile, reg_241, "reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, indvarinc_fu_247_p2, "indvarinc_fu_247_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul_fu_264_p2, "next_mul_fu_264_p2");
    sc_trace(mVcdFile, next_mul_reg_390, "next_mul_reg_390");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, j_4_fu_276_p2, "j_4_fu_276_p2");
    sc_trace(mVcdFile, j_4_reg_398, "j_4_reg_398");
    sc_trace(mVcdFile, tmp_49_reg_403, "tmp_49_reg_403");
    sc_trace(mVcdFile, i_7_fu_288_p2, "i_7_fu_288_p2");
    sc_trace(mVcdFile, i_7_reg_411, "i_7_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond6_fu_282_p2, "exitcond6_fu_282_p2");
    sc_trace(mVcdFile, fc2_layer_weights_lo_reg_421, "fc2_layer_weights_lo_reg_421");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, output_addr_5_reg_426, "output_addr_5_reg_426");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_227_p2, "grp_fu_227_p2");
    sc_trace(mVcdFile, tmp_44_reg_431, "tmp_44_reg_431");
    sc_trace(mVcdFile, i_6_fu_320_p2, "i_6_fu_320_p2");
    sc_trace(mVcdFile, i_6_reg_439, "i_6_reg_439");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, exitcond_fu_314_p2, "exitcond_fu_314_p2");
    sc_trace(mVcdFile, fc2_layer_bias_load_reg_454, "fc2_layer_bias_load_reg_454");
    sc_trace(mVcdFile, tmp_46_fu_374_p3, "tmp_46_fu_374_p3");
    sc_trace(mVcdFile, tmp_46_reg_459, "tmp_46_reg_459");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, output_address0, "output_address0");
    sc_trace(mVcdFile, output_ce0, "output_ce0");
    sc_trace(mVcdFile, output_we0, "output_we0");
    sc_trace(mVcdFile, output_d0, "output_d0");
    sc_trace(mVcdFile, invdar_reg_166, "invdar_reg_166");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_s_fu_258_p2, "tmp_s_fu_258_p2");
    sc_trace(mVcdFile, j_reg_177, "j_reg_177");
    sc_trace(mVcdFile, phi_mul_reg_188, "phi_mul_reg_188");
    sc_trace(mVcdFile, i_reg_200, "i_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, i1_reg_212, "i1_reg_212");
    sc_trace(mVcdFile, tmp_fu_253_p1, "tmp_fu_253_p1");
    sc_trace(mVcdFile, tmp_50_cast_fu_304_p1, "tmp_50_cast_fu_304_p1");
    sc_trace(mVcdFile, tmp_43_fu_309_p1, "tmp_43_fu_309_p1");
    sc_trace(mVcdFile, tmp_38_fu_326_p1, "tmp_38_fu_326_p1");
    sc_trace(mVcdFile, grp_fu_223_p1, "grp_fu_223_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_43_cast_fu_294_p1, "tmp_43_cast_fu_294_p1");
    sc_trace(mVcdFile, tmp_47_fu_298_p2, "tmp_47_fu_298_p2");
    sc_trace(mVcdFile, a_assign_to_int_fu_332_p1, "a_assign_to_int_fu_332_p1");
    sc_trace(mVcdFile, tmp_39_fu_336_p4, "tmp_39_fu_336_p4");
    sc_trace(mVcdFile, tmp_48_fu_346_p1, "tmp_48_fu_346_p1");
    sc_trace(mVcdFile, notrhs_fu_356_p2, "notrhs_fu_356_p2");
    sc_trace(mVcdFile, notlhs_fu_350_p2, "notlhs_fu_350_p2");
    sc_trace(mVcdFile, tmp_40_fu_362_p2, "tmp_40_fu_362_p2");
    sc_trace(mVcdFile, tmp_41_fu_231_p2, "tmp_41_fu_231_p2");
    sc_trace(mVcdFile, tmp_42_fu_368_p2, "tmp_42_fu_368_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fc2::~fc2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc2_layer_weights_U;
    delete fc2_layer_bias_U;
    delete output_U;
    delete lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38;
    delete lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39;
    delete lenet_hls_fcmp_32ns_32ns_1_1_1_U40;
}

void fc2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc2::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void fc2::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void fc2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                    esl_seteq<1,1,1>(exitcond_fu_314_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_1))) {
        i1_reg_212 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        i1_reg_212 = i_6_reg_439.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_reg_200 = i_7_reg_411.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        i_reg_200 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_258_p2.read()))) {
        invdar_reg_166 = indvarinc_fu_247_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        invdar_reg_166 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_258_p2.read(), ap_const_lv1_1))) {
        j_reg_177 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond6_fu_282_p2.read(), ap_const_lv1_1))) {
        j_reg_177 = j_4_reg_398.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_258_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_188 = ap_const_lv14_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond6_fu_282_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_188 = next_mul_reg_390.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        fc2_layer_bias_load_reg_454 = fc2_layer_bias_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fc2_layer_weights_lo_reg_421 = fc2_layer_weights_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_6_reg_439 = i_6_fu_320_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_7_reg_411 = i_7_fu_288_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        j_4_reg_398 = j_4_fu_276_p2.read();
        next_mul_reg_390 = next_mul_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_addr_5_reg_426 =  (sc_lv<7>) (tmp_43_fu_309_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_236 = output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        reg_241 = grp_fu_223_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_44_reg_431 = grp_fu_227_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        tmp_46_reg_459 = tmp_46_fu_374_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        tmp_49_reg_403 = in_V_dout.read();
    }
}

void fc2::thread_a_assign_to_int_fu_332_p1() {
    a_assign_to_int_fu_332_p1 = reg_241.read();
}

void fc2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc2::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fc2::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fc2::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fc2::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fc2::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fc2::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc2::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fc2::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void fc2::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void fc2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fc2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fc2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fc2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fc2::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc2::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc2::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void fc2::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()));
}

void fc2::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_314_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void fc2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc2::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void fc2::thread_exitcond6_fu_282_p2() {
    exitcond6_fu_282_p2 = (!i_reg_200.read().is_01() || !ap_const_lv7_54.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_200.read() == ap_const_lv7_54);
}

void fc2::thread_exitcond7_fu_270_p2() {
    exitcond7_fu_270_p2 = (!j_reg_177.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_177.read() == ap_const_lv7_78);
}

void fc2::thread_exitcond_fu_314_p2() {
    exitcond_fu_314_p2 = (!i1_reg_212.read().is_01() || !ap_const_lv7_54.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_212.read() == ap_const_lv7_54);
}

void fc2::thread_fc2_layer_bias_address0() {
    fc2_layer_bias_address0 =  (sc_lv<7>) (tmp_38_fu_326_p1.read());
}

void fc2::thread_fc2_layer_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        fc2_layer_bias_ce0 = ap_const_logic_1;
    } else {
        fc2_layer_bias_ce0 = ap_const_logic_0;
    }
}

void fc2::thread_fc2_layer_weights_address0() {
    fc2_layer_weights_address0 =  (sc_lv<14>) (tmp_50_cast_fu_304_p1.read());
}

void fc2::thread_fc2_layer_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fc2_layer_weights_ce0 = ap_const_logic_1;
    } else {
        fc2_layer_weights_ce0 = ap_const_logic_0;
    }
}

void fc2::thread_grp_fu_223_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_223_p1 = fc2_layer_bias_load_reg_454.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_223_p1 = tmp_44_reg_431.read();
    } else {
        grp_fu_223_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc2::thread_i_6_fu_320_p2() {
    i_6_fu_320_p2 = (!i1_reg_212.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i1_reg_212.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc2::thread_i_7_fu_288_p2() {
    i_7_fu_288_p2 = (!i_reg_200.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_200.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc2::thread_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0))) {
        in_V_blk_n = in_V_empty_n.read();
    } else {
        in_V_blk_n = ap_const_logic_1;
    }
}

void fc2::thread_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        in_V_read = ap_const_logic_1;
    } else {
        in_V_read = ap_const_logic_0;
    }
}

void fc2::thread_indvarinc_fu_247_p2() {
    indvarinc_fu_247_p2 = (!invdar_reg_166.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(invdar_reg_166.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc2::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_314_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void fc2::thread_j_4_fu_276_p2() {
    j_4_fu_276_p2 = (!j_reg_177.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_reg_177.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc2::thread_next_mul_fu_264_p2() {
    next_mul_fu_264_p2 = (!phi_mul_reg_188.read().is_01() || !ap_const_lv14_54.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_188.read()) + sc_biguint<14>(ap_const_lv14_54));
}

void fc2::thread_notlhs_fu_350_p2() {
    notlhs_fu_350_p2 = (!tmp_39_fu_336_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_39_fu_336_p4.read() != ap_const_lv8_FF);
}

void fc2::thread_notrhs_fu_356_p2() {
    notrhs_fu_356_p2 = (!tmp_48_fu_346_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_48_fu_346_p1.read() == ap_const_lv23_0);
}

void fc2::thread_out_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        out_V_blk_n = out_V_full_n.read();
    } else {
        out_V_blk_n = ap_const_logic_1;
    }
}

void fc2::thread_out_V_din() {
    out_V_din = tmp_46_reg_459.read();
}

void fc2::thread_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        out_V_write = ap_const_logic_1;
    } else {
        out_V_write = ap_const_logic_0;
    }
}

void fc2::thread_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_address0 =  (sc_lv<7>) (tmp_38_fu_326_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        output_address0 = output_addr_5_reg_426.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_address0 =  (sc_lv<7>) (tmp_43_fu_309_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_address0 =  (sc_lv<7>) (tmp_fu_253_p1.read());
    } else {
        output_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void fc2::thread_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        output_ce0 = ap_const_logic_1;
    } else {
        output_ce0 = ap_const_logic_0;
    }
}

void fc2::thread_output_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        output_d0 = reg_241.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_d0 = ap_const_lv32_0;
    } else {
        output_d0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc2::thread_output_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        output_we0 = ap_const_logic_1;
    } else {
        output_we0 = ap_const_logic_0;
    }
}

void fc2::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void fc2::thread_start_out() {
    start_out = real_start.read();
}

void fc2::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void fc2::thread_tmp_38_fu_326_p1() {
    tmp_38_fu_326_p1 = esl_zext<64,7>(i1_reg_212.read());
}

void fc2::thread_tmp_39_fu_336_p4() {
    tmp_39_fu_336_p4 = a_assign_to_int_fu_332_p1.read().range(30, 23);
}

void fc2::thread_tmp_40_fu_362_p2() {
    tmp_40_fu_362_p2 = (notrhs_fu_356_p2.read() | notlhs_fu_350_p2.read());
}

void fc2::thread_tmp_42_fu_368_p2() {
    tmp_42_fu_368_p2 = (tmp_40_fu_362_p2.read() & tmp_41_fu_231_p2.read());
}

void fc2::thread_tmp_43_cast_fu_294_p1() {
    tmp_43_cast_fu_294_p1 = esl_zext<14,7>(i_reg_200.read());
}

void fc2::thread_tmp_43_fu_309_p1() {
    tmp_43_fu_309_p1 = esl_zext<64,7>(i_reg_200.read());
}

void fc2::thread_tmp_46_fu_374_p3() {
    tmp_46_fu_374_p3 = (!tmp_42_fu_368_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_42_fu_368_p2.read()[0].to_bool())? reg_241.read(): ap_const_lv32_0);
}

void fc2::thread_tmp_47_fu_298_p2() {
    tmp_47_fu_298_p2 = (!phi_mul_reg_188.read().is_01() || !tmp_43_cast_fu_294_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_188.read()) + sc_biguint<14>(tmp_43_cast_fu_294_p1.read()));
}

void fc2::thread_tmp_48_fu_346_p1() {
    tmp_48_fu_346_p1 = a_assign_to_int_fu_332_p1.read().range(23-1, 0);
}

void fc2::thread_tmp_50_cast_fu_304_p1() {
    tmp_50_cast_fu_304_p1 = esl_zext<64,14>(tmp_47_fu_298_p2.read());
}

void fc2::thread_tmp_fu_253_p1() {
    tmp_fu_253_p1 = esl_zext<64,7>(invdar_reg_166.read());
}

void fc2::thread_tmp_s_fu_258_p2() {
    tmp_s_fu_258_p2 = (!invdar_reg_166.read().is_01() || !ap_const_lv7_53.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_166.read() == ap_const_lv7_53);
}

void fc2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_258_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond7_fu_270_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond6_fu_282_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(exitcond_fu_314_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

