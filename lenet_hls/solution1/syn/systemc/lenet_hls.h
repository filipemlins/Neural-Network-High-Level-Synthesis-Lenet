// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lenet_hls_HH_
#define _lenet_hls_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv1.h"
#include "pool1.h"
#include "conv2.h"
#include "pool2.h"
#include "fc1.h"
#include "fc2.h"
#include "fc3.h"
#include "fifo_w32_d2_A.h"
#include "start_for_pool1_U0.h"
#include "start_for_conv2_U0.h"
#include "start_for_pool2_U0.h"
#include "start_for_fc1_U0.h"
#include "start_for_fc2_U0.h"
#include "start_for_fc3_U0.h"

namespace ap_rtl {

struct lenet_hls : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > image_in_V_dout;
    sc_in< sc_logic > image_in_V_empty_n;
    sc_out< sc_logic > image_in_V_read;
    sc_out< sc_lv<32> > fc3_out_V_din;
    sc_in< sc_logic > fc3_out_V_full_n;
    sc_out< sc_logic > fc3_out_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    lenet_hls(sc_module_name name);
    SC_HAS_PROCESS(lenet_hls);

    ~lenet_hls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    conv1* conv1_U0;
    pool1* pool1_U0;
    conv2* conv2_U0;
    pool2* pool2_U0;
    fc1* fc1_U0;
    fc2* fc2_U0;
    fc3* fc3_U0;
    fifo_w32_d2_A* conv1_out_V_U;
    fifo_w32_d2_A* pool1_out_V_U;
    fifo_w32_d2_A* conv2_out_V_U;
    fifo_w32_d2_A* pool2_out_V_U;
    fifo_w32_d2_A* fc1_out_V_U;
    fifo_w32_d2_A* fc2_out_V_U;
    start_for_pool1_U0* start_for_pool1_U0_U;
    start_for_conv2_U0* start_for_conv2_U0_U;
    start_for_pool2_U0* start_for_pool2_U0_U;
    start_for_fc1_U0* start_for_fc1_U0_U;
    start_for_fc2_U0* start_for_fc2_U0_U;
    start_for_fc3_U0* start_for_fc3_U0_U;
    sc_signal< sc_logic > conv1_U0_ap_start;
    sc_signal< sc_logic > conv1_U0_ap_done;
    sc_signal< sc_logic > conv1_U0_ap_continue;
    sc_signal< sc_logic > conv1_U0_ap_idle;
    sc_signal< sc_logic > conv1_U0_ap_ready;
    sc_signal< sc_logic > conv1_U0_start_out;
    sc_signal< sc_logic > conv1_U0_start_write;
    sc_signal< sc_lv<32> > conv1_U0_conv1_out_V_din;
    sc_signal< sc_logic > conv1_U0_conv1_out_V_write;
    sc_signal< sc_logic > conv1_U0_in_V_read;
    sc_signal< sc_logic > pool1_U0_ap_start;
    sc_signal< sc_logic > pool1_U0_ap_done;
    sc_signal< sc_logic > pool1_U0_ap_continue;
    sc_signal< sc_logic > pool1_U0_ap_idle;
    sc_signal< sc_logic > pool1_U0_ap_ready;
    sc_signal< sc_logic > pool1_U0_start_out;
    sc_signal< sc_logic > pool1_U0_start_write;
    sc_signal< sc_lv<32> > pool1_U0_out_V_din;
    sc_signal< sc_logic > pool1_U0_out_V_write;
    sc_signal< sc_logic > pool1_U0_in_V_read;
    sc_signal< sc_logic > conv2_U0_ap_start;
    sc_signal< sc_logic > conv2_U0_ap_done;
    sc_signal< sc_logic > conv2_U0_ap_continue;
    sc_signal< sc_logic > conv2_U0_ap_idle;
    sc_signal< sc_logic > conv2_U0_ap_ready;
    sc_signal< sc_logic > conv2_U0_start_out;
    sc_signal< sc_logic > conv2_U0_start_write;
    sc_signal< sc_lv<32> > conv2_U0_conv2_out_V_din;
    sc_signal< sc_logic > conv2_U0_conv2_out_V_write;
    sc_signal< sc_logic > conv2_U0_in_V_read;
    sc_signal< sc_logic > pool2_U0_ap_start;
    sc_signal< sc_logic > pool2_U0_ap_done;
    sc_signal< sc_logic > pool2_U0_ap_continue;
    sc_signal< sc_logic > pool2_U0_ap_idle;
    sc_signal< sc_logic > pool2_U0_ap_ready;
    sc_signal< sc_logic > pool2_U0_start_out;
    sc_signal< sc_logic > pool2_U0_start_write;
    sc_signal< sc_lv<32> > pool2_U0_out_V_din;
    sc_signal< sc_logic > pool2_U0_out_V_write;
    sc_signal< sc_logic > pool2_U0_in_V_read;
    sc_signal< sc_logic > fc1_U0_ap_start;
    sc_signal< sc_logic > fc1_U0_ap_done;
    sc_signal< sc_logic > fc1_U0_ap_continue;
    sc_signal< sc_logic > fc1_U0_ap_idle;
    sc_signal< sc_logic > fc1_U0_ap_ready;
    sc_signal< sc_logic > fc1_U0_start_out;
    sc_signal< sc_logic > fc1_U0_start_write;
    sc_signal< sc_lv<32> > fc1_U0_out_V_din;
    sc_signal< sc_logic > fc1_U0_out_V_write;
    sc_signal< sc_logic > fc1_U0_in_V_read;
    sc_signal< sc_logic > fc2_U0_ap_start;
    sc_signal< sc_logic > fc2_U0_ap_done;
    sc_signal< sc_logic > fc2_U0_ap_continue;
    sc_signal< sc_logic > fc2_U0_ap_idle;
    sc_signal< sc_logic > fc2_U0_ap_ready;
    sc_signal< sc_logic > fc2_U0_start_out;
    sc_signal< sc_logic > fc2_U0_start_write;
    sc_signal< sc_lv<32> > fc2_U0_out_V_din;
    sc_signal< sc_logic > fc2_U0_out_V_write;
    sc_signal< sc_logic > fc2_U0_in_V_read;
    sc_signal< sc_logic > fc3_U0_ap_start;
    sc_signal< sc_logic > fc3_U0_ap_done;
    sc_signal< sc_logic > fc3_U0_ap_continue;
    sc_signal< sc_logic > fc3_U0_ap_idle;
    sc_signal< sc_logic > fc3_U0_ap_ready;
    sc_signal< sc_lv<32> > fc3_U0_out_V_din;
    sc_signal< sc_logic > fc3_U0_out_V_write;
    sc_signal< sc_logic > fc3_U0_in_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > conv1_out_V_full_n;
    sc_signal< sc_lv<32> > conv1_out_V_dout;
    sc_signal< sc_logic > conv1_out_V_empty_n;
    sc_signal< sc_logic > pool1_out_V_full_n;
    sc_signal< sc_lv<32> > pool1_out_V_dout;
    sc_signal< sc_logic > pool1_out_V_empty_n;
    sc_signal< sc_logic > conv2_out_V_full_n;
    sc_signal< sc_lv<32> > conv2_out_V_dout;
    sc_signal< sc_logic > conv2_out_V_empty_n;
    sc_signal< sc_logic > pool2_out_V_full_n;
    sc_signal< sc_lv<32> > pool2_out_V_dout;
    sc_signal< sc_logic > pool2_out_V_empty_n;
    sc_signal< sc_logic > fc1_out_V_full_n;
    sc_signal< sc_lv<32> > fc1_out_V_dout;
    sc_signal< sc_logic > fc1_out_V_empty_n;
    sc_signal< sc_logic > fc2_out_V_full_n;
    sc_signal< sc_lv<32> > fc2_out_V_dout;
    sc_signal< sc_logic > fc2_out_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_pool1_U0_din;
    sc_signal< sc_logic > start_for_pool1_U0_full_n;
    sc_signal< sc_lv<1> > start_for_pool1_U0_dout;
    sc_signal< sc_logic > start_for_pool1_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_conv2_U0_din;
    sc_signal< sc_logic > start_for_conv2_U0_full_n;
    sc_signal< sc_lv<1> > start_for_conv2_U0_dout;
    sc_signal< sc_logic > start_for_conv2_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_pool2_U0_din;
    sc_signal< sc_logic > start_for_pool2_U0_full_n;
    sc_signal< sc_lv<1> > start_for_pool2_U0_dout;
    sc_signal< sc_logic > start_for_pool2_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_fc1_U0_din;
    sc_signal< sc_logic > start_for_fc1_U0_full_n;
    sc_signal< sc_lv<1> > start_for_fc1_U0_dout;
    sc_signal< sc_logic > start_for_fc1_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_fc2_U0_din;
    sc_signal< sc_logic > start_for_fc2_U0_full_n;
    sc_signal< sc_lv<1> > start_for_fc2_U0_dout;
    sc_signal< sc_logic > start_for_fc2_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_fc3_U0_din;
    sc_signal< sc_logic > start_for_fc3_U0_full_n;
    sc_signal< sc_lv<1> > start_for_fc3_U0_dout;
    sc_signal< sc_logic > start_for_fc3_U0_empty_n;
    sc_signal< sc_logic > fc3_U0_start_full_n;
    sc_signal< sc_logic > fc3_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_conv1_U0_ap_continue();
    void thread_conv1_U0_ap_start();
    void thread_conv2_U0_ap_continue();
    void thread_conv2_U0_ap_start();
    void thread_fc1_U0_ap_continue();
    void thread_fc1_U0_ap_start();
    void thread_fc2_U0_ap_continue();
    void thread_fc2_U0_ap_start();
    void thread_fc3_U0_ap_continue();
    void thread_fc3_U0_ap_start();
    void thread_fc3_U0_start_full_n();
    void thread_fc3_U0_start_write();
    void thread_fc3_out_V_din();
    void thread_fc3_out_V_write();
    void thread_image_in_V_read();
    void thread_pool1_U0_ap_continue();
    void thread_pool1_U0_ap_start();
    void thread_pool2_U0_ap_continue();
    void thread_pool2_U0_ap_start();
    void thread_start_for_conv2_U0_din();
    void thread_start_for_fc1_U0_din();
    void thread_start_for_fc2_U0_din();
    void thread_start_for_fc3_U0_din();
    void thread_start_for_pool1_U0_din();
    void thread_start_for_pool2_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
