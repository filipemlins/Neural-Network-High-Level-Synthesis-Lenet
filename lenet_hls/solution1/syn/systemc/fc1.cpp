// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> fc1::ap_ST_fsm_state1 = "1";
const sc_lv<28> fc1::ap_ST_fsm_state2 = "10";
const sc_lv<28> fc1::ap_ST_fsm_state3 = "100";
const sc_lv<28> fc1::ap_ST_fsm_state4 = "1000";
const sc_lv<28> fc1::ap_ST_fsm_state5 = "10000";
const sc_lv<28> fc1::ap_ST_fsm_state6 = "100000";
const sc_lv<28> fc1::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> fc1::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> fc1::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> fc1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> fc1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<28> fc1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<28> fc1::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<28> fc1::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> fc1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fc1::ap_const_lv32_1B = "11011";
const sc_lv<32> fc1::ap_const_lv32_4 = "100";
const sc_lv<1> fc1::ap_const_lv1_0 = "0";
const sc_lv<32> fc1::ap_const_lv32_C = "1100";
const sc_lv<32> fc1::ap_const_lv32_14 = "10100";
const sc_lv<32> fc1::ap_const_lv32_11 = "10001";
const sc_lv<32> fc1::ap_const_lv32_19 = "11001";
const sc_lv<32> fc1::ap_const_lv32_1 = "1";
const sc_lv<32> fc1::ap_const_lv32_2 = "10";
const sc_lv<32> fc1::ap_const_lv32_3 = "11";
const sc_lv<32> fc1::ap_const_lv32_5 = "101";
const sc_lv<32> fc1::ap_const_lv32_6 = "110";
const sc_lv<32> fc1::ap_const_lv32_7 = "111";
const sc_lv<32> fc1::ap_const_lv32_8 = "1000";
const sc_lv<32> fc1::ap_const_lv32_B = "1011";
const sc_lv<32> fc1::ap_const_lv32_13 = "10011";
const sc_lv<32> fc1::ap_const_lv32_1A = "11010";
const sc_lv<7> fc1::ap_const_lv7_0 = "0000000";
const sc_lv<17> fc1::ap_const_lv17_0 = "00000000000000000";
const sc_lv<1> fc1::ap_const_lv1_1 = "1";
const sc_lv<5> fc1::ap_const_lv5_0 = "00000";
const sc_lv<6> fc1::ap_const_lv6_0 = "000000";
const sc_lv<10> fc1::ap_const_lv10_0 = "0000000000";
const sc_lv<32> fc1::ap_const_lv32_12 = "10010";
const sc_lv<32> fc1::ap_const_lv32_D = "1101";
const sc_lv<32> fc1::ap_const_lv32_15 = "10101";
const sc_lv<32> fc1::ap_const_lv32_9 = "1001";
const sc_lv<7> fc1::ap_const_lv7_1 = "1";
const sc_lv<7> fc1::ap_const_lv7_77 = "1110111";
const sc_lv<17> fc1::ap_const_lv17_1 = "1";
const sc_lv<17> fc1::ap_const_lv17_10DFF = "10000110111111111";
const sc_lv<5> fc1::ap_const_lv5_10 = "10000";
const sc_lv<5> fc1::ap_const_lv5_1 = "1";
const sc_lv<6> fc1::ap_const_lv6_24 = "100100";
const sc_lv<6> fc1::ap_const_lv6_1 = "1";
const sc_lv<4> fc1::ap_const_lv4_0 = "0000";
const sc_lv<10> fc1::ap_const_lv10_240 = "1001000000";
const sc_lv<10> fc1::ap_const_lv10_1 = "1";
const sc_lv<3> fc1::ap_const_lv3_0 = "000";
const sc_lv<7> fc1::ap_const_lv7_78 = "1111000";
const sc_lv<32> fc1::ap_const_lv32_17 = "10111";
const sc_lv<32> fc1::ap_const_lv32_1E = "11110";
const sc_lv<8> fc1::ap_const_lv8_FF = "11111111";
const sc_lv<23> fc1::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> fc1::ap_const_lv5_2 = "10";
const bool fc1::ap_const_boolean_1 = true;

fc1::fc1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc1_layer_weights_U = new fc1_fc1_layer_weights("fc1_layer_weights_U");
    fc1_layer_weights_U->clk(ap_clk);
    fc1_layer_weights_U->reset(ap_rst);
    fc1_layer_weights_U->address0(fc1_layer_weights_address0);
    fc1_layer_weights_U->ce0(fc1_layer_weights_ce0);
    fc1_layer_weights_U->q0(fc1_layer_weights_q0);
    fc1_layer_bias_U = new fc1_fc1_layer_bias("fc1_layer_bias_U");
    fc1_layer_bias_U->clk(ap_clk);
    fc1_layer_bias_U->reset(ap_rst);
    fc1_layer_bias_U->address0(fc1_layer_bias_address0);
    fc1_layer_bias_U->ce0(fc1_layer_bias_ce0);
    fc1_layer_bias_U->q0(fc1_layer_bias_q0);
    output_U = new fc1_output("output_U");
    output_U->clk(ap_clk);
    output_U->reset(ap_rst);
    output_U->address0(output_address0);
    output_U->ce0(output_ce0);
    output_U->we0(output_we0);
    output_U->d0(output_d0);
    output_U->q0(output_q0);
    fc1_buff_U = new fc1_fc1_buff("fc1_buff_U");
    fc1_buff_U->clk(ap_clk);
    fc1_buff_U->reset(ap_rst);
    fc1_buff_U->address0(fc1_buff_address0);
    fc1_buff_U->ce0(fc1_buff_ce0);
    fc1_buff_U->we0(fc1_buff_we0);
    fc1_buff_U->d0(fc1_buff_d0);
    fc1_buff_U->q0(fc1_buff_q0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29 = new lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29");
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->clk(ap_clk);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->reset(ap_rst);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->din0(reg_320);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->din1(grp_fu_307_p1);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->ce(ap_var_for_const0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29->dout(grp_fu_307_p2);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30 = new lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30");
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->clk(ap_clk);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->reset(ap_rst);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->din0(fc1_layer_weights_lo_reg_630);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->din1(fc1_buff_load_reg_612);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->ce(ap_var_for_const0);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30->dout(grp_fu_311_p2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U31 = new lenet_hls_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>("lenet_hls_fcmp_32ns_32ns_1_1_1_U31");
    lenet_hls_fcmp_32ns_32ns_1_1_1_U31->din0(reg_325);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U31->din1(ap_var_for_const1);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U31->opcode(ap_var_for_const2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U31->dout(tmp_59_fu_315_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_to_int_fu_507_p1);
    sensitive << ( reg_325 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( in_V_empty_n );
    sensitive << ( exitcond9_fu_381_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond_fu_489_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond3_fu_369_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_250 );

    SC_METHOD(thread_exitcond7_fu_458_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i2_reg_284 );

    SC_METHOD(thread_exitcond8_fu_411_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j1_reg_272 );

    SC_METHOD(thread_exitcond9_fu_381_p2);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );
    sensitive << ( j_reg_261 );

    SC_METHOD(thread_exitcond_fu_489_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( i3_reg_296 );

    SC_METHOD(thread_fc1_buff_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_46_fu_354_p1 );
    sensitive << ( tmp_51_fu_406_p1 );
    sensitive << ( tmp_48_fu_423_p1 );

    SC_METHOD(thread_fc1_buff_ce0);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_fc1_buff_d0);
    sensitive << ( in_V_dout );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_fc1_buff_we0);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_fc1_layer_bias_address0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_52_fu_501_p1 );

    SC_METHOD(thread_fc1_layer_bias_ce0);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_fc1_layer_weights_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_65_cast_fu_479_p1 );

    SC_METHOD(thread_fc1_layer_weights_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_307_p1);
    sensitive << ( tmp_55_reg_640 );
    sensitive << ( fc1_layer_bias_load_reg_663 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_i_10_fu_464_p2);
    sensitive << ( i2_reg_284 );

    SC_METHOD(thread_i_8_fu_375_p2);
    sensitive << ( i_reg_250 );

    SC_METHOD(thread_i_9_fu_495_p2);
    sensitive << ( i3_reg_296 );

    SC_METHOD(thread_i_cast5_fu_365_p1);
    sensitive << ( i_reg_250 );

    SC_METHOD(thread_in_V_blk_n);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );

    SC_METHOD(thread_in_V_read);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );

    SC_METHOD(thread_indvarinc1_fu_348_p2);
    sensitive << ( invdar1_reg_239 );

    SC_METHOD(thread_indvarinc_fu_331_p2);
    sensitive << ( invdar_reg_228 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond_fu_489_p2 );

    SC_METHOD(thread_j_5_fu_387_p2);
    sensitive << ( j_reg_261 );

    SC_METHOD(thread_j_6_fu_417_p2);
    sensitive << ( j1_reg_272 );

    SC_METHOD(thread_notlhs_fu_525_p2);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( tmp_53_fu_511_p4 );

    SC_METHOD(thread_notrhs_fu_531_p2);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( tmp_66_fu_521_p1 );

    SC_METHOD(thread_out_V_blk_n);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_out_V_din);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( tmp_64_reg_668 );

    SC_METHOD(thread_out_V_write);
    sensitive << ( out_V_full_n );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_output_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_addr_7_reg_635 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_337_p1 );
    sensitive << ( tmp_54_fu_484_p1 );
    sensitive << ( tmp_52_fu_501_p1 );

    SC_METHOD(thread_output_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_output_d0);
    sensitive << ( reg_325 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_output_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_p_shl1_cast_fu_448_p1);
    sensitive << ( tmp_61_fu_440_p3 );

    SC_METHOD(thread_p_shl_cast_fu_436_p1);
    sensitive << ( tmp_57_fu_428_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_46_fu_354_p1);
    sensitive << ( invdar1_reg_239 );

    SC_METHOD(thread_tmp_47_fu_359_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( invdar1_reg_239 );

    SC_METHOD(thread_tmp_48_fu_423_p1);
    sensitive << ( j1_reg_272 );

    SC_METHOD(thread_tmp_49_fu_393_p3);
    sensitive << ( j_reg_261 );

    SC_METHOD(thread_tmp_50_fu_401_p2);
    sensitive << ( i_cast5_reg_573 );
    sensitive << ( tmp_49_fu_393_p3 );

    SC_METHOD(thread_tmp_51_fu_406_p1);
    sensitive << ( tmp_50_fu_401_p2 );

    SC_METHOD(thread_tmp_52_fu_501_p1);
    sensitive << ( i3_reg_296 );

    SC_METHOD(thread_tmp_53_fu_511_p4);
    sensitive << ( a_assign_to_int_fu_507_p1 );

    SC_METHOD(thread_tmp_54_cast_fu_470_p1);
    sensitive << ( i2_reg_284 );

    SC_METHOD(thread_tmp_54_fu_484_p1);
    sensitive << ( i2_reg_284 );

    SC_METHOD(thread_tmp_57_fu_428_p3);
    sensitive << ( j1_reg_272 );

    SC_METHOD(thread_tmp_58_fu_537_p2);
    sensitive << ( notrhs_fu_531_p2 );
    sensitive << ( notlhs_fu_525_p2 );

    SC_METHOD(thread_tmp_60_fu_543_p2);
    sensitive << ( tmp_58_fu_537_p2 );
    sensitive << ( tmp_59_fu_315_p2 );

    SC_METHOD(thread_tmp_61_fu_440_p3);
    sensitive << ( j1_reg_272 );

    SC_METHOD(thread_tmp_62_fu_452_p2);
    sensitive << ( p_shl_cast_fu_436_p1 );
    sensitive << ( p_shl1_cast_fu_448_p1 );

    SC_METHOD(thread_tmp_64_fu_549_p3);
    sensitive << ( reg_325 );
    sensitive << ( tmp_60_fu_543_p2 );

    SC_METHOD(thread_tmp_65_cast_fu_479_p1);
    sensitive << ( tmp_65_fu_474_p2 );

    SC_METHOD(thread_tmp_65_fu_474_p2);
    sensitive << ( tmp_62_reg_607 );
    sensitive << ( tmp_54_cast_fu_470_p1 );

    SC_METHOD(thread_tmp_66_fu_521_p1);
    sensitive << ( a_assign_to_int_fu_507_p1 );

    SC_METHOD(thread_tmp_fu_337_p1);
    sensitive << ( invdar_reg_228 );

    SC_METHOD(thread_tmp_s_fu_342_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_228 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_full_n );
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_381_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond8_fu_411_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond7_fu_458_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond_fu_489_p2 );
    sensitive << ( tmp_s_fu_342_p2 );
    sensitive << ( tmp_47_fu_359_p2 );
    sensitive << ( exitcond3_fu_369_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, out_V_din, "(port)out_V_din");
    sc_trace(mVcdFile, out_V_full_n, "(port)out_V_full_n");
    sc_trace(mVcdFile, out_V_write, "(port)out_V_write");
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, fc1_layer_weights_address0, "fc1_layer_weights_address0");
    sc_trace(mVcdFile, fc1_layer_weights_ce0, "fc1_layer_weights_ce0");
    sc_trace(mVcdFile, fc1_layer_weights_q0, "fc1_layer_weights_q0");
    sc_trace(mVcdFile, fc1_layer_bias_address0, "fc1_layer_bias_address0");
    sc_trace(mVcdFile, fc1_layer_bias_ce0, "fc1_layer_bias_ce0");
    sc_trace(mVcdFile, fc1_layer_bias_q0, "fc1_layer_bias_q0");
    sc_trace(mVcdFile, out_V_blk_n, "out_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, in_V_blk_n, "in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond9_fu_381_p2, "exitcond9_fu_381_p2");
    sc_trace(mVcdFile, output_q0, "output_q0");
    sc_trace(mVcdFile, reg_320, "reg_320");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_307_p2, "grp_fu_307_p2");
    sc_trace(mVcdFile, reg_325, "reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, indvarinc_fu_331_p2, "indvarinc_fu_331_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, indvarinc1_fu_348_p2, "indvarinc1_fu_348_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_cast5_fu_365_p1, "i_cast5_fu_365_p1");
    sc_trace(mVcdFile, i_cast5_reg_573, "i_cast5_reg_573");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_8_fu_375_p2, "i_8_fu_375_p2");
    sc_trace(mVcdFile, i_8_reg_581, "i_8_reg_581");
    sc_trace(mVcdFile, j_5_fu_387_p2, "j_5_fu_387_p2");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, j_6_fu_417_p2, "j_6_fu_417_p2");
    sc_trace(mVcdFile, j_6_reg_597, "j_6_reg_597");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond8_fu_411_p2, "exitcond8_fu_411_p2");
    sc_trace(mVcdFile, tmp_62_fu_452_p2, "tmp_62_fu_452_p2");
    sc_trace(mVcdFile, tmp_62_reg_607, "tmp_62_reg_607");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, fc1_buff_q0, "fc1_buff_q0");
    sc_trace(mVcdFile, fc1_buff_load_reg_612, "fc1_buff_load_reg_612");
    sc_trace(mVcdFile, i_10_fu_464_p2, "i_10_fu_464_p2");
    sc_trace(mVcdFile, i_10_reg_620, "i_10_reg_620");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond7_fu_458_p2, "exitcond7_fu_458_p2");
    sc_trace(mVcdFile, fc1_layer_weights_lo_reg_630, "fc1_layer_weights_lo_reg_630");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, output_addr_7_reg_635, "output_addr_7_reg_635");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_311_p2, "grp_fu_311_p2");
    sc_trace(mVcdFile, tmp_55_reg_640, "tmp_55_reg_640");
    sc_trace(mVcdFile, i_9_fu_495_p2, "i_9_fu_495_p2");
    sc_trace(mVcdFile, i_9_reg_648, "i_9_reg_648");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, exitcond_fu_489_p2, "exitcond_fu_489_p2");
    sc_trace(mVcdFile, fc1_layer_bias_load_reg_663, "fc1_layer_bias_load_reg_663");
    sc_trace(mVcdFile, tmp_64_fu_549_p3, "tmp_64_fu_549_p3");
    sc_trace(mVcdFile, tmp_64_reg_668, "tmp_64_reg_668");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, output_address0, "output_address0");
    sc_trace(mVcdFile, output_ce0, "output_ce0");
    sc_trace(mVcdFile, output_we0, "output_we0");
    sc_trace(mVcdFile, output_d0, "output_d0");
    sc_trace(mVcdFile, fc1_buff_address0, "fc1_buff_address0");
    sc_trace(mVcdFile, fc1_buff_ce0, "fc1_buff_ce0");
    sc_trace(mVcdFile, fc1_buff_we0, "fc1_buff_we0");
    sc_trace(mVcdFile, fc1_buff_d0, "fc1_buff_d0");
    sc_trace(mVcdFile, invdar_reg_228, "invdar_reg_228");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_s_fu_342_p2, "tmp_s_fu_342_p2");
    sc_trace(mVcdFile, invdar1_reg_239, "invdar1_reg_239");
    sc_trace(mVcdFile, tmp_47_fu_359_p2, "tmp_47_fu_359_p2");
    sc_trace(mVcdFile, i_reg_250, "i_reg_250");
    sc_trace(mVcdFile, j_reg_261, "j_reg_261");
    sc_trace(mVcdFile, exitcond3_fu_369_p2, "exitcond3_fu_369_p2");
    sc_trace(mVcdFile, j1_reg_272, "j1_reg_272");
    sc_trace(mVcdFile, i2_reg_284, "i2_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, i3_reg_296, "i3_reg_296");
    sc_trace(mVcdFile, tmp_fu_337_p1, "tmp_fu_337_p1");
    sc_trace(mVcdFile, tmp_46_fu_354_p1, "tmp_46_fu_354_p1");
    sc_trace(mVcdFile, tmp_51_fu_406_p1, "tmp_51_fu_406_p1");
    sc_trace(mVcdFile, tmp_48_fu_423_p1, "tmp_48_fu_423_p1");
    sc_trace(mVcdFile, tmp_65_cast_fu_479_p1, "tmp_65_cast_fu_479_p1");
    sc_trace(mVcdFile, tmp_54_fu_484_p1, "tmp_54_fu_484_p1");
    sc_trace(mVcdFile, tmp_52_fu_501_p1, "tmp_52_fu_501_p1");
    sc_trace(mVcdFile, grp_fu_307_p1, "grp_fu_307_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_49_fu_393_p3, "tmp_49_fu_393_p3");
    sc_trace(mVcdFile, tmp_50_fu_401_p2, "tmp_50_fu_401_p2");
    sc_trace(mVcdFile, tmp_57_fu_428_p3, "tmp_57_fu_428_p3");
    sc_trace(mVcdFile, tmp_61_fu_440_p3, "tmp_61_fu_440_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_436_p1, "p_shl_cast_fu_436_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_448_p1, "p_shl1_cast_fu_448_p1");
    sc_trace(mVcdFile, tmp_54_cast_fu_470_p1, "tmp_54_cast_fu_470_p1");
    sc_trace(mVcdFile, tmp_65_fu_474_p2, "tmp_65_fu_474_p2");
    sc_trace(mVcdFile, a_assign_to_int_fu_507_p1, "a_assign_to_int_fu_507_p1");
    sc_trace(mVcdFile, tmp_53_fu_511_p4, "tmp_53_fu_511_p4");
    sc_trace(mVcdFile, tmp_66_fu_521_p1, "tmp_66_fu_521_p1");
    sc_trace(mVcdFile, notrhs_fu_531_p2, "notrhs_fu_531_p2");
    sc_trace(mVcdFile, notlhs_fu_525_p2, "notlhs_fu_525_p2");
    sc_trace(mVcdFile, tmp_58_fu_537_p2, "tmp_58_fu_537_p2");
    sc_trace(mVcdFile, tmp_59_fu_315_p2, "tmp_59_fu_315_p2");
    sc_trace(mVcdFile, tmp_60_fu_543_p2, "tmp_60_fu_543_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fc1::~fc1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc1_layer_weights_U;
    delete fc1_layer_bias_U;
    delete output_U;
    delete fc1_buff_U;
    delete lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29;
    delete lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30;
    delete lenet_hls_fcmp_32ns_32ns_1_1_1_U31;
}

void fc1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc1::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void fc1::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void fc1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                    esl_seteq<1,1,1>(exitcond_fu_489_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i2_reg_284 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i2_reg_284 = i_10_reg_620.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_411_p2.read(), ap_const_lv1_1))) {
        i3_reg_296 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        i3_reg_296 = i_9_reg_648.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_47_fu_359_p2.read(), ap_const_lv1_1))) {
        i_reg_250 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && 
                esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_1))) {
        i_reg_250 = i_8_reg_581.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_342_p2.read(), ap_const_lv1_1))) {
        invdar1_reg_239 = ap_const_lv17_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_47_fu_359_p2.read()))) {
        invdar1_reg_239 = indvarinc1_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_342_p2.read()))) {
        invdar_reg_228 = indvarinc_fu_331_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        invdar_reg_228 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_369_p2.read()))) {
        j1_reg_272 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(exitcond7_fu_458_p2.read(), ap_const_lv1_1))) {
        j1_reg_272 = j_6_reg_597.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_369_p2.read()))) {
        j_reg_261 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        j_reg_261 = j_5_fu_387_p2.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        fc1_buff_load_reg_612 = fc1_buff_q0.read();
        tmp_62_reg_607 = tmp_62_fu_452_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        fc1_layer_bias_load_reg_663 = fc1_layer_bias_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        fc1_layer_weights_lo_reg_630 = fc1_layer_weights_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_10_reg_620 = i_10_fu_464_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_8_reg_581 = i_8_fu_375_p2.read();
        i_cast5_reg_573 = i_cast5_fu_365_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i_9_reg_648 = i_9_fu_495_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_6_reg_597 = j_6_fu_417_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        output_addr_7_reg_635 =  (sc_lv<7>) (tmp_54_fu_484_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        reg_320 = output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_325 = grp_fu_307_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_55_reg_640 = grp_fu_311_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_64_reg_668 = tmp_64_fu_549_p3.read();
    }
}

void fc1::thread_a_assign_to_int_fu_507_p1() {
    a_assign_to_int_fu_507_p1 = reg_325.read();
}

void fc1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fc1::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void fc1::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fc1::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fc1::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc1::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fc1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc1::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void fc1::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fc1::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fc1::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fc1::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void fc1::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void fc1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fc1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fc1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fc1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fc1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fc1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void fc1::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()));
}

void fc1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_489_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void fc1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc1::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void fc1::thread_exitcond3_fu_369_p2() {
    exitcond3_fu_369_p2 = (!i_reg_250.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_250.read() == ap_const_lv5_10);
}

void fc1::thread_exitcond7_fu_458_p2() {
    exitcond7_fu_458_p2 = (!i2_reg_284.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(i2_reg_284.read() == ap_const_lv7_78);
}

void fc1::thread_exitcond8_fu_411_p2() {
    exitcond8_fu_411_p2 = (!j1_reg_272.read().is_01() || !ap_const_lv10_240.is_01())? sc_lv<1>(): sc_lv<1>(j1_reg_272.read() == ap_const_lv10_240);
}

void fc1::thread_exitcond9_fu_381_p2() {
    exitcond9_fu_381_p2 = (!j_reg_261.read().is_01() || !ap_const_lv6_24.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_261.read() == ap_const_lv6_24);
}

void fc1::thread_exitcond_fu_489_p2() {
    exitcond_fu_489_p2 = (!i3_reg_296.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(i3_reg_296.read() == ap_const_lv7_78);
}

void fc1::thread_fc1_buff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fc1_buff_address0 =  (sc_lv<17>) (tmp_48_fu_423_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fc1_buff_address0 =  (sc_lv<17>) (tmp_51_fu_406_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc1_buff_address0 =  (sc_lv<17>) (tmp_46_fu_354_p1.read());
    } else {
        fc1_buff_address0 = "XXXXXXXXXXXXXXXXX";
    }
}

void fc1::thread_fc1_buff_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        fc1_buff_ce0 = ap_const_logic_1;
    } else {
        fc1_buff_ce0 = ap_const_logic_0;
    }
}

void fc1::thread_fc1_buff_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fc1_buff_d0 = in_V_dout.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc1_buff_d0 = ap_const_lv32_0;
    } else {
        fc1_buff_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc1::thread_fc1_buff_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()))))) {
        fc1_buff_we0 = ap_const_logic_1;
    } else {
        fc1_buff_we0 = ap_const_logic_0;
    }
}

void fc1::thread_fc1_layer_bias_address0() {
    fc1_layer_bias_address0 =  (sc_lv<7>) (tmp_52_fu_501_p1.read());
}

void fc1::thread_fc1_layer_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        fc1_layer_bias_ce0 = ap_const_logic_1;
    } else {
        fc1_layer_bias_ce0 = ap_const_logic_0;
    }
}

void fc1::thread_fc1_layer_weights_address0() {
    fc1_layer_weights_address0 =  (sc_lv<17>) (tmp_65_cast_fu_479_p1.read());
}

void fc1::thread_fc1_layer_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        fc1_layer_weights_ce0 = ap_const_logic_1;
    } else {
        fc1_layer_weights_ce0 = ap_const_logic_0;
    }
}

void fc1::thread_grp_fu_307_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_307_p1 = fc1_layer_bias_load_reg_663.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_307_p1 = tmp_55_reg_640.read();
    } else {
        grp_fu_307_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc1::thread_i_10_fu_464_p2() {
    i_10_fu_464_p2 = (!i2_reg_284.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i2_reg_284.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc1::thread_i_8_fu_375_p2() {
    i_8_fu_375_p2 = (!i_reg_250.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_250.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void fc1::thread_i_9_fu_495_p2() {
    i_9_fu_495_p2 = (!i3_reg_296.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i3_reg_296.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc1::thread_i_cast5_fu_365_p1() {
    i_cast5_fu_365_p1 = esl_zext<10,5>(i_reg_250.read());
}

void fc1::thread_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0))) {
        in_V_blk_n = in_V_empty_n.read();
    } else {
        in_V_blk_n = ap_const_logic_1;
    }
}

void fc1::thread_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        in_V_read = ap_const_logic_1;
    } else {
        in_V_read = ap_const_logic_0;
    }
}

void fc1::thread_indvarinc1_fu_348_p2() {
    indvarinc1_fu_348_p2 = (!invdar1_reg_239.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(invdar1_reg_239.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void fc1::thread_indvarinc_fu_331_p2() {
    indvarinc_fu_331_p2 = (!invdar_reg_228.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(invdar_reg_228.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc1::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_489_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void fc1::thread_j_5_fu_387_p2() {
    j_5_fu_387_p2 = (!j_reg_261.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_261.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void fc1::thread_j_6_fu_417_p2() {
    j_6_fu_417_p2 = (!j1_reg_272.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j1_reg_272.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void fc1::thread_notlhs_fu_525_p2() {
    notlhs_fu_525_p2 = (!tmp_53_fu_511_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_53_fu_511_p4.read() != ap_const_lv8_FF);
}

void fc1::thread_notrhs_fu_531_p2() {
    notrhs_fu_531_p2 = (!tmp_66_fu_521_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_66_fu_521_p1.read() == ap_const_lv23_0);
}

void fc1::thread_out_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        out_V_blk_n = out_V_full_n.read();
    } else {
        out_V_blk_n = ap_const_logic_1;
    }
}

void fc1::thread_out_V_din() {
    out_V_din = tmp_64_reg_668.read();
}

void fc1::thread_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
         esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
        out_V_write = ap_const_logic_1;
    } else {
        out_V_write = ap_const_logic_0;
    }
}

void fc1::thread_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        output_address0 =  (sc_lv<7>) (tmp_52_fu_501_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        output_address0 = output_addr_7_reg_635.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        output_address0 =  (sc_lv<7>) (tmp_54_fu_484_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_address0 =  (sc_lv<7>) (tmp_fu_337_p1.read());
    } else {
        output_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void fc1::thread_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        output_ce0 = ap_const_logic_1;
    } else {
        output_ce0 = ap_const_logic_0;
    }
}

void fc1::thread_output_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        output_d0 = reg_325.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_d0 = ap_const_lv32_0;
    } else {
        output_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc1::thread_output_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        output_we0 = ap_const_logic_1;
    } else {
        output_we0 = ap_const_logic_0;
    }
}

void fc1::thread_p_shl1_cast_fu_448_p1() {
    p_shl1_cast_fu_448_p1 = esl_zext<18,13>(tmp_61_fu_440_p3.read());
}

void fc1::thread_p_shl_cast_fu_436_p1() {
    p_shl_cast_fu_436_p1 = esl_zext<18,17>(tmp_57_fu_428_p3.read());
}

void fc1::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void fc1::thread_start_out() {
    start_out = real_start.read();
}

void fc1::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void fc1::thread_tmp_46_fu_354_p1() {
    tmp_46_fu_354_p1 = esl_zext<64,17>(invdar1_reg_239.read());
}

void fc1::thread_tmp_47_fu_359_p2() {
    tmp_47_fu_359_p2 = (!invdar1_reg_239.read().is_01() || !ap_const_lv17_10DFF.is_01())? sc_lv<1>(): sc_lv<1>(invdar1_reg_239.read() == ap_const_lv17_10DFF);
}

void fc1::thread_tmp_48_fu_423_p1() {
    tmp_48_fu_423_p1 = esl_zext<64,10>(j1_reg_272.read());
}

void fc1::thread_tmp_49_fu_393_p3() {
    tmp_49_fu_393_p3 = esl_concat<6,4>(j_reg_261.read(), ap_const_lv4_0);
}

void fc1::thread_tmp_50_fu_401_p2() {
    tmp_50_fu_401_p2 = (!i_cast5_reg_573.read().is_01() || !tmp_49_fu_393_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(i_cast5_reg_573.read()) + sc_biguint<10>(tmp_49_fu_393_p3.read()));
}

void fc1::thread_tmp_51_fu_406_p1() {
    tmp_51_fu_406_p1 = esl_zext<64,10>(tmp_50_fu_401_p2.read());
}

void fc1::thread_tmp_52_fu_501_p1() {
    tmp_52_fu_501_p1 = esl_zext<64,7>(i3_reg_296.read());
}

void fc1::thread_tmp_53_fu_511_p4() {
    tmp_53_fu_511_p4 = a_assign_to_int_fu_507_p1.read().range(30, 23);
}

void fc1::thread_tmp_54_cast_fu_470_p1() {
    tmp_54_cast_fu_470_p1 = esl_zext<18,7>(i2_reg_284.read());
}

void fc1::thread_tmp_54_fu_484_p1() {
    tmp_54_fu_484_p1 = esl_zext<64,7>(i2_reg_284.read());
}

void fc1::thread_tmp_57_fu_428_p3() {
    tmp_57_fu_428_p3 = esl_concat<10,7>(j1_reg_272.read(), ap_const_lv7_0);
}

void fc1::thread_tmp_58_fu_537_p2() {
    tmp_58_fu_537_p2 = (notrhs_fu_531_p2.read() | notlhs_fu_525_p2.read());
}

void fc1::thread_tmp_60_fu_543_p2() {
    tmp_60_fu_543_p2 = (tmp_58_fu_537_p2.read() & tmp_59_fu_315_p2.read());
}

void fc1::thread_tmp_61_fu_440_p3() {
    tmp_61_fu_440_p3 = esl_concat<10,3>(j1_reg_272.read(), ap_const_lv3_0);
}

void fc1::thread_tmp_62_fu_452_p2() {
    tmp_62_fu_452_p2 = (!p_shl_cast_fu_436_p1.read().is_01() || !p_shl1_cast_fu_448_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_shl_cast_fu_436_p1.read()) - sc_biguint<18>(p_shl1_cast_fu_448_p1.read()));
}

void fc1::thread_tmp_64_fu_549_p3() {
    tmp_64_fu_549_p3 = (!tmp_60_fu_543_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_60_fu_543_p2.read()[0].to_bool())? reg_325.read(): ap_const_lv32_0);
}

void fc1::thread_tmp_65_cast_fu_479_p1() {
    tmp_65_cast_fu_479_p1 = esl_sext<64,18>(tmp_65_fu_474_p2.read());
}

void fc1::thread_tmp_65_fu_474_p2() {
    tmp_65_fu_474_p2 = (!tmp_62_reg_607.read().is_01() || !tmp_54_cast_fu_470_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_62_reg_607.read()) + sc_biguint<18>(tmp_54_cast_fu_470_p1.read()));
}

void fc1::thread_tmp_66_fu_521_p1() {
    tmp_66_fu_521_p1 = a_assign_to_int_fu_507_p1.read().range(23-1, 0);
}

void fc1::thread_tmp_fu_337_p1() {
    tmp_fu_337_p1 = esl_zext<64,7>(invdar_reg_228.read());
}

void fc1::thread_tmp_s_fu_342_p2() {
    tmp_s_fu_342_p2 = (!invdar_reg_228.read().is_01() || !ap_const_lv7_77.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_228.read() == ap_const_lv7_77);
}

void fc1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_342_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_47_fu_359_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_369_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond9_fu_381_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond8_fu_411_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(exitcond7_fu_458_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(exitcond_fu_489_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(out_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

