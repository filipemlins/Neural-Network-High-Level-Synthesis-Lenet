// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> conv2::ap_ST_fsm_state1 = "1";
const sc_lv<25> conv2::ap_ST_fsm_state2 = "10";
const sc_lv<25> conv2::ap_ST_fsm_state3 = "100";
const sc_lv<25> conv2::ap_ST_fsm_state4 = "1000";
const sc_lv<25> conv2::ap_ST_fsm_state5 = "10000";
const sc_lv<25> conv2::ap_ST_fsm_state6 = "100000";
const sc_lv<25> conv2::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> conv2::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> conv2::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> conv2::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> conv2::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> conv2::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> conv2::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> conv2::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> conv2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv2::ap_const_lv32_18 = "11000";
const sc_lv<32> conv2::ap_const_lv32_1 = "1";
const sc_lv<1> conv2::ap_const_lv1_0 = "0";
const sc_lv<32> conv2::ap_const_lv32_2 = "10";
const sc_lv<32> conv2::ap_const_lv32_3 = "11";
const sc_lv<32> conv2::ap_const_lv32_4 = "100";
const sc_lv<32> conv2::ap_const_lv32_5 = "101";
const sc_lv<32> conv2::ap_const_lv32_6 = "110";
const sc_lv<32> conv2::ap_const_lv32_7 = "111";
const sc_lv<32> conv2::ap_const_lv32_8 = "1000";
const sc_lv<32> conv2::ap_const_lv32_9 = "1001";
const sc_lv<32> conv2::ap_const_lv32_D = "1101";
const sc_lv<32> conv2::ap_const_lv32_12 = "10010";
const sc_lv<32> conv2::ap_const_lv32_16 = "10110";
const sc_lv<32> conv2::ap_const_lv32_17 = "10111";
const sc_lv<11> conv2::ap_const_lv11_0 = "00000000000";
const sc_lv<1> conv2::ap_const_lv1_1 = "1";
const sc_lv<5> conv2::ap_const_lv5_0 = "00000";
const sc_lv<4> conv2::ap_const_lv4_0 = "0000";
const sc_lv<2> conv2::ap_const_lv2_0 = "00";
const sc_lv<32> conv2::ap_const_lv32_E = "1110";
const sc_lv<32> conv2::ap_const_lv32_A = "1010";
const sc_lv<11> conv2::ap_const_lv11_620 = "11000100000";
const sc_lv<11> conv2::ap_const_lv11_1 = "1";
const sc_lv<5> conv2::ap_const_lv5_10 = "10000";
const sc_lv<5> conv2::ap_const_lv5_1 = "1";
const sc_lv<4> conv2::ap_const_lv4_D = "1101";
const sc_lv<4> conv2::ap_const_lv4_1 = "1";
const sc_lv<2> conv2::ap_const_lv2_2 = "10";
const sc_lv<2> conv2::ap_const_lv2_1 = "1";
const sc_lv<3> conv2::ap_const_lv3_0 = "000";
const sc_lv<4> conv2::ap_const_lv4_8 = "1000";
const sc_lv<11> conv2::ap_const_lv11_C4 = "11000100";
const sc_lv<5> conv2::ap_const_lv5_2 = "10";
const bool conv2::ap_const_boolean_1 = true;

conv2::conv2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv2_layer_bias_U = new conv2_conv2_layer_bias("conv2_layer_bias_U");
    conv2_layer_bias_U->clk(ap_clk);
    conv2_layer_bias_U->reset(ap_rst);
    conv2_layer_bias_U->address0(conv2_layer_bias_address0);
    conv2_layer_bias_U->ce0(conv2_layer_bias_ce0);
    conv2_layer_bias_U->q0(conv2_layer_bias_q0);
    conv2_layer_weights_U = new conv2_conv2_layer_weights("conv2_layer_weights_U");
    conv2_layer_weights_U->clk(ap_clk);
    conv2_layer_weights_U->reset(ap_rst);
    conv2_layer_weights_U->address0(conv2_layer_weights_address0);
    conv2_layer_weights_U->ce0(conv2_layer_weights_ce0);
    conv2_layer_weights_U->q0(conv2_layer_weights_q0);
    conv_buff_U = new conv2_conv_buff("conv_buff_U");
    conv_buff_U->clk(ap_clk);
    conv_buff_U->reset(ap_rst);
    conv_buff_U->address0(conv_buff_address0);
    conv_buff_U->ce0(conv_buff_ce0);
    conv_buff_U->we0(conv_buff_we0);
    conv_buff_U->d0(in_V_dout);
    conv_buff_U->q0(conv_buff_q0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17 = new lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17");
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->clk(ap_clk);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->reset(ap_rst);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->din0(grp_fu_314_p0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->din1(grp_fu_314_p1);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->ce(ap_var_for_const0);
    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17->dout(grp_fu_314_p2);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18 = new lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18");
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->clk(ap_clk);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->reset(ap_rst);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->din0(conv_buff_load_reg_688);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->din1(conv2_layer_weights_1_reg_683);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->ce(ap_var_for_const0);
    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18->dout(grp_fu_320_p2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U19 = new lenet_hls_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>("lenet_hls_fcmp_32ns_32ns_1_1_1_U19");
    lenet_hls_fcmp_32ns_32ns_1_1_1_U19->din0(a_assign_reg_703);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U19->din1(ap_var_for_const1);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U19->opcode(ap_var_for_const2);
    lenet_hls_fcmp_32ns_32ns_1_1_1_U19->dout(tmp_i_fu_324_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_V_empty_n );
    sensitive << ( exitcond4_fu_329_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_346_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_channel_offset_1_fu_530_p2);
    sensitive << ( channel_offset_reg_292 );

    SC_METHOD(thread_col_offset_1_fu_478_p2);
    sensitive << ( col_offset_reg_269 );

    SC_METHOD(thread_col_offset_cast4_cas_fu_468_p1);
    sensitive << ( col_offset_reg_269 );

    SC_METHOD(thread_conv2_layer_bias_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_358_p1 );

    SC_METHOD(thread_conv2_layer_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_conv2_layer_weights_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_73_cast_fu_560_p1 );

    SC_METHOD(thread_conv2_layer_weights_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_conv2_out_V_blk_n);
    sensitive << ( conv2_out_V_full_n );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_conv2_out_V_din);
    sensitive << ( conv2_out_V_full_n );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_64_reg_709 );

    SC_METHOD(thread_conv2_out_V_write);
    sensitive << ( conv2_out_V_full_n );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_conv_buff_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_fu_341_p1 );
    sensitive << ( tmp_62_fu_565_p1 );

    SC_METHOD(thread_conv_buff_ce0);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_conv_buff_we0);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );

    SC_METHOD(thread_exitcond4_fu_329_p2);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );
    sensitive << ( k_reg_187 );

    SC_METHOD(thread_exitcond5_fu_346_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( filter_reg_198 );

    SC_METHOD(thread_exitcond6_fu_375_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_reg_210 );

    SC_METHOD(thread_exitcond7_fu_387_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_reg_222 );

    SC_METHOD(thread_exitcond8_fu_472_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( col_offset_reg_269 );

    SC_METHOD(thread_exitcond9_fu_403_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( row_offset_reg_246 );

    SC_METHOD(thread_exitcond_fu_524_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( channel_offset_reg_292 );

    SC_METHOD(thread_filter_1_fu_352_p2);
    sensitive << ( filter_reg_198 );

    SC_METHOD(thread_grp_fu_314_p0);
    sensitive << ( conv2_layer_bias_loa_reg_603 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_63_reg_693 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_314_p1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sum_3_reg_234 );
    sensitive << ( sum_5_reg_280 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_i_11_fu_381_p2);
    sensitive << ( i_reg_210 );

    SC_METHOD(thread_in_V_blk_n);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );

    SC_METHOD(thread_in_V_read);
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_346_p2 );

    SC_METHOD(thread_j_7_fu_393_p2);
    sensitive << ( j_reg_222 );

    SC_METHOD(thread_k_3_fu_335_p2);
    sensitive << ( k_reg_187 );

    SC_METHOD(thread_next_mul_fu_536_p2);
    sensitive << ( phi_mul_reg_303 );

    SC_METHOD(thread_p_shl3_cast_fu_441_p1);
    sensitive << ( p_shl3_fu_433_p3 );

    SC_METHOD(thread_p_shl3_fu_433_p3);
    sensitive << ( tmp_55_fu_415_p2 );

    SC_METHOD(thread_p_shl_cast_fu_429_p1);
    sensitive << ( p_shl_fu_421_p3 );

    SC_METHOD(thread_p_shl_fu_421_p3);
    sensitive << ( tmp_55_fu_415_p2 );

    SC_METHOD(thread_phi_mul_cast_fu_520_p1);
    sensitive << ( phi_mul_reg_303 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_row_offset_1_fu_409_p2);
    sensitive << ( row_offset_reg_246 );

    SC_METHOD(thread_row_offset_cast7_fu_399_p1);
    sensitive << ( row_offset_reg_246 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_t1_cast_fu_547_p1);
    sensitive << ( t1_fu_542_p2 );

    SC_METHOD(thread_t1_fu_542_p2);
    sensitive << ( tmp_65_cast_reg_655 );
    sensitive << ( phi_mul_cast_fu_520_p1 );

    SC_METHOD(thread_tmp1_cast_fu_507_p1);
    sensitive << ( tmp1_fu_501_p2 );

    SC_METHOD(thread_tmp1_fu_501_p2);
    sensitive << ( j_reg_222 );
    sensitive << ( col_offset_cast4_cas_fu_468_p1 );

    SC_METHOD(thread_tmp_55_fu_415_p2);
    sensitive << ( i_reg_210 );
    sensitive << ( row_offset_cast7_fu_399_p1 );

    SC_METHOD(thread_tmp_56_fu_445_p2);
    sensitive << ( p_shl_cast_fu_429_p1 );
    sensitive << ( p_shl3_cast_fu_441_p1 );

    SC_METHOD(thread_tmp_57_cast_fu_451_p1);
    sensitive << ( row_offset_reg_246 );

    SC_METHOD(thread_tmp_58_fu_484_p1);
    sensitive << ( col_offset_reg_269 );

    SC_METHOD(thread_tmp_59_fu_511_p2);
    sensitive << ( tmp_56_reg_632 );
    sensitive << ( tmp1_cast_fu_507_p1 );

    SC_METHOD(thread_tmp_61_cast_fu_551_p1);
    sensitive << ( channel_offset_reg_292 );

    SC_METHOD(thread_tmp_61_fu_363_p3);
    sensitive << ( filter_reg_198 );

    SC_METHOD(thread_tmp_62_fu_565_p1);
    sensitive << ( t1_cast_fu_547_p1 );

    SC_METHOD(thread_tmp_64_fu_570_p3);
    sensitive << ( a_assign_reg_703 );
    sensitive << ( tmp_i_fu_324_p2 );

    SC_METHOD(thread_tmp_65_cast1_fu_371_p1);
    sensitive << ( tmp_61_fu_363_p3 );

    SC_METHOD(thread_tmp_65_cast_fu_516_p1);
    sensitive << ( tmp_59_fu_511_p2 );

    SC_METHOD(thread_tmp_65_fu_455_p2);
    sensitive << ( tmp_65_cast1_reg_598 );
    sensitive << ( tmp_57_cast_fu_451_p1 );

    SC_METHOD(thread_tmp_66_fu_460_p3);
    sensitive << ( tmp_65_fu_455_p2 );

    SC_METHOD(thread_tmp_67_fu_488_p2);
    sensitive << ( tmp_66_reg_637 );
    sensitive << ( tmp_58_fu_484_p1 );

    SC_METHOD(thread_tmp_68_fu_555_p2);
    sensitive << ( tmp_72_cast_reg_650 );
    sensitive << ( tmp_61_cast_fu_551_p1 );

    SC_METHOD(thread_tmp_72_cast_fu_493_p3);
    sensitive << ( tmp_67_fu_488_p2 );

    SC_METHOD(thread_tmp_73_cast_fu_560_p1);
    sensitive << ( tmp_68_fu_555_p2 );

    SC_METHOD(thread_tmp_fu_341_p1);
    sensitive << ( k_reg_187 );

    SC_METHOD(thread_tmp_s_fu_358_p1);
    sensitive << ( filter_reg_198 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv2_out_V_full_n );
    sensitive << ( in_V_empty_n );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_329_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_346_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond9_fu_403_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond8_fu_472_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_524_p2 );
    sensitive << ( exitcond6_fu_375_p2 );
    sensitive << ( exitcond7_fu_387_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, conv2_out_V_din, "(port)conv2_out_V_din");
    sc_trace(mVcdFile, conv2_out_V_full_n, "(port)conv2_out_V_full_n");
    sc_trace(mVcdFile, conv2_out_V_write, "(port)conv2_out_V_write");
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, conv2_layer_bias_address0, "conv2_layer_bias_address0");
    sc_trace(mVcdFile, conv2_layer_bias_ce0, "conv2_layer_bias_ce0");
    sc_trace(mVcdFile, conv2_layer_bias_q0, "conv2_layer_bias_q0");
    sc_trace(mVcdFile, conv2_layer_weights_address0, "conv2_layer_weights_address0");
    sc_trace(mVcdFile, conv2_layer_weights_ce0, "conv2_layer_weights_ce0");
    sc_trace(mVcdFile, conv2_layer_weights_q0, "conv2_layer_weights_q0");
    sc_trace(mVcdFile, conv2_out_V_blk_n, "conv2_out_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, in_V_blk_n, "in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond4_fu_329_p2, "exitcond4_fu_329_p2");
    sc_trace(mVcdFile, k_3_fu_335_p2, "k_3_fu_335_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, filter_1_fu_352_p2, "filter_1_fu_352_p2");
    sc_trace(mVcdFile, filter_1_reg_588, "filter_1_reg_588");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond5_fu_346_p2, "exitcond5_fu_346_p2");
    sc_trace(mVcdFile, tmp_65_cast1_fu_371_p1, "tmp_65_cast1_fu_371_p1");
    sc_trace(mVcdFile, tmp_65_cast1_reg_598, "tmp_65_cast1_reg_598");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, conv2_layer_bias_loa_reg_603, "conv2_layer_bias_loa_reg_603");
    sc_trace(mVcdFile, i_11_fu_381_p2, "i_11_fu_381_p2");
    sc_trace(mVcdFile, i_11_reg_611, "i_11_reg_611");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_7_fu_393_p2, "j_7_fu_393_p2");
    sc_trace(mVcdFile, j_7_reg_619, "j_7_reg_619");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, row_offset_1_fu_409_p2, "row_offset_1_fu_409_p2");
    sc_trace(mVcdFile, row_offset_1_reg_627, "row_offset_1_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_56_fu_445_p2, "tmp_56_fu_445_p2");
    sc_trace(mVcdFile, tmp_56_reg_632, "tmp_56_reg_632");
    sc_trace(mVcdFile, exitcond9_fu_403_p2, "exitcond9_fu_403_p2");
    sc_trace(mVcdFile, tmp_66_fu_460_p3, "tmp_66_fu_460_p3");
    sc_trace(mVcdFile, tmp_66_reg_637, "tmp_66_reg_637");
    sc_trace(mVcdFile, col_offset_1_fu_478_p2, "col_offset_1_fu_478_p2");
    sc_trace(mVcdFile, col_offset_1_reg_645, "col_offset_1_reg_645");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_72_cast_fu_493_p3, "tmp_72_cast_fu_493_p3");
    sc_trace(mVcdFile, tmp_72_cast_reg_650, "tmp_72_cast_reg_650");
    sc_trace(mVcdFile, exitcond8_fu_472_p2, "exitcond8_fu_472_p2");
    sc_trace(mVcdFile, tmp_65_cast_fu_516_p1, "tmp_65_cast_fu_516_p1");
    sc_trace(mVcdFile, tmp_65_cast_reg_655, "tmp_65_cast_reg_655");
    sc_trace(mVcdFile, channel_offset_1_fu_530_p2, "channel_offset_1_fu_530_p2");
    sc_trace(mVcdFile, channel_offset_1_reg_663, "channel_offset_1_reg_663");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, next_mul_fu_536_p2, "next_mul_fu_536_p2");
    sc_trace(mVcdFile, next_mul_reg_668, "next_mul_reg_668");
    sc_trace(mVcdFile, exitcond_fu_524_p2, "exitcond_fu_524_p2");
    sc_trace(mVcdFile, conv2_layer_weights_1_reg_683, "conv2_layer_weights_1_reg_683");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, conv_buff_q0, "conv_buff_q0");
    sc_trace(mVcdFile, conv_buff_load_reg_688, "conv_buff_load_reg_688");
    sc_trace(mVcdFile, grp_fu_320_p2, "grp_fu_320_p2");
    sc_trace(mVcdFile, tmp_63_reg_693, "tmp_63_reg_693");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_fu_314_p2, "grp_fu_314_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, a_assign_reg_703, "a_assign_reg_703");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_64_fu_570_p3, "tmp_64_fu_570_p3");
    sc_trace(mVcdFile, tmp_64_reg_709, "tmp_64_reg_709");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, conv_buff_address0, "conv_buff_address0");
    sc_trace(mVcdFile, conv_buff_ce0, "conv_buff_ce0");
    sc_trace(mVcdFile, conv_buff_we0, "conv_buff_we0");
    sc_trace(mVcdFile, k_reg_187, "k_reg_187");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, filter_reg_198, "filter_reg_198");
    sc_trace(mVcdFile, exitcond6_fu_375_p2, "exitcond6_fu_375_p2");
    sc_trace(mVcdFile, i_reg_210, "i_reg_210");
    sc_trace(mVcdFile, exitcond7_fu_387_p2, "exitcond7_fu_387_p2");
    sc_trace(mVcdFile, j_reg_222, "j_reg_222");
    sc_trace(mVcdFile, sum_3_reg_234, "sum_3_reg_234");
    sc_trace(mVcdFile, row_offset_reg_246, "row_offset_reg_246");
    sc_trace(mVcdFile, sum_4_reg_257, "sum_4_reg_257");
    sc_trace(mVcdFile, col_offset_reg_269, "col_offset_reg_269");
    sc_trace(mVcdFile, sum_5_reg_280, "sum_5_reg_280");
    sc_trace(mVcdFile, channel_offset_reg_292, "channel_offset_reg_292");
    sc_trace(mVcdFile, phi_mul_reg_303, "phi_mul_reg_303");
    sc_trace(mVcdFile, tmp_fu_341_p1, "tmp_fu_341_p1");
    sc_trace(mVcdFile, tmp_s_fu_358_p1, "tmp_s_fu_358_p1");
    sc_trace(mVcdFile, tmp_73_cast_fu_560_p1, "tmp_73_cast_fu_560_p1");
    sc_trace(mVcdFile, tmp_62_fu_565_p1, "tmp_62_fu_565_p1");
    sc_trace(mVcdFile, grp_fu_314_p0, "grp_fu_314_p0");
    sc_trace(mVcdFile, grp_fu_314_p1, "grp_fu_314_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_61_fu_363_p3, "tmp_61_fu_363_p3");
    sc_trace(mVcdFile, row_offset_cast7_fu_399_p1, "row_offset_cast7_fu_399_p1");
    sc_trace(mVcdFile, tmp_55_fu_415_p2, "tmp_55_fu_415_p2");
    sc_trace(mVcdFile, p_shl_fu_421_p3, "p_shl_fu_421_p3");
    sc_trace(mVcdFile, p_shl3_fu_433_p3, "p_shl3_fu_433_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_429_p1, "p_shl_cast_fu_429_p1");
    sc_trace(mVcdFile, p_shl3_cast_fu_441_p1, "p_shl3_cast_fu_441_p1");
    sc_trace(mVcdFile, tmp_57_cast_fu_451_p1, "tmp_57_cast_fu_451_p1");
    sc_trace(mVcdFile, tmp_65_fu_455_p2, "tmp_65_fu_455_p2");
    sc_trace(mVcdFile, tmp_58_fu_484_p1, "tmp_58_fu_484_p1");
    sc_trace(mVcdFile, tmp_67_fu_488_p2, "tmp_67_fu_488_p2");
    sc_trace(mVcdFile, col_offset_cast4_cas_fu_468_p1, "col_offset_cast4_cas_fu_468_p1");
    sc_trace(mVcdFile, tmp1_fu_501_p2, "tmp1_fu_501_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_507_p1, "tmp1_cast_fu_507_p1");
    sc_trace(mVcdFile, tmp_59_fu_511_p2, "tmp_59_fu_511_p2");
    sc_trace(mVcdFile, phi_mul_cast_fu_520_p1, "phi_mul_cast_fu_520_p1");
    sc_trace(mVcdFile, t1_fu_542_p2, "t1_fu_542_p2");
    sc_trace(mVcdFile, tmp_61_cast_fu_551_p1, "tmp_61_cast_fu_551_p1");
    sc_trace(mVcdFile, tmp_68_fu_555_p2, "tmp_68_fu_555_p2");
    sc_trace(mVcdFile, t1_cast_fu_547_p1, "t1_cast_fu_547_p1");
    sc_trace(mVcdFile, tmp_i_fu_324_p2, "tmp_i_fu_324_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

conv2::~conv2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete conv2_layer_bias_U;
    delete conv2_layer_weights_U;
    delete conv_buff_U;
    delete lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17;
    delete lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18;
    delete lenet_hls_fcmp_32ns_32ns_1_1_1_U19;
}

void conv2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void conv2::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void conv2::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void conv2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(exitcond5_fu_346_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        channel_offset_reg_292 = channel_offset_1_reg_663.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_472_p2.read()))) {
        channel_offset_reg_292 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_524_p2.read(), ap_const_lv1_1))) {
        col_offset_reg_269 = col_offset_1_reg_645.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_403_p2.read()))) {
        col_offset_reg_269 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_1))) {
        filter_reg_198 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond6_fu_375_p2.read(), ap_const_lv1_1))) {
        filter_reg_198 = filter_1_reg_588.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_210 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_387_p2.read()))) {
        i_reg_210 = i_11_reg_611.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(conv2_out_V_full_n.read(), ap_const_logic_1))) {
        j_reg_222 = j_7_reg_619.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_375_p2.read()))) {
        j_reg_222 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        k_reg_187 = k_3_fu_335_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        k_reg_187 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        phi_mul_reg_303 = next_mul_reg_668.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_472_p2.read()))) {
        phi_mul_reg_303 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_472_p2.read(), ap_const_lv1_1))) {
        row_offset_reg_246 = row_offset_1_reg_627.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_387_p2.read()))) {
        row_offset_reg_246 = ap_const_lv2_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_472_p2.read(), ap_const_lv1_1))) {
        sum_3_reg_234 = sum_4_reg_257.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_387_p2.read()))) {
        sum_3_reg_234 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_524_p2.read(), ap_const_lv1_1))) {
        sum_4_reg_257 = sum_5_reg_280.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_403_p2.read()))) {
        sum_4_reg_257 = sum_3_reg_234.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        sum_5_reg_280 = grp_fu_314_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_472_p2.read()))) {
        sum_5_reg_280 = sum_4_reg_257.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        a_assign_reg_703 = grp_fu_314_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        channel_offset_1_reg_663 = channel_offset_1_fu_530_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        col_offset_1_reg_645 = col_offset_1_fu_478_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        conv2_layer_bias_loa_reg_603 = conv2_layer_bias_q0.read();
        tmp_65_cast1_reg_598 = tmp_65_cast1_fu_371_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        conv2_layer_weights_1_reg_683 = conv2_layer_weights_q0.read();
        conv_buff_load_reg_688 = conv_buff_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        filter_1_reg_588 = filter_1_fu_352_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_11_reg_611 = i_11_fu_381_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_7_reg_619 = j_7_fu_393_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_524_p2.read()))) {
        next_mul_reg_668 = next_mul_fu_536_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        row_offset_1_reg_627 = row_offset_1_fu_409_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_403_p2.read()))) {
        tmp_56_reg_632 = tmp_56_fu_445_p2.read();
        tmp_66_reg_637 = tmp_66_fu_460_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        tmp_63_reg_693 = grp_fu_320_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        tmp_64_reg_709 = tmp_64_fu_570_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_472_p2.read()))) {
        tmp_65_cast_reg_655 = tmp_65_cast_fu_516_p1.read();
        tmp_72_cast_reg_650 = tmp_72_cast_fu_493_p3.read();
    }
}

void conv2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv2::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void conv2::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void conv2::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void conv2::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void conv2::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void conv2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv2::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void conv2::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void conv2::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void conv2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv2::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv2::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void conv2::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void conv2::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void conv2::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()));
}

void conv2::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_346_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void conv2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv2::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void conv2::thread_channel_offset_1_fu_530_p2() {
    channel_offset_1_fu_530_p2 = (!channel_offset_reg_292.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(channel_offset_reg_292.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void conv2::thread_col_offset_1_fu_478_p2() {
    col_offset_1_fu_478_p2 = (!col_offset_reg_269.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_offset_reg_269.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2::thread_col_offset_cast4_cas_fu_468_p1() {
    col_offset_cast4_cas_fu_468_p1 = esl_zext<4,2>(col_offset_reg_269.read());
}

void conv2::thread_conv2_layer_bias_address0() {
    conv2_layer_bias_address0 =  (sc_lv<4>) (tmp_s_fu_358_p1.read());
}

void conv2::thread_conv2_layer_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        conv2_layer_bias_ce0 = ap_const_logic_1;
    } else {
        conv2_layer_bias_ce0 = ap_const_logic_0;
    }
}

void conv2::thread_conv2_layer_weights_address0() {
    conv2_layer_weights_address0 =  (sc_lv<9>) (tmp_73_cast_fu_560_p1.read());
}

void conv2::thread_conv2_layer_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv2_layer_weights_ce0 = ap_const_logic_1;
    } else {
        conv2_layer_weights_ce0 = ap_const_logic_0;
    }
}

void conv2::thread_conv2_out_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        conv2_out_V_blk_n = conv2_out_V_full_n.read();
    } else {
        conv2_out_V_blk_n = ap_const_logic_1;
    }
}

void conv2::thread_conv2_out_V_din() {
    conv2_out_V_din = tmp_64_reg_709.read();
}

void conv2::thread_conv2_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(conv2_out_V_full_n.read(), ap_const_logic_1))) {
        conv2_out_V_write = ap_const_logic_1;
    } else {
        conv2_out_V_write = ap_const_logic_0;
    }
}

void conv2::thread_conv_buff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv_buff_address0 =  (sc_lv<11>) (tmp_62_fu_565_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv_buff_address0 =  (sc_lv<11>) (tmp_fu_341_p1.read());
    } else {
        conv_buff_address0 = "XXXXXXXXXXX";
    }
}

void conv2::thread_conv_buff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        conv_buff_ce0 = ap_const_logic_1;
    } else {
        conv_buff_ce0 = ap_const_logic_0;
    }
}

void conv2::thread_conv_buff_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        conv_buff_we0 = ap_const_logic_1;
    } else {
        conv_buff_we0 = ap_const_logic_0;
    }
}

void conv2::thread_exitcond4_fu_329_p2() {
    exitcond4_fu_329_p2 = (!k_reg_187.read().is_01() || !ap_const_lv11_620.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_187.read() == ap_const_lv11_620);
}

void conv2::thread_exitcond5_fu_346_p2() {
    exitcond5_fu_346_p2 = (!filter_reg_198.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(filter_reg_198.read() == ap_const_lv5_10);
}

void conv2::thread_exitcond6_fu_375_p2() {
    exitcond6_fu_375_p2 = (!i_reg_210.read().is_01() || !ap_const_lv4_D.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_210.read() == ap_const_lv4_D);
}

void conv2::thread_exitcond7_fu_387_p2() {
    exitcond7_fu_387_p2 = (!j_reg_222.read().is_01() || !ap_const_lv4_D.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_222.read() == ap_const_lv4_D);
}

void conv2::thread_exitcond8_fu_472_p2() {
    exitcond8_fu_472_p2 = (!col_offset_reg_269.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(col_offset_reg_269.read() == ap_const_lv2_2);
}

void conv2::thread_exitcond9_fu_403_p2() {
    exitcond9_fu_403_p2 = (!row_offset_reg_246.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(row_offset_reg_246.read() == ap_const_lv2_2);
}

void conv2::thread_exitcond_fu_524_p2() {
    exitcond_fu_524_p2 = (!channel_offset_reg_292.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(channel_offset_reg_292.read() == ap_const_lv4_8);
}

void conv2::thread_filter_1_fu_352_p2() {
    filter_1_fu_352_p2 = (!filter_reg_198.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(filter_reg_198.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv2::thread_grp_fu_314_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_314_p0 = tmp_63_reg_693.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_314_p0 = conv2_layer_bias_loa_reg_603.read();
    } else {
        grp_fu_314_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void conv2::thread_grp_fu_314_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_314_p1 = sum_5_reg_280.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_314_p1 = sum_3_reg_234.read();
    } else {
        grp_fu_314_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void conv2::thread_i_11_fu_381_p2() {
    i_11_fu_381_p2 = (!i_reg_210.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_210.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void conv2::thread_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0))) {
        in_V_blk_n = in_V_empty_n.read();
    } else {
        in_V_blk_n = ap_const_logic_1;
    }
}

void conv2::thread_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
        in_V_read = ap_const_logic_1;
    } else {
        in_V_read = ap_const_logic_0;
    }
}

void conv2::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_346_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void conv2::thread_j_7_fu_393_p2() {
    j_7_fu_393_p2 = (!j_reg_222.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_222.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void conv2::thread_k_3_fu_335_p2() {
    k_3_fu_335_p2 = (!k_reg_187.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(k_reg_187.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void conv2::thread_next_mul_fu_536_p2() {
    next_mul_fu_536_p2 = (!phi_mul_reg_303.read().is_01() || !ap_const_lv11_C4.is_01())? sc_lv<11>(): (sc_biguint<11>(phi_mul_reg_303.read()) + sc_biguint<11>(ap_const_lv11_C4));
}

void conv2::thread_p_shl3_cast_fu_441_p1() {
    p_shl3_cast_fu_441_p1 = esl_zext<9,5>(p_shl3_fu_433_p3.read());
}

void conv2::thread_p_shl3_fu_433_p3() {
    p_shl3_fu_433_p3 = esl_concat<4,1>(tmp_55_fu_415_p2.read(), ap_const_lv1_0);
}

void conv2::thread_p_shl_cast_fu_429_p1() {
    p_shl_cast_fu_429_p1 = esl_zext<9,8>(p_shl_fu_421_p3.read());
}

void conv2::thread_p_shl_fu_421_p3() {
    p_shl_fu_421_p3 = esl_concat<4,4>(tmp_55_fu_415_p2.read(), ap_const_lv4_0);
}

void conv2::thread_phi_mul_cast_fu_520_p1() {
    phi_mul_cast_fu_520_p1 = esl_zext<12,11>(phi_mul_reg_303.read());
}

void conv2::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void conv2::thread_row_offset_1_fu_409_p2() {
    row_offset_1_fu_409_p2 = (!row_offset_reg_246.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_offset_reg_246.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2::thread_row_offset_cast7_fu_399_p1() {
    row_offset_cast7_fu_399_p1 = esl_zext<4,2>(row_offset_reg_246.read());
}

void conv2::thread_start_out() {
    start_out = real_start.read();
}

void conv2::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void conv2::thread_t1_cast_fu_547_p1() {
    t1_cast_fu_547_p1 = esl_sext<32,12>(t1_fu_542_p2.read());
}

void conv2::thread_t1_fu_542_p2() {
    t1_fu_542_p2 = (!tmp_65_cast_reg_655.read().is_01() || !phi_mul_cast_fu_520_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(tmp_65_cast_reg_655.read()) + sc_biguint<12>(phi_mul_cast_fu_520_p1.read()));
}

void conv2::thread_tmp1_cast_fu_507_p1() {
    tmp1_cast_fu_507_p1 = esl_zext<9,4>(tmp1_fu_501_p2.read());
}

void conv2::thread_tmp1_fu_501_p2() {
    tmp1_fu_501_p2 = (!col_offset_cast4_cas_fu_468_p1.read().is_01() || !j_reg_222.read().is_01())? sc_lv<4>(): (sc_biguint<4>(col_offset_cast4_cas_fu_468_p1.read()) + sc_biguint<4>(j_reg_222.read()));
}

void conv2::thread_tmp_55_fu_415_p2() {
    tmp_55_fu_415_p2 = (!i_reg_210.read().is_01() || !row_offset_cast7_fu_399_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_210.read()) + sc_biguint<4>(row_offset_cast7_fu_399_p1.read()));
}

void conv2::thread_tmp_56_fu_445_p2() {
    tmp_56_fu_445_p2 = (!p_shl_cast_fu_429_p1.read().is_01() || !p_shl3_cast_fu_441_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(p_shl_cast_fu_429_p1.read()) - sc_biguint<9>(p_shl3_cast_fu_441_p1.read()));
}

void conv2::thread_tmp_57_cast_fu_451_p1() {
    tmp_57_cast_fu_451_p1 = esl_zext<7,2>(row_offset_reg_246.read());
}

void conv2::thread_tmp_58_fu_484_p1() {
    tmp_58_fu_484_p1 = esl_zext<8,2>(col_offset_reg_269.read());
}

void conv2::thread_tmp_59_fu_511_p2() {
    tmp_59_fu_511_p2 = (!tmp_56_reg_632.read().is_01() || !tmp1_cast_fu_507_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_56_reg_632.read()) + sc_biguint<9>(tmp1_cast_fu_507_p1.read()));
}

void conv2::thread_tmp_61_cast_fu_551_p1() {
    tmp_61_cast_fu_551_p1 = esl_zext<11,4>(channel_offset_reg_292.read());
}

void conv2::thread_tmp_61_fu_363_p3() {
    tmp_61_fu_363_p3 = esl_concat<5,1>(filter_reg_198.read(), ap_const_lv1_0);
}

void conv2::thread_tmp_62_fu_565_p1() {
    tmp_62_fu_565_p1 = esl_zext<64,32>(t1_cast_fu_547_p1.read());
}

void conv2::thread_tmp_64_fu_570_p3() {
    tmp_64_fu_570_p3 = (!tmp_i_fu_324_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_i_fu_324_p2.read()[0].to_bool())? a_assign_reg_703.read(): ap_const_lv32_0);
}

void conv2::thread_tmp_65_cast1_fu_371_p1() {
    tmp_65_cast1_fu_371_p1 = esl_zext<7,6>(tmp_61_fu_363_p3.read());
}

void conv2::thread_tmp_65_cast_fu_516_p1() {
    tmp_65_cast_fu_516_p1 = esl_sext<12,9>(tmp_59_fu_511_p2.read());
}

void conv2::thread_tmp_65_fu_455_p2() {
    tmp_65_fu_455_p2 = (!tmp_57_cast_fu_451_p1.read().is_01() || !tmp_65_cast1_reg_598.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_57_cast_fu_451_p1.read()) + sc_biguint<7>(tmp_65_cast1_reg_598.read()));
}

void conv2::thread_tmp_66_fu_460_p3() {
    tmp_66_fu_460_p3 = esl_concat<7,1>(tmp_65_fu_455_p2.read(), ap_const_lv1_0);
}

void conv2::thread_tmp_67_fu_488_p2() {
    tmp_67_fu_488_p2 = (!tmp_66_reg_637.read().is_01() || !tmp_58_fu_484_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_66_reg_637.read()) + sc_biguint<8>(tmp_58_fu_484_p1.read()));
}

void conv2::thread_tmp_68_fu_555_p2() {
    tmp_68_fu_555_p2 = (!tmp_72_cast_reg_650.read().is_01() || !tmp_61_cast_fu_551_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_72_cast_reg_650.read()) + sc_biguint<11>(tmp_61_cast_fu_551_p1.read()));
}

void conv2::thread_tmp_72_cast_fu_493_p3() {
    tmp_72_cast_fu_493_p3 = esl_concat<8,3>(tmp_67_fu_488_p2.read(), ap_const_lv3_0);
}

void conv2::thread_tmp_73_cast_fu_560_p1() {
    tmp_73_cast_fu_560_p1 = esl_zext<64,11>(tmp_68_fu_555_p2.read());
}

void conv2::thread_tmp_fu_341_p1() {
    tmp_fu_341_p1 = esl_zext<64,11>(k_reg_187.read());
}

void conv2::thread_tmp_s_fu_358_p1() {
    tmp_s_fu_358_p1 = esl_zext<64,5>(filter_reg_198.read());
}

void conv2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond4_fu_329_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond5_fu_346_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond6_fu_375_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_387_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_403_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(exitcond8_fu_472_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(exitcond_fu_524_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(conv2_out_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

