-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_full_n : IN STD_LOGIC;
    out_V_write : OUT STD_LOGIC;
    in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_empty_n : IN STD_LOGIC;
    in_V_read : OUT STD_LOGIC );
end;


architecture behav of fc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_77 : STD_LOGIC_VECTOR (6 downto 0) := "1110111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_10DFF : STD_LOGIC_VECTOR (16 downto 0) := "10000110111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fc1_layer_weights_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc1_layer_weights_ce0 : STD_LOGIC;
    signal fc1_layer_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_layer_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1_layer_bias_ce0 : STD_LOGIC;
    signal fc1_layer_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond9_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal indvarinc_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_338_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_cast5_fu_355_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast5_reg_521 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_8_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_529 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_fu_377_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal j_6_fu_407_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_545 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond8_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_442_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_55_reg_555 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal fc1_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_buff_load_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_10_reg_568 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond7_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc1_layer_weights_lo_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_addr_7_reg_583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_fu_485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_9_reg_596 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc1_layer_bias_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_buff_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc1_buff_ce0 : STD_LOGIC;
    signal fc1_buff_we0 : STD_LOGIC;
    signal fc1_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_s_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_229 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_44_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_240 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_reg_262 : STD_LOGIC_VECTOR (9 downto 0);
    signal i2_reg_274 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i3_reg_286 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_48_fu_383_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_418_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_fu_430_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_426_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_438_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_52_cast_fu_460_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_58_fu_464_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc1_fc1_layer_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc1_fc1_layer_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc1_fc1_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc1_layer_weights_U : component fc1_fc1_layer_weights
    generic map (
        DataWidth => 32,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_layer_weights_address0,
        ce0 => fc1_layer_weights_ce0,
        q0 => fc1_layer_weights_q0);

    fc1_layer_bias_U : component fc1_fc1_layer_bias
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_layer_bias_address0,
        ce0 => fc1_layer_bias_ce0,
        q0 => fc1_layer_bias_q0);

    output_U : component fc1_output
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0);

    fc1_buff_U : component fc1_fc1_buff
    generic map (
        DataWidth => 32,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_buff_address0,
        ce0 => fc1_buff_ce0,
        we0 => fc1_buff_we0,
        d0 => fc1_buff_d0,
        q0 => fc1_buff_q0);

    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U29 : component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_310,
        din1 => grp_fu_297_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U30 : component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc1_layer_weights_lo_reg_578,
        din1 => fc1_buff_load_reg_560,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);

    lenet_hls_fcmp_32ns_32ns_1_1_1_U31 : component lenet_hls_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_315,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_i_fu_305_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_reg_274 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i2_reg_274 <= i_10_reg_568;
            end if; 
        end if;
    end process;

    i3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond8_fu_401_p2 = ap_const_lv1_1))) then 
                i3_reg_286 <= ap_const_lv7_0;
            elsif (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i3_reg_286 <= i_9_reg_596;
            end if; 
        end if;
    end process;

    i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_44_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_240 <= ap_const_lv5_0;
            elsif ((not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_240 <= i_8_reg_529;
            end if; 
        end if;
    end process;

    invdar1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar1_reg_229 <= ap_const_lv17_0;
            elsif (((tmp_44_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                invdar1_reg_229 <= indvarinc1_fu_338_p2;
            end if; 
        end if;
    end process;

    invdar_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_218 <= indvarinc_fu_321_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_218 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j1_reg_262 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond7_fu_448_p2 = ap_const_lv1_1))) then 
                j1_reg_262 <= j_6_reg_545;
            end if; 
        end if;
    end process;

    j_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_251 <= ap_const_lv6_0;
            elsif ((not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_251 <= j_5_fu_377_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                fc1_buff_load_reg_560 <= fc1_buff_q0;
                    tmp_55_reg_555(17 downto 3) <= tmp_55_fu_442_p2(17 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                fc1_layer_bias_load_reg_611 <= fc1_layer_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fc1_layer_weights_lo_reg_578 <= fc1_layer_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_10_reg_568 <= i_10_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_8_reg_529 <= i_8_fu_365_p2;
                    i_cast5_reg_521(4 downto 0) <= i_cast5_fu_355_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_9_reg_596 <= i_9_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_6_reg_545 <= j_6_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                output_addr_7_reg_583 <= tmp_52_fu_474_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_310 <= output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_315 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_53_reg_588 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_57_reg_616 <= tmp_57_fu_497_p3;
            end if;
        end if;
    end process;
    i_cast5_reg_521(9 downto 5) <= "00000";
    tmp_55_reg_555(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_full_n, in_V_empty_n, ap_CS_fsm_state28, ap_CS_fsm_state5, exitcond9_fu_371_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, exitcond8_fu_401_p2, ap_CS_fsm_state8, exitcond7_fu_448_p2, ap_CS_fsm_state20, exitcond_fu_479_p2, tmp_s_fu_332_p2, tmp_44_fu_349_p2, exitcond3_fu_359_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_44_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond8_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond7_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state20 => 
                if (((exitcond_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(in_V_empty_n, exitcond9_fu_371_p2)
    begin
                ap_block_state5 <= ((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20, exitcond_fu_479_p2)
    begin
        if (((exitcond_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond3_fu_359_p2 <= "1" when (i_reg_240 = ap_const_lv5_10) else "0";
    exitcond7_fu_448_p2 <= "1" when (i2_reg_274 = ap_const_lv7_78) else "0";
    exitcond8_fu_401_p2 <= "1" when (j1_reg_262 = ap_const_lv10_240) else "0";
    exitcond9_fu_371_p2 <= "1" when (j_reg_251 = ap_const_lv6_24) else "0";
    exitcond_fu_479_p2 <= "1" when (i3_reg_286 = ap_const_lv7_78) else "0";

    fc1_buff_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_43_fu_344_p1, tmp_50_fu_396_p1, tmp_45_fu_413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc1_buff_address0 <= tmp_45_fu_413_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc1_buff_address0 <= tmp_50_fu_396_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_buff_address0 <= tmp_43_fu_344_p1(17 - 1 downto 0);
        else 
            fc1_buff_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc1_buff_ce0_assign_proc : process(in_V_empty_n, ap_CS_fsm_state5, exitcond9_fu_371_p2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fc1_buff_ce0 <= ap_const_logic_1;
        else 
            fc1_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_buff_d0_assign_proc : process(in_V_dout, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc1_buff_d0 <= in_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_buff_d0 <= ap_const_lv32_0;
        else 
            fc1_buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc1_buff_we0_assign_proc : process(in_V_empty_n, ap_CS_fsm_state5, exitcond9_fu_371_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fc1_buff_we0 <= ap_const_logic_1;
        else 
            fc1_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_layer_bias_address0 <= tmp_51_fu_491_p1(7 - 1 downto 0);

    fc1_layer_bias_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fc1_layer_bias_ce0 <= ap_const_logic_1;
        else 
            fc1_layer_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_layer_weights_address0 <= tmp_59_cast_fu_469_p1(17 - 1 downto 0);

    fc1_layer_weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc1_layer_weights_ce0 <= ap_const_logic_1;
        else 
            fc1_layer_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(tmp_53_reg_588, fc1_layer_bias_load_reg_611, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_297_p1 <= fc1_layer_bias_load_reg_611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_297_p1 <= tmp_53_reg_588;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_454_p2 <= std_logic_vector(unsigned(i2_reg_274) + unsigned(ap_const_lv7_1));
    i_8_fu_365_p2 <= std_logic_vector(unsigned(i_reg_240) + unsigned(ap_const_lv5_1));
    i_9_fu_485_p2 <= std_logic_vector(unsigned(i3_reg_286) + unsigned(ap_const_lv7_1));
    i_cast5_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_240),10));

    in_V_blk_n_assign_proc : process(in_V_empty_n, ap_CS_fsm_state5, exitcond9_fu_371_p2)
    begin
        if (((exitcond9_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_V_blk_n <= in_V_empty_n;
        else 
            in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_read_assign_proc : process(in_V_empty_n, ap_CS_fsm_state5, exitcond9_fu_371_p2)
    begin
        if ((not(((exitcond9_fu_371_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond9_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_V_read <= ap_const_logic_1;
        else 
            in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvarinc1_fu_338_p2 <= std_logic_vector(unsigned(invdar1_reg_229) + unsigned(ap_const_lv17_1));
    indvarinc_fu_321_p2 <= std_logic_vector(unsigned(invdar_reg_218) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state20, exitcond_fu_479_p2)
    begin
        if (((exitcond_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_5_fu_377_p2 <= std_logic_vector(unsigned(j_reg_251) + unsigned(ap_const_lv6_1));
    j_6_fu_407_p2 <= std_logic_vector(unsigned(j1_reg_262) + unsigned(ap_const_lv10_1));

    out_V_blk_n_assign_proc : process(out_V_full_n, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_V_blk_n <= out_V_full_n;
        else 
            out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_din <= tmp_57_reg_616;

    out_V_write_assign_proc : process(out_V_full_n, ap_CS_fsm_state28)
    begin
        if (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            out_V_write <= ap_const_logic_1;
        else 
            out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_7_reg_583, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state19, tmp_fu_327_p1, tmp_52_fu_474_p1, tmp_51_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_address0 <= tmp_51_fu_491_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_address0 <= output_addr_7_reg_583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_address0 <= tmp_52_fu_474_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_address0 <= tmp_fu_327_p1(7 - 1 downto 0);
        else 
            output_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_ce0 <= ap_const_logic_1;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(reg_315, ap_CS_fsm_state2, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_d0 <= reg_315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_d0 <= ap_const_lv32_0;
        else 
            output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_430_p3),18));
    p_shl_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_418_p3),18));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_43_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_229),64));
    tmp_44_fu_349_p2 <= "1" when (invdar1_reg_229 = ap_const_lv17_10DFF) else "0";
    tmp_45_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_262),64));
    tmp_46_fu_418_p3 <= (j1_reg_262 & ap_const_lv7_0);
    tmp_47_fu_430_p3 <= (j1_reg_262 & ap_const_lv3_0);
    tmp_48_fu_383_p3 <= (j_reg_251 & ap_const_lv4_0);
    tmp_49_fu_391_p2 <= std_logic_vector(unsigned(i_cast5_reg_521) + unsigned(tmp_48_fu_383_p3));
    tmp_50_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_391_p2),64));
    tmp_51_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_286),64));
    tmp_52_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_274),18));
    tmp_52_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_274),64));
    tmp_55_fu_442_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_426_p1) - unsigned(p_shl1_cast_fu_438_p1));
    tmp_57_fu_497_p3 <= 
        reg_315 when (tmp_i_fu_305_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_58_fu_464_p2 <= std_logic_vector(unsigned(tmp_55_reg_555) + unsigned(tmp_52_cast_fu_460_p1));
        tmp_59_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_464_p2),64));

    tmp_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_218),64));
    tmp_s_fu_332_p2 <= "1" when (invdar_reg_218 = ap_const_lv7_77) else "0";
end behav;
