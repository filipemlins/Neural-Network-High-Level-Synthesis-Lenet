-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fc2_layer_weights_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc2_layer_weights_V_ce0 : STD_LOGIC;
    signal fc2_layer_weights_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc2_layer_bias_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_layer_bias_V_ce0 : STD_LOGIC;
    signal fc2_layer_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_307_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_1023 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal j_4_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_1031 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_325_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_s_reg_1036 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_6_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_1044 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_5_reg_1054 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_layer_weights_V_1_reg_1059 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_16_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_7_fu_387_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_1072 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_22_cast_fu_417_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_22_cast_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_86_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_29_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_19_fu_442_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_23_cast_fu_448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_23_cast_reg_1110 : STD_LOGIC_VECTOR (16 downto 0);
    signal l_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_133_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_reg_1121 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_92_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_1137 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1142 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_132_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal a_assign_2_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_2_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Result_32_reg_1164 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exp_tmp_V_reg_1169 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_137_fu_761_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_137_reg_1174 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_107_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_4_fu_791_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_1185 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sh_amt_fu_822_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1190 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_138_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_138_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp3_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_951_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel4_reg_1211 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond4_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_1008_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1221 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_254 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal phi_mul_reg_265 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_277 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i1_reg_288 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_cast_fu_346_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_350_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1015_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_fu_399_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_403_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_407_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_403_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_fu_399_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_22_cast_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_fu_411_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_cast_fu_437_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_452_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_30_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_497_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_121_fu_513_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_123_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_126_fu_523_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_fu_527_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_24_fu_533_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_131_fu_550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_487_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_89_fu_564_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_25_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_cast_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_633_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_10_fu_639_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_11_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_cast_cast_ca_fu_676_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_7_trunc_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_14_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_fu_694_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_31_fu_701_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_assign_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_fu_739_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_106_fu_774_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_33_fu_781_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_fu_785_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_105_fu_771_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_798_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_108_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_810_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_111_fu_816_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_139_fu_846_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ireg_V_to_int_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_141_fu_865_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_fu_873_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_977_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_115_fu_981_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_cast1_fu_971_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_117_fu_990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_fu_986_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel_fu_995_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel5_fu_1002_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1015_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1015_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component lenet_hls_fpext_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenet_hls_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_hls_mac_muladd_16s_11s_27ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component fc2_fc2_layer_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component fc2_fc2_layer_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fc2_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fc2_layer_weights_V_U : component fc2_fc2_layer_weights_V
    generic map (
        DataWidth => 11,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_layer_weights_V_address0,
        ce0 => fc2_layer_weights_V_ce0,
        q0 => fc2_layer_weights_V_q0);

    fc2_layer_bias_V_U : component fc2_fc2_layer_bias_V
    generic map (
        DataWidth => 8,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_layer_bias_V_address0,
        ce0 => fc2_layer_bias_V_ce0,
        q0 => fc2_layer_bias_V_q0);

    output_V_U : component fc2_output_V
    generic map (
        DataWidth => 16,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0);

    lenet_hls_fpext_32ns_64_1_1_U38 : component lenet_hls_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => a_assign_2_reg_1158,
        dout => d_assign_fu_299_p1);

    lenet_hls_fcmp_32ns_32ns_1_1_1_U39 : component lenet_hls_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_1152,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_i_fu_302_p2);

    lenet_hls_mac_muladd_16s_11s_27ns_27_1_1_U40 : component lenet_hls_mac_muladd_16s_11s_27ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => grp_fu_1015_p0,
        din1 => fc2_layer_weights_V_1_reg_1059,
        din2 => grp_fu_1015_p2,
        dout => grp_fu_1015_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_381_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_288 <= ap_const_lv7_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i1_reg_288 <= i_7_reg_1072;
            end if; 
        end if;
    end process;

    i_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_277 <= i_6_reg_1044;
            elsif ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_277 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_254 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_329_p2 = ap_const_lv1_1))) then 
                j_reg_254 <= j_4_reg_1031;
            end if; 
        end if;
    end process;

    phi_mul_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_265 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_329_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_265 <= next_mul_reg_1023;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                a_assign_2_reg_1158 <= a_assign_2_fu_728_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                a_assign_reg_1152 <= a_assign_fu_721_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                exp_tmp_V_reg_1169 <= ireg_V_fu_735_p1(62 downto 52);
                p_Result_32_reg_1164 <= ireg_V_fu_735_p1(63 downto 63);
                tmp_107_reg_1179 <= tmp_107_fu_765_p2;
                tmp_137_reg_1174 <= tmp_137_fu_761_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fc2_layer_weights_V_1_reg_1059 <= fc2_layer_weights_V_q0;
                p_Val2_16_reg_1064 <= output_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_6_reg_1044 <= i_6_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_1072 <= i_7_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_4_reg_1031 <= j_4_fu_319_p2;
                next_mul_reg_1023 <= next_mul_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_reg_1093 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                l_reg_1116 <= l_fu_470_p3;
                tmp_133_reg_1121 <= tmp_133_fu_478_p1;
                tmp_V_19_reg_1104 <= tmp_V_19_fu_442_p3;
                    tmp_V_23_cast_reg_1110(15 downto 0) <= tmp_V_23_cast_fu_448_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_reg_1093 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                m_s_reg_1142 <= m_11_fu_649_p2(63 downto 1);
                tmp_132_reg_1147 <= m_11_fu_649_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                man_V_4_reg_1185 <= man_V_4_fu_791_p3;
                newSel4_reg_1211 <= newSel4_fu_951_p3;
                or_cond4_reg_1216 <= or_cond4_fu_965_p2;
                or_cond_reg_1206 <= or_cond_fu_945_p2;
                sel_tmp3_reg_1201 <= sel_tmp3_fu_939_p2;
                sh_amt_reg_1190 <= sh_amt_fu_822_p3;
                tmp_138_reg_1196 <= tmp_138_fu_836_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_V_addr_5_reg_1054 <= tmp_97_fu_341_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Result_29_reg_1098 <= tmp_V_18_fu_411_p2(16 downto 16);
                tmp_86_reg_1093 <= tmp_86_fu_423_p2;
                tmp_V_22_cast_reg_1087 <= tmp_V_22_cast_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_reg_1093 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_87_reg_1126 <= tmp_87_fu_482_p2;
                    tmp_92_reg_1132(0) <= tmp_92_fu_589_p3(0);
                tmp_93_reg_1137 <= tmp_93_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_V_reg_1221 <= tmp_V_fu_1008_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_1036 <= tmp_s_fu_325_p1;
            end if;
        end if;
    end process;
    tmp_V_23_cast_reg_1110(16) <= '0';
    tmp_92_reg_1132(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state16, ap_CS_fsm_state2, exitcond1_fu_313_p2, ap_CS_fsm_state3, exitcond2_fu_329_p2, ap_CS_fsm_state6, exitcond_fu_381_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_329_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_381_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_798_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_105_fu_771_p1));
    a_assign_2_fu_728_p3 <= 
        a_assign_reg_1152 when (tmp_i_fu_302_p2(0) = '1') else 
        ap_const_lv32_0;
    a_assign_fu_721_p3 <= 
        ap_const_lv32_0 when (tmp_86_reg_1093(0) = '1') else 
        tmp_104_fu_717_p1;
    a_fu_544_p2 <= (tmp_88_fu_538_p2 and icmp_fu_507_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_V_V_empty_n, exitcond1_fu_313_p2)
    begin
                ap_block_state2 <= ((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6, exitcond_fu_381_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_381_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond1_fu_313_p2 <= "1" when (j_reg_254 = ap_const_lv7_78) else "0";
    exitcond2_fu_329_p2 <= "1" when (i_reg_277 = ap_const_lv7_54) else "0";
    exitcond_fu_381_p2 <= "1" when (i1_reg_288 = ap_const_lv7_54) else "0";
    fc2_layer_bias_V_address0 <= tmp_85_fu_393_p1(7 - 1 downto 0);

    fc2_layer_bias_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc2_layer_bias_V_ce0 <= ap_const_logic_1;
        else 
            fc2_layer_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_layer_weights_V_address0 <= tmp_8_cast_fu_356_p1(14 - 1 downto 0);

    fc2_layer_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_layer_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc2_layer_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1015_p0 <= tmp_s_reg_1036(16 - 1 downto 0);
    grp_fu_1015_p2 <= (p_Val2_16_reg_1064 & ap_const_lv11_0);
    i_6_fu_335_p2 <= std_logic_vector(unsigned(i_reg_277) + unsigned(ap_const_lv7_1));
    i_7_fu_387_p2 <= std_logic_vector(unsigned(i1_reg_288) + unsigned(ap_const_lv7_1));
    icmp3_fu_856_p2 <= "1" when (tmp_139_fu_846_p4 = ap_const_lv8_0) else "0";
    icmp_fu_507_p2 <= "1" when (signed(tmp_110_fu_497_p4) > signed(ap_const_lv31_0)) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond1_fu_313_p2)
    begin
        if (((exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond1_fu_313_p2)
    begin
        if ((not(((exitcond1_fu_313_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond_fu_381_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_381_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_735_p1 <= d_assign_fu_299_p1;
    ireg_V_to_int_fu_862_p1 <= a_assign_2_reg_1158;
    j_4_fu_319_p2 <= std_logic_vector(unsigned(j_reg_254) + unsigned(ap_const_lv7_1));
    
    l_fu_470_p3_proc : process(p_Result_30_fu_462_p3)
    begin
        l_fu_470_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_30_fu_462_p3(i) = '1' then
                l_fu_470_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_399_p0 <= output_V_q0;
        lhs_V_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_399_p0),17));

    lsb_index_fu_491_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(tmp_87_fu_482_p2));
    m_10_fu_639_p3 <= 
        tmp_111_cast_fu_620_p1 when (tmp_93_reg_1137(0) = '1') else 
        tmp_100_fu_633_p2;
    m_11_fu_649_p2 <= std_logic_vector(unsigned(tmp_101_fu_646_p1) + unsigned(m_10_fu_639_p3));
    m_14_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1142),64));
    m_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_19_reg_1104),32));
    m_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_19_reg_1104),64));
    man_V_3_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_33_fu_781_p1));
    man_V_4_fu_791_p3 <= 
        man_V_3_fu_785_p2 when (p_Result_32_reg_1164(0) = '1') else 
        p_Result_33_fu_781_p1;
    newSel4_fu_951_p3 <= 
        tmp_116_fu_873_p3 when (sel_tmp9_fu_915_p2(0) = '1') else 
        tmp_138_fu_836_p1;
    newSel5_fu_1002_p3 <= 
        newSel_fu_995_p3 when (or_cond_reg_1206(0) = '1') else 
        newSel4_reg_1211;
    newSel_fu_995_p3 <= 
        tmp_117_fu_990_p2 when (sel_tmp3_reg_1201(0) = '1') else 
        tmp_140_fu_986_p1;
    next_mul_fu_307_p2 <= std_logic_vector(unsigned(phi_mul_reg_265) + unsigned(ap_const_lv14_54));
    or_cond3_fu_959_p2 <= (sel_tmp9_fu_915_p2 or sel_tmp2_fu_886_p2);
    or_cond4_fu_965_p2 <= (or_cond_fu_945_p2 or or_cond3_fu_959_p2);
    or_cond_fu_945_p2 <= (sel_tmp_fu_921_p2 or sel_tmp3_fu_939_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= tmp_V_reg_1221;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state16)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, output_V_addr_5_reg_1054, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_97_fu_341_p1, tmp_85_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= tmp_85_fu_393_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= output_V_addr_5_reg_1054;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= tmp_97_fu_341_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, grp_fu_1015_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d0 <= grp_fu_1015_p3(26 downto 11);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv16_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_7_trunc_fu_688_p2 <= std_logic_vector(unsigned(tmp_102_fu_683_p2) + unsigned(tmp_144_cast_cast_ca_fu_676_p3));
    p_Result_24_fu_533_p2 <= (tmp_V_23_cast_reg_1110 and tmp_127_fu_527_p2);
    p_Result_25_fu_570_p3 <= tmp_V_23_cast_reg_1110(to_integer(unsigned(tmp_89_fu_564_p2)) downto to_integer(unsigned(tmp_89_fu_564_p2))) when (to_integer(unsigned(tmp_89_fu_564_p2))>= 0 and to_integer(unsigned(tmp_89_fu_564_p2))<=16) else "-";
    p_Result_30_fu_462_p3 <= (ap_const_lv15_7FFF & p_Result_s_fu_452_p4);
    p_Result_31_fu_701_p5 <= (m_14_fu_673_p1(63 downto 32) & tmp_103_fu_694_p3 & m_14_fu_673_p1(22 downto 0));
    p_Result_33_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_774_p3),54));
    
    p_Result_s_fu_452_p4_proc : process(tmp_V_23_cast_fu_448_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_s_fu_452_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_23_cast_fu_448_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_s_fu_452_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_s_fu_452_p4_i) := tmp_V_23_cast_fu_448_p1(17-1-p_Result_s_fu_452_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_452_p4 <= resvalue(17-1 downto 0);
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev_fu_558_p2 <= (tmp_131_fu_550_p3 xor ap_const_lv1_1);
    rhs_V_fu_403_p0 <= fc2_layer_bias_V_q0;
        rhs_V_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_403_p0),17));

    sel_tmp1_fu_881_p2 <= (tmp_107_reg_1179 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_927_p2 <= (tmp_108_fu_804_p2 or sel_tmp6_demorgan_fu_892_p2);
    sel_tmp2_fu_886_p2 <= (tmp_112_fu_830_p2 and sel_tmp1_fu_881_p2);
    sel_tmp3_fu_939_p2 <= (sel_tmp5_fu_933_p2 and icmp3_fu_856_p2);
    sel_tmp5_fu_933_p2 <= (sel_tmp21_demorgan_fu_927_p2 xor ap_const_lv1_1);
    sel_tmp6_demorgan_fu_892_p2 <= (tmp_112_fu_830_p2 or tmp_107_reg_1179);
    sel_tmp6_fu_897_p2 <= (sel_tmp6_demorgan_fu_892_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_903_p2 <= (tmp_108_fu_804_p2 and sel_tmp6_fu_897_p2);
    sel_tmp8_fu_909_p2 <= (tmp_113_fu_840_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_915_p2 <= (sel_tmp8_fu_909_p2 and sel_tmp7_fu_903_p2);
    sel_tmp_fu_921_p2 <= (tmp_113_fu_840_p2 and sel_tmp7_fu_903_p2);
        sh_amt_cast1_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1190),16));

        sh_amt_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1190),32));

    sh_amt_fu_822_p3 <= 
        tmp_109_fu_810_p2 when (tmp_108_fu_804_p2(0) = '1') else 
        tmp_111_fu_816_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_633_p2 <= std_logic_vector(shift_left(unsigned(m_fu_603_p1),to_integer(unsigned('0' & tmp_98_fu_629_p1(31-1 downto 0)))));
    tmp_101_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_reg_1132),64));
    tmp_102_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(tmp_133_reg_1121));
    tmp_103_fu_694_p3 <= (p_Result_29_reg_1098 & p_Repl2_7_trunc_fu_688_p2);
    tmp_104_fu_717_p1 <= tmp_134_fu_713_p1;
    tmp_105_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1169),12));
    tmp_106_fu_774_p3 <= (ap_const_lv1_1 & tmp_137_reg_1174);
    tmp_107_fu_765_p2 <= "1" when (tmp_135_fu_739_p1 = ap_const_lv63_0) else "0";
    tmp_108_fu_804_p2 <= "1" when (signed(F2_fu_798_p2) > signed(ap_const_lv12_B)) else "0";
    tmp_109_fu_810_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_798_p2));
    tmp_110_fu_497_p4 <= lsb_index_fu_491_p2(31 downto 1);
    tmp_111_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_614_p2),64));
    tmp_111_fu_816_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_798_p2));
    tmp_112_fu_830_p2 <= "1" when (F2_fu_798_p2 = ap_const_lv12_B) else "0";
    tmp_113_fu_840_p2 <= "1" when (unsigned(sh_amt_fu_822_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_114_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_974_p1),54));
    tmp_115_fu_981_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_1185),to_integer(unsigned('0' & tmp_114_fu_977_p1(31-1 downto 0)))));
    tmp_116_fu_873_p3 <= 
        ap_const_lv16_FFFF when (tmp_141_fu_865_p3(0) = '1') else 
        ap_const_lv16_0;
    tmp_117_fu_990_p2 <= std_logic_vector(shift_left(unsigned(tmp_138_reg_1196),to_integer(unsigned('0' & sh_amt_cast1_fu_971_p1(16-1 downto 0)))));
    tmp_121_fu_513_p1 <= tmp_87_fu_482_p2(5 - 1 downto 0);
    tmp_123_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(tmp_121_fu_513_p1));
    tmp_126_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_517_p2),17));
    tmp_127_fu_527_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & tmp_126_fu_523_p1(17-1 downto 0)))));
    tmp_131_fu_550_p3 <= lsb_index_fu_491_p2(31 downto 31);
    tmp_133_fu_478_p1 <= l_fu_470_p3(8 - 1 downto 0);
    tmp_134_fu_713_p1 <= p_Result_31_fu_701_p5(32 - 1 downto 0);
    tmp_135_fu_739_p1 <= ireg_V_fu_735_p1(63 - 1 downto 0);
    tmp_137_fu_761_p1 <= ireg_V_fu_735_p1(52 - 1 downto 0);
    tmp_138_fu_836_p1 <= man_V_4_fu_791_p3(16 - 1 downto 0);
    tmp_139_fu_846_p4 <= sh_amt_fu_822_p3(11 downto 4);
    tmp_140_fu_986_p1 <= tmp_115_fu_981_p2(16 - 1 downto 0);
    tmp_141_fu_865_p3 <= ireg_V_to_int_fu_862_p1(31 downto 31);
    tmp_144_cast_cast_ca_fu_676_p3 <= 
        ap_const_lv8_7F when (tmp_132_reg_1147(0) = '1') else 
        ap_const_lv8_7E;
    tmp_1_fu_407_p0 <= fc2_layer_bias_V_q0;
        tmp_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_407_p0),16));

    tmp_85_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_288),64));
    tmp_86_fu_423_p2 <= "1" when (tmp_V_18_fu_411_p2 = ap_const_lv17_0) else "0";
    tmp_87_fu_482_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_reg_1116));
    tmp_88_fu_538_p2 <= "0" when (p_Result_24_fu_533_p2 = ap_const_lv17_0) else "1";
    tmp_89_fu_564_p2 <= std_logic_vector(signed(ap_const_lv17_1FFE8) + signed(tmp_fu_487_p1));
    tmp_8_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_350_p2),64));
    tmp_8_fu_350_p2 <= std_logic_vector(unsigned(tmp_97_cast_fu_346_p1) + unsigned(phi_mul_reg_265));
    tmp_90_fu_577_p2 <= (rev_fu_558_p2 and p_Result_25_fu_570_p3);
    tmp_91_fu_583_p2 <= (tmp_90_fu_577_p2 or a_fu_544_p2);
    tmp_92_fu_589_p3 <= (ap_const_lv31_0 & tmp_91_fu_583_p2);
    tmp_93_fu_597_p2 <= "1" when (signed(lsb_index_fu_491_p2) > signed(ap_const_lv32_0)) else "0";
    tmp_94_fu_609_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(tmp_87_reg_1126));
    tmp_95_fu_614_p2 <= std_logic_vector(shift_right(unsigned(m_cast_fu_606_p1),to_integer(unsigned('0' & tmp_94_fu_609_p2(31-1 downto 0)))));
    tmp_96_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(tmp_87_reg_1126));
    tmp_97_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_277),14));
    tmp_97_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_277),64));
    tmp_98_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_624_p2),64));
    tmp_V_18_fu_411_p2 <= std_logic_vector(signed(rhs_V_fu_403_p1) + signed(lhs_V_fu_399_p1));
    tmp_V_19_fu_442_p3 <= 
        tmp_V_cast_fu_437_p2 when (p_Result_29_reg_1098(0) = '1') else 
        tmp_V_22_cast_reg_1087;
    tmp_V_22_cast_fu_417_p1 <= output_V_q0;
    tmp_V_22_cast_fu_417_p2 <= std_logic_vector(signed(tmp_1_fu_407_p1) + signed(tmp_V_22_cast_fu_417_p1));
    tmp_V_23_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_19_fu_442_p3),17));
    tmp_V_cast_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_22_cast_reg_1087));
    tmp_V_fu_1008_p3 <= 
        newSel5_fu_1002_p3 when (or_cond4_reg_1216(0) = '1') else 
        ap_const_lv16_0;
    tmp_fu_487_p1 <= tmp_87_fu_482_p2(17 - 1 downto 0);
        tmp_s_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),27));

end behav;
