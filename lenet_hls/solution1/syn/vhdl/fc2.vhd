-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_full_n : IN STD_LOGIC;
    out_V_write : OUT STD_LOGIC;
    in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_empty_n : IN STD_LOGIC;
    in_V_read : OUT STD_LOGIC );
end;


architecture behav of fc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_53 : STD_LOGIC_VECTOR (6 downto 0) := "1010011";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fc2_layer_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc2_layer_weights_ce0 : STD_LOGIC;
    signal fc2_layer_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_layer_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_layer_bias_ce0 : STD_LOGIC;
    signal fc2_layer_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond7_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal indvarinc_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_264_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_390 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal j_4_fu_276_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_398 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_288_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_411 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc2_layer_weights_lo_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_addr_5_reg_426 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_439 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc2_layer_bias_load_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_s_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_177 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_188 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_200 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i1_reg_212 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_43_cast_fu_294_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_fu_298_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_assign_to_int_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_336_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_346_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc2_fc2_layer_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc2_fc2_layer_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc2_layer_weights_U : component fc2_fc2_layer_weights
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_layer_weights_address0,
        ce0 => fc2_layer_weights_ce0,
        q0 => fc2_layer_weights_q0);

    fc2_layer_bias_U : component fc2_fc2_layer_bias
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_layer_bias_address0,
        ce0 => fc2_layer_bias_ce0,
        q0 => fc2_layer_bias_q0);

    output_U : component fc2_output
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0);

    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U38 : component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_236,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U39 : component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc2_layer_weights_lo_reg_421,
        din1 => tmp_49_reg_403,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    lenet_hls_fcmp_32ns_32ns_1_1_1_U40 : component lenet_hls_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_241,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_41_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_314_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_reg_212 <= ap_const_lv7_0;
            elsif (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i1_reg_212 <= i_6_reg_439;
            end if; 
        end if;
    end process;

    i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_reg_200 <= i_7_reg_411;
            elsif ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_200 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_166 <= indvarinc_fu_247_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_166 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_177 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_282_p2 = ap_const_lv1_1))) then 
                j_reg_177 <= j_4_reg_398;
            end if; 
        end if;
    end process;

    phi_mul_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_188 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_282_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_188 <= next_mul_reg_390;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                fc2_layer_bias_load_reg_454 <= fc2_layer_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fc2_layer_weights_lo_reg_421 <= fc2_layer_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_6_reg_439 <= i_6_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_7_reg_411 <= i_7_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_4_reg_398 <= j_4_fu_276_p2;
                next_mul_reg_390 <= next_mul_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                output_addr_5_reg_426 <= tmp_43_fu_309_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_236 <= output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_241 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_44_reg_431 <= grp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_46_reg_459 <= tmp_46_fu_374_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_49_reg_403 <= in_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_full_n, in_V_empty_n, ap_CS_fsm_state24, ap_CS_fsm_state3, exitcond7_fu_270_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond6_fu_282_p2, ap_CS_fsm_state16, exitcond_fu_314_p2, tmp_s_fu_258_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_282_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_314_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_to_int_fu_332_p1 <= reg_241;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(in_V_empty_n, exitcond7_fu_270_p2)
    begin
                ap_block_state3 <= ((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state16, exitcond_fu_314_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_314_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond6_fu_282_p2 <= "1" when (i_reg_200 = ap_const_lv7_54) else "0";
    exitcond7_fu_270_p2 <= "1" when (j_reg_177 = ap_const_lv7_78) else "0";
    exitcond_fu_314_p2 <= "1" when (i1_reg_212 = ap_const_lv7_54) else "0";
    fc2_layer_bias_address0 <= tmp_38_fu_326_p1(7 - 1 downto 0);

    fc2_layer_bias_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc2_layer_bias_ce0 <= ap_const_logic_1;
        else 
            fc2_layer_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_layer_weights_address0 <= tmp_50_cast_fu_304_p1(14 - 1 downto 0);

    fc2_layer_weights_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc2_layer_weights_ce0 <= ap_const_logic_1;
        else 
            fc2_layer_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(tmp_44_reg_431, fc2_layer_bias_load_reg_454, ap_CS_fsm_state10, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_223_p1 <= fc2_layer_bias_load_reg_454;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_223_p1 <= tmp_44_reg_431;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_6_fu_320_p2 <= std_logic_vector(unsigned(i1_reg_212) + unsigned(ap_const_lv7_1));
    i_7_fu_288_p2 <= std_logic_vector(unsigned(i_reg_200) + unsigned(ap_const_lv7_1));

    in_V_blk_n_assign_proc : process(in_V_empty_n, ap_CS_fsm_state3, exitcond7_fu_270_p2)
    begin
        if (((exitcond7_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_blk_n <= in_V_empty_n;
        else 
            in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_read_assign_proc : process(in_V_empty_n, ap_CS_fsm_state3, exitcond7_fu_270_p2)
    begin
        if ((not(((exitcond7_fu_270_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_read <= ap_const_logic_1;
        else 
            in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvarinc_fu_247_p2 <= std_logic_vector(unsigned(invdar_reg_166) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_314_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_314_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_276_p2 <= std_logic_vector(unsigned(j_reg_177) + unsigned(ap_const_lv7_1));
    next_mul_fu_264_p2 <= std_logic_vector(unsigned(phi_mul_reg_188) + unsigned(ap_const_lv14_54));
    notlhs_fu_350_p2 <= "0" when (tmp_39_fu_336_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_356_p2 <= "1" when (tmp_48_fu_346_p1 = ap_const_lv23_0) else "0";

    out_V_blk_n_assign_proc : process(out_V_full_n, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            out_V_blk_n <= out_V_full_n;
        else 
            out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_din <= tmp_46_reg_459;

    out_V_write_assign_proc : process(out_V_full_n, ap_CS_fsm_state24)
    begin
        if (((out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            out_V_write <= ap_const_logic_1;
        else 
            out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_5_reg_426, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state15, tmp_fu_253_p1, tmp_43_fu_309_p1, tmp_38_fu_326_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_address0 <= tmp_38_fu_326_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_address0 <= output_addr_5_reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_address0 <= tmp_43_fu_309_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_address0 <= tmp_fu_253_p1(7 - 1 downto 0);
        else 
            output_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_ce0 <= ap_const_logic_1;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(reg_241, ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_d0 <= reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_d0 <= ap_const_lv32_0;
        else 
            output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_38_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_212),64));
    tmp_39_fu_336_p4 <= a_assign_to_int_fu_332_p1(30 downto 23);
    tmp_40_fu_362_p2 <= (notrhs_fu_356_p2 or notlhs_fu_350_p2);
    tmp_42_fu_368_p2 <= (tmp_41_fu_231_p2 and tmp_40_fu_362_p2);
    tmp_43_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_200),14));
    tmp_43_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_200),64));
    tmp_46_fu_374_p3 <= 
        reg_241 when (tmp_42_fu_368_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_47_fu_298_p2 <= std_logic_vector(unsigned(phi_mul_reg_188) + unsigned(tmp_43_cast_fu_294_p1));
    tmp_48_fu_346_p1 <= a_assign_to_int_fu_332_p1(23 - 1 downto 0);
    tmp_50_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_298_p2),64));
    tmp_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_166),64));
    tmp_s_fu_258_p2 <= "1" when (invdar_reg_166 = ap_const_lv7_53) else "0";
end behav;
