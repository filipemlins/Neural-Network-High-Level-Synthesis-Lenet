-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_hls is
port (
    image_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    image_in_V_V_empty_n : IN STD_LOGIC;
    image_in_V_V_read : OUT STD_LOGIC;
    fc3_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    fc3_out_V_V_full_n : IN STD_LOGIC;
    fc3_out_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of lenet_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet_hls,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=447746,HLS_SYN_TPT=447747,HLS_SYN_MEM=227,HLS_SYN_DSP=14,HLS_SYN_FF=51602,HLS_SYN_LUT=36817,HLS_VERSION=2018_3}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal conv1_U0_ap_start : STD_LOGIC;
    signal conv1_U0_ap_done : STD_LOGIC;
    signal conv1_U0_ap_continue : STD_LOGIC;
    signal conv1_U0_ap_idle : STD_LOGIC;
    signal conv1_U0_ap_ready : STD_LOGIC;
    signal conv1_U0_start_out : STD_LOGIC;
    signal conv1_U0_start_write : STD_LOGIC;
    signal conv1_U0_conv1_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_U0_conv1_out_V_V_write : STD_LOGIC;
    signal conv1_U0_in_V_V_read : STD_LOGIC;
    signal pool1_U0_ap_start : STD_LOGIC;
    signal pool1_U0_ap_done : STD_LOGIC;
    signal pool1_U0_ap_continue : STD_LOGIC;
    signal pool1_U0_ap_idle : STD_LOGIC;
    signal pool1_U0_ap_ready : STD_LOGIC;
    signal pool1_U0_start_out : STD_LOGIC;
    signal pool1_U0_start_write : STD_LOGIC;
    signal pool1_U0_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pool1_U0_out_V_V_write : STD_LOGIC;
    signal pool1_U0_in_V_V_read : STD_LOGIC;
    signal conv2_U0_ap_start : STD_LOGIC;
    signal conv2_U0_ap_done : STD_LOGIC;
    signal conv2_U0_ap_continue : STD_LOGIC;
    signal conv2_U0_ap_idle : STD_LOGIC;
    signal conv2_U0_ap_ready : STD_LOGIC;
    signal conv2_U0_start_out : STD_LOGIC;
    signal conv2_U0_start_write : STD_LOGIC;
    signal conv2_U0_conv2_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_U0_conv2_out_V_V_write : STD_LOGIC;
    signal conv2_U0_in_V_V_read : STD_LOGIC;
    signal pool2_U0_ap_start : STD_LOGIC;
    signal pool2_U0_ap_done : STD_LOGIC;
    signal pool2_U0_ap_continue : STD_LOGIC;
    signal pool2_U0_ap_idle : STD_LOGIC;
    signal pool2_U0_ap_ready : STD_LOGIC;
    signal pool2_U0_start_out : STD_LOGIC;
    signal pool2_U0_start_write : STD_LOGIC;
    signal pool2_U0_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pool2_U0_out_V_V_write : STD_LOGIC;
    signal pool2_U0_in_V_V_read : STD_LOGIC;
    signal fc1_U0_ap_start : STD_LOGIC;
    signal fc1_U0_ap_done : STD_LOGIC;
    signal fc1_U0_ap_continue : STD_LOGIC;
    signal fc1_U0_ap_idle : STD_LOGIC;
    signal fc1_U0_ap_ready : STD_LOGIC;
    signal fc1_U0_start_out : STD_LOGIC;
    signal fc1_U0_start_write : STD_LOGIC;
    signal fc1_U0_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_U0_out_V_V_write : STD_LOGIC;
    signal fc1_U0_in_V_V_read : STD_LOGIC;
    signal fc2_U0_ap_start : STD_LOGIC;
    signal fc2_U0_ap_done : STD_LOGIC;
    signal fc2_U0_ap_continue : STD_LOGIC;
    signal fc2_U0_ap_idle : STD_LOGIC;
    signal fc2_U0_ap_ready : STD_LOGIC;
    signal fc2_U0_start_out : STD_LOGIC;
    signal fc2_U0_start_write : STD_LOGIC;
    signal fc2_U0_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2_U0_out_V_V_write : STD_LOGIC;
    signal fc2_U0_in_V_V_read : STD_LOGIC;
    signal fc3_U0_ap_start : STD_LOGIC;
    signal fc3_U0_ap_done : STD_LOGIC;
    signal fc3_U0_ap_continue : STD_LOGIC;
    signal fc3_U0_ap_idle : STD_LOGIC;
    signal fc3_U0_ap_ready : STD_LOGIC;
    signal fc3_U0_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal fc3_U0_out_V_V_write : STD_LOGIC;
    signal fc3_U0_in_V_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal conv1_out_V_V_full_n : STD_LOGIC;
    signal conv1_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_out_V_V_empty_n : STD_LOGIC;
    signal pool1_out_V_V_full_n : STD_LOGIC;
    signal pool1_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pool1_out_V_V_empty_n : STD_LOGIC;
    signal conv2_out_V_V_full_n : STD_LOGIC;
    signal conv2_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_out_V_V_empty_n : STD_LOGIC;
    signal pool2_out_V_V_full_n : STD_LOGIC;
    signal pool2_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pool2_out_V_V_empty_n : STD_LOGIC;
    signal fc1_out_V_V_full_n : STD_LOGIC;
    signal fc1_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_out_V_V_empty_n : STD_LOGIC;
    signal fc2_out_V_V_full_n : STD_LOGIC;
    signal fc2_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2_out_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_pool1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool1_U0_full_n : STD_LOGIC;
    signal start_for_pool1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool1_U0_empty_n : STD_LOGIC;
    signal start_for_conv2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_full_n : STD_LOGIC;
    signal start_for_conv2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_empty_n : STD_LOGIC;
    signal start_for_pool2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool2_U0_full_n : STD_LOGIC;
    signal start_for_pool2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool2_U0_empty_n : STD_LOGIC;
    signal start_for_fc1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc1_U0_full_n : STD_LOGIC;
    signal start_for_fc1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc1_U0_empty_n : STD_LOGIC;
    signal start_for_fc2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc2_U0_full_n : STD_LOGIC;
    signal start_for_fc2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc2_U0_empty_n : STD_LOGIC;
    signal start_for_fc3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc3_U0_full_n : STD_LOGIC;
    signal start_for_fc3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fc3_U0_empty_n : STD_LOGIC;
    signal fc3_U0_start_full_n : STD_LOGIC;
    signal fc3_U0_start_write : STD_LOGIC;

    component conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv1_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv1_out_V_V_full_n : IN STD_LOGIC;
        conv1_out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component pool1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv2_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv2_out_V_V_full_n : IN STD_LOGIC;
        conv2_out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component pool2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component fc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component fc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component fc3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fc1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fc2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fc3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    conv1_U0 : component conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv1_U0_ap_start,
        start_full_n => start_for_pool1_U0_full_n,
        ap_done => conv1_U0_ap_done,
        ap_continue => conv1_U0_ap_continue,
        ap_idle => conv1_U0_ap_idle,
        ap_ready => conv1_U0_ap_ready,
        start_out => conv1_U0_start_out,
        start_write => conv1_U0_start_write,
        conv1_out_V_V_din => conv1_U0_conv1_out_V_V_din,
        conv1_out_V_V_full_n => conv1_out_V_V_full_n,
        conv1_out_V_V_write => conv1_U0_conv1_out_V_V_write,
        in_V_V_dout => image_in_V_V_dout,
        in_V_V_empty_n => image_in_V_V_empty_n,
        in_V_V_read => conv1_U0_in_V_V_read);

    pool1_U0 : component pool1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool1_U0_ap_start,
        start_full_n => start_for_conv2_U0_full_n,
        ap_done => pool1_U0_ap_done,
        ap_continue => pool1_U0_ap_continue,
        ap_idle => pool1_U0_ap_idle,
        ap_ready => pool1_U0_ap_ready,
        start_out => pool1_U0_start_out,
        start_write => pool1_U0_start_write,
        out_V_V_din => pool1_U0_out_V_V_din,
        out_V_V_full_n => pool1_out_V_V_full_n,
        out_V_V_write => pool1_U0_out_V_V_write,
        in_V_V_dout => conv1_out_V_V_dout,
        in_V_V_empty_n => conv1_out_V_V_empty_n,
        in_V_V_read => pool1_U0_in_V_V_read);

    conv2_U0 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv2_U0_ap_start,
        start_full_n => start_for_pool2_U0_full_n,
        ap_done => conv2_U0_ap_done,
        ap_continue => conv2_U0_ap_continue,
        ap_idle => conv2_U0_ap_idle,
        ap_ready => conv2_U0_ap_ready,
        start_out => conv2_U0_start_out,
        start_write => conv2_U0_start_write,
        conv2_out_V_V_din => conv2_U0_conv2_out_V_V_din,
        conv2_out_V_V_full_n => conv2_out_V_V_full_n,
        conv2_out_V_V_write => conv2_U0_conv2_out_V_V_write,
        in_V_V_dout => pool1_out_V_V_dout,
        in_V_V_empty_n => pool1_out_V_V_empty_n,
        in_V_V_read => conv2_U0_in_V_V_read);

    pool2_U0 : component pool2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool2_U0_ap_start,
        start_full_n => start_for_fc1_U0_full_n,
        ap_done => pool2_U0_ap_done,
        ap_continue => pool2_U0_ap_continue,
        ap_idle => pool2_U0_ap_idle,
        ap_ready => pool2_U0_ap_ready,
        start_out => pool2_U0_start_out,
        start_write => pool2_U0_start_write,
        out_V_V_din => pool2_U0_out_V_V_din,
        out_V_V_full_n => pool2_out_V_V_full_n,
        out_V_V_write => pool2_U0_out_V_V_write,
        in_V_V_dout => conv2_out_V_V_dout,
        in_V_V_empty_n => conv2_out_V_V_empty_n,
        in_V_V_read => pool2_U0_in_V_V_read);

    fc1_U0 : component fc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fc1_U0_ap_start,
        start_full_n => start_for_fc2_U0_full_n,
        ap_done => fc1_U0_ap_done,
        ap_continue => fc1_U0_ap_continue,
        ap_idle => fc1_U0_ap_idle,
        ap_ready => fc1_U0_ap_ready,
        start_out => fc1_U0_start_out,
        start_write => fc1_U0_start_write,
        out_V_V_din => fc1_U0_out_V_V_din,
        out_V_V_full_n => fc1_out_V_V_full_n,
        out_V_V_write => fc1_U0_out_V_V_write,
        in_V_V_dout => pool2_out_V_V_dout,
        in_V_V_empty_n => pool2_out_V_V_empty_n,
        in_V_V_read => fc1_U0_in_V_V_read);

    fc2_U0 : component fc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fc2_U0_ap_start,
        start_full_n => start_for_fc3_U0_full_n,
        ap_done => fc2_U0_ap_done,
        ap_continue => fc2_U0_ap_continue,
        ap_idle => fc2_U0_ap_idle,
        ap_ready => fc2_U0_ap_ready,
        start_out => fc2_U0_start_out,
        start_write => fc2_U0_start_write,
        out_V_V_din => fc2_U0_out_V_V_din,
        out_V_V_full_n => fc2_out_V_V_full_n,
        out_V_V_write => fc2_U0_out_V_V_write,
        in_V_V_dout => fc1_out_V_V_dout,
        in_V_V_empty_n => fc1_out_V_V_empty_n,
        in_V_V_read => fc2_U0_in_V_V_read);

    fc3_U0 : component fc3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fc3_U0_ap_start,
        ap_done => fc3_U0_ap_done,
        ap_continue => fc3_U0_ap_continue,
        ap_idle => fc3_U0_ap_idle,
        ap_ready => fc3_U0_ap_ready,
        out_V_V_din => fc3_U0_out_V_V_din,
        out_V_V_full_n => fc3_out_V_V_full_n,
        out_V_V_write => fc3_U0_out_V_V_write,
        in_V_V_dout => fc2_out_V_V_dout,
        in_V_V_empty_n => fc2_out_V_V_empty_n,
        in_V_V_read => fc3_U0_in_V_V_read);

    conv1_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv1_U0_conv1_out_V_V_din,
        if_full_n => conv1_out_V_V_full_n,
        if_write => conv1_U0_conv1_out_V_V_write,
        if_dout => conv1_out_V_V_dout,
        if_empty_n => conv1_out_V_V_empty_n,
        if_read => pool1_U0_in_V_V_read);

    pool1_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool1_U0_out_V_V_din,
        if_full_n => pool1_out_V_V_full_n,
        if_write => pool1_U0_out_V_V_write,
        if_dout => pool1_out_V_V_dout,
        if_empty_n => pool1_out_V_V_empty_n,
        if_read => conv2_U0_in_V_V_read);

    conv2_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv2_U0_conv2_out_V_V_din,
        if_full_n => conv2_out_V_V_full_n,
        if_write => conv2_U0_conv2_out_V_V_write,
        if_dout => conv2_out_V_V_dout,
        if_empty_n => conv2_out_V_V_empty_n,
        if_read => pool2_U0_in_V_V_read);

    pool2_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool2_U0_out_V_V_din,
        if_full_n => pool2_out_V_V_full_n,
        if_write => pool2_U0_out_V_V_write,
        if_dout => pool2_out_V_V_dout,
        if_empty_n => pool2_out_V_V_empty_n,
        if_read => fc1_U0_in_V_V_read);

    fc1_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fc1_U0_out_V_V_din,
        if_full_n => fc1_out_V_V_full_n,
        if_write => fc1_U0_out_V_V_write,
        if_dout => fc1_out_V_V_dout,
        if_empty_n => fc1_out_V_V_empty_n,
        if_read => fc2_U0_in_V_V_read);

    fc2_out_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fc2_U0_out_V_V_din,
        if_full_n => fc2_out_V_V_full_n,
        if_write => fc2_U0_out_V_V_write,
        if_dout => fc2_out_V_V_dout,
        if_empty_n => fc2_out_V_V_empty_n,
        if_read => fc3_U0_in_V_V_read);

    start_for_pool1_U0_U : component start_for_pool1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool1_U0_din,
        if_full_n => start_for_pool1_U0_full_n,
        if_write => conv1_U0_start_write,
        if_dout => start_for_pool1_U0_dout,
        if_empty_n => start_for_pool1_U0_empty_n,
        if_read => pool1_U0_ap_ready);

    start_for_conv2_U0_U : component start_for_conv2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv2_U0_din,
        if_full_n => start_for_conv2_U0_full_n,
        if_write => pool1_U0_start_write,
        if_dout => start_for_conv2_U0_dout,
        if_empty_n => start_for_conv2_U0_empty_n,
        if_read => conv2_U0_ap_ready);

    start_for_pool2_U0_U : component start_for_pool2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool2_U0_din,
        if_full_n => start_for_pool2_U0_full_n,
        if_write => conv2_U0_start_write,
        if_dout => start_for_pool2_U0_dout,
        if_empty_n => start_for_pool2_U0_empty_n,
        if_read => pool2_U0_ap_ready);

    start_for_fc1_U0_U : component start_for_fc1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fc1_U0_din,
        if_full_n => start_for_fc1_U0_full_n,
        if_write => pool2_U0_start_write,
        if_dout => start_for_fc1_U0_dout,
        if_empty_n => start_for_fc1_U0_empty_n,
        if_read => fc1_U0_ap_ready);

    start_for_fc2_U0_U : component start_for_fc2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fc2_U0_din,
        if_full_n => start_for_fc2_U0_full_n,
        if_write => fc1_U0_start_write,
        if_dout => start_for_fc2_U0_dout,
        if_empty_n => start_for_fc2_U0_empty_n,
        if_read => fc2_U0_ap_ready);

    start_for_fc3_U0_U : component start_for_fc3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fc3_U0_din,
        if_full_n => start_for_fc3_U0_full_n,
        if_write => fc2_U0_start_write,
        if_dout => start_for_fc3_U0_dout,
        if_empty_n => start_for_fc3_U0_empty_n,
        if_read => fc3_U0_ap_ready);




    ap_done <= fc3_U0_ap_done;
    ap_idle <= (pool2_U0_ap_idle and pool1_U0_ap_idle and fc3_U0_ap_idle and fc2_U0_ap_idle and fc1_U0_ap_idle and conv2_U0_ap_idle and conv1_U0_ap_idle);
    ap_ready <= conv1_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= fc3_U0_ap_done;
    ap_sync_ready <= conv1_U0_ap_ready;
    conv1_U0_ap_continue <= ap_const_logic_1;
    conv1_U0_ap_start <= ap_start;
    conv2_U0_ap_continue <= ap_const_logic_1;
    conv2_U0_ap_start <= start_for_conv2_U0_empty_n;
    fc1_U0_ap_continue <= ap_const_logic_1;
    fc1_U0_ap_start <= start_for_fc1_U0_empty_n;
    fc2_U0_ap_continue <= ap_const_logic_1;
    fc2_U0_ap_start <= start_for_fc2_U0_empty_n;
    fc3_U0_ap_continue <= ap_const_logic_1;
    fc3_U0_ap_start <= start_for_fc3_U0_empty_n;
    fc3_U0_start_full_n <= ap_const_logic_1;
    fc3_U0_start_write <= ap_const_logic_0;
    fc3_out_V_V_din <= fc3_U0_out_V_V_din;
    fc3_out_V_V_write <= fc3_U0_out_V_V_write;
    image_in_V_V_read <= conv1_U0_in_V_V_read;
    pool1_U0_ap_continue <= ap_const_logic_1;
    pool1_U0_ap_start <= start_for_pool1_U0_empty_n;
    pool2_U0_ap_continue <= ap_const_logic_1;
    pool2_U0_ap_start <= start_for_pool2_U0_empty_n;
    start_for_conv2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fc1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fc2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fc3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
