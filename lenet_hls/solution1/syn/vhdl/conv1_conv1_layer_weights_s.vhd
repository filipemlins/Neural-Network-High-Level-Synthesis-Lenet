-- ==============================================================
-- File generated on Wed Jun 17 16:36:36 -03 2020
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv1_conv1_layer_weights_s_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv1_conv1_layer_weights_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000111101011010001110", 
    1 => "10111100110000011100001011001011", 
    2 => "00111110001111010000010110110001", 
    3 => "00111110110011110000001001111101", 
    4 => "00111110010011000011011001000100", 
    5 => "00111110011110110001011111010111", 
    6 => "00111101000010110011011000100101", 
    7 => "00111110010100101011100011111111", 
    8 => "10111101011100010010110010000010", 
    9 => "00111101100010110010100011100101", 
    10 => "00111101000111110111001000101111", 
    11 => "00111110100001111011000000011010", 
    12 => "10111110010011101011110101001001", 
    13 => "10111101100101100000011011010000", 
    14 => "00111101110000000011001111000110", 
    15 => "00111110000000010010000010001011", 
    16 => "00111110110010101001110000011001", 
    17 => "00111110110101001011010110110111", 
    18 => "00111101001010111001110100101000", 
    19 => "10111101111100110100100100010000", 
    20 => "00111101101111000010110100011001", 
    21 => "00111101101111010100110001001111", 
    22 => "10111100011010011110111111100100", 
    23 => "10111110011010101100011010010000", 
    24 => "00111101001101001010110000101111", 
    25 => "00111101111000011101100011110110", 
    26 => "00111110011001011100010110011101", 
    27 => "00111110110001000101000100110001", 
    28 => "10111110001010110010100011110001", 
    29 => "10111100011011100001101010101101", 
    30 => "00111110100011011010001000101001", 
    31 => "00111110111110001001011111100010", 
    32 => "10111001111001000000011000100001", 
    33 => "00111110000011111010101010100011", 
    34 => "10111101001010010100111001101011", 
    35 => "10111110011000000011101100111010", 
    36 => "10111110000110011110001001000011", 
    37 => "10111101010110111000111010111110", 
    38 => "10111100111100110101000111110010", 
    39 => "00111110010101111100000001111111", 
    40 => "10111101100100111001011110110101", 
    41 => "10111010100000000111101011000001", 
    42 => "00111110000111000110101110011010", 
    43 => "00111101100000001101001101111100", 
    44 => "00111110100010110101100000011110", 
    45 => "10111101010010000000111011010101", 
    46 => "10111011110001010011001101111101", 
    47 => "10111100110100110000001111011000", 
    48 => "10111110100000111000100101100000", 
    49 => "10111101110011100111110000101000", 
    50 => "00111110000101010111100110000100", 
    51 => "00111110110011000100010111011101", 
    52 => "10111110100110110101011110100001", 
    53 => "10111101110011001001100001111101", 
    54 => "00111011101111010111010001000001", 
    55 => "00111110111111011100101010011000", 
    56 => "10111110101001101100001010100000", 
    57 => "10111110001000110010101010011111", 
    58 => "00111110100111111100000101000110", 
    59 => "00111110100101110101000100000101", 
    60 => "00111011110001111010101110111101", 
    61 => "00111110000011110101110101110111", 
    62 => "00111110110001000100010010110000", 
    63 => "00111110110101000100001001001101", 
    64 => "00111110010110110001011110000011", 
    65 => "10111110101000010010000101001100", 
    66 => "10111110100110000010100100100010", 
    67 => "10111110101110110010110111110001", 
    68 => "00111110011111010010001110100011", 
    69 => "00111110110001101000110010101000", 
    70 => "00111110100011010110101101111010", 
    71 => "00111101100010010101100110111010", 
    72 => "00111101110111010001111111001000", 
    73 => "00111110000100001100111011011010", 
    74 => "00111110101110010001000010001001", 
    75 => "00111110110000100010010011100111", 
    76 => "10111110010110000101110000100111", 
    77 => "10111101100001010110000010101001", 
    78 => "10111110000101101011011001110000", 
    79 => "10111100101110011000010000011001", 
    80 => "00111101110110110110100100110100", 
    81 => "00111110011101110100001010110100", 
    82 => "00111110100011111011001110001110", 
    83 => "00111110110100101101110000101000", 
    84 => "10111101001000100001110000000001", 
    85 => "00111110001101010111100010100111", 
    86 => "00111110000000100001100101001100", 
    87 => "00111110100111011111010100111111", 
    88 => "10111110001101001110110010001010", 
    89 => "10111110100001111000111100100111", 
    90 => "10111110001001111001011111010010", 
    91 => "10111110001110001110000011101000", 
    92 => "10111101110110010101000111011111", 
    93 => "10111110101010010001100100000001", 
    94 => "10111110010110110111111111101011", 
    95 => "10111110110001010010111011101100", 
    96 => "00111110000110001100101111000001", 
    97 => "00111110100100001011001110101100", 
    98 => "00111110001000011000111111110111", 
    99 => "00111101100011011100001010101011", 
    100 => "10111110011010011011000110111001", 
    101 => "00111110001100001010001101010101", 
    102 => "00111110010010010001001011101100", 
    103 => "00111110100101101001100001110010", 
    104 => "10111110100010101100011100111100", 
    105 => "10111110001111010010001000000010", 
    106 => "00111101000000100000011011010011", 
    107 => "10111100101101000010111010100100", 
    108 => "10111101110010011110011010010100", 
    109 => "10111110101000100111111010011000", 
    110 => "10111101011110101101110000011011", 
    111 => "00111101100011000000011010000011", 
    112 => "10111101100001101100011000011010", 
    113 => "10111100100010110011001111000110", 
    114 => "10111110001110010011110101101110", 
    115 => "00111100100000110100010001001101", 
    116 => "10111110010001010101111111011100", 
    117 => "00111101010001101000011000001011", 
    118 => "00111101010100111000011111100001", 
    119 => "10111100111001111001011010111101", 
    120 => "10111110000001111010100001111010", 
    121 => "00111110000000100000000100011100", 
    122 => "00111101110000101000001100101111", 
    123 => "00111101100011010001010011001100", 
    124 => "10111110011101111110100010000111", 
    125 => "10111101100011110111110111010011", 
    126 => "00111110010111000011110101010100", 
    127 => "10111101101001010001010100011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv1_conv1_layer_weights_s is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv1_conv1_layer_weights_s is
    component conv1_conv1_layer_weights_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv1_conv1_layer_weights_s_rom_U :  component conv1_conv1_layer_weights_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


