-- ==============================================================
-- File generated on Sat Jun 20 14:10:49 -03 2020
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv2_conv2_layer_weights_s_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv2_conv2_layer_weights_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01110100010", 1 to 2=> "11111010101", 3 => "00011110101", 
    4 => "10011110101", 5 => "11101111010", 6 => "00110010100", 
    7 => "11100001011", 8 => "01111111111", 9 => "00011010110", 
    10 => "11011010101", 11 => "01010011101", 12 => "11111000111", 
    13 => "01111111111", 14 => "01010111111", 15 => "00101111001", 
    16 => "01001010110", 17 => "00010101010", 18 => "11011111011", 
    19 => "10000111000", 20 => "10010110001", 21 => "00101000011", 
    22 => "11010001111", 23 => "01001001110", 24 => "01111111111", 
    25 => "11001100100", 26 => "11110110100", 27 => "11111111110", 
    28 => "10111001100", 29 => "10000000000", 30 => "11100011110", 
    31 => "10111110000", 32 => "11011010101", 33 => "00111000101", 
    34 => "01100001000", 35 => "01111111111", 36 => "10001011110", 
    37 => "10110101011", 38 => "00100101101", 39 => "10110010001", 
    40 => "00001011100", 41 => "00010010100", 42 => "00011010011", 
    43 => "01010101001", 44 => "00100001110", 45 => "10100011001", 
    46 => "11111010100", 47 => "00001101001", 48 => "11110100100", 
    49 => "00111001110", 50 => "00100000100", 51 => "10101000110", 
    52 => "10111100110", 53 => "10011101010", 54 => "11101011110", 
    55 => "10111111100", 56 => "11110110110", 57 => "01010000010", 
    58 => "11010000011", 59 => "00000000110", 60 => "00011101110", 
    61 => "10110011111", 62 => "00010011000", 63 => "00011101110", 
    64 => "11011110010", 65 => "11111001010", 66 => "11010100110", 
    67 => "00001010111", 68 => "11101100100", 69 => "10111100011", 
    70 => "00000111000", 71 => "11011001011", 72 => "10100100100", 
    73 => "10101000100", 74 => "01110011000", 75 => "10000101100", 
    76 => "00000011111", 77 => "11001011011", 78 => "10101001001", 
    79 => "00110100100", 80 => "00001111111", 81 => "00111000101", 
    82 => "11110010000", 83 => "00010110100", 84 => "01100011000", 
    85 => "00100110001", 86 => "11010010001", 87 => "00010111001", 
    88 => "10110101011", 89 => "10000000000", 90 => "01110000010", 
    91 => "00000000111", 92 => "00000011111", 93 => "01001010111", 
    94 => "00001001101", 95 => "11001110100", 96 => "11111000010", 
    97 => "11111010111", 98 => "11111111100", 99 => "01100101110", 
    100 => "11111110010", 101 => "11010110110", 102 => "00011111000", 
    103 => "00010001111", 104 => "11100110101", 105 => "00000101111", 
    106 => "00110001000", 107 => "11110111000", 108 => "11110010011", 
    109 => "01110101111", 110 => "11110101101", 111 => "11010001100", 
    112 => "11100101100", 113 => "11100111101", 114 => "10000001001", 
    115 => "10110011010", 116 => "00001100010", 117 => "00111101111", 
    118 => "00101100101", 119 => "00000111111", 120 => "01111010101", 
    121 => "00111010011", 122 => "01110000111", 123 => "00100010110", 
    124 => "00011001111", 125 => "10111100110", 126 => "10010001010", 
    127 => "00111111000", 128 => "00010011010", 129 => "11010011000", 
    130 => "00011111111", 131 => "10001110001", 132 => "01011101010", 
    133 => "10111010111", 134 => "10111000110", 135 => "00101101000", 
    136 => "10011000010", 137 => "00010011010", 138 => "11100110100", 
    139 => "00010110001", 140 => "11010101000", 141 => "01111101010", 
    142 => "00010000001", 143 => "11111111100", 144 => "01000010000", 
    145 => "10110100100", 146 => "00111101010", 147 => "00000011111", 
    148 => "01111111111", 149 => "01000110111", 150 => "00001000011", 
    151 => "10000110111", 152 => "00101000111", 153 => "11001010000", 
    154 => "00100001001", 155 => "01100000010", 156 => "00001010111", 
    157 => "00011110011", 158 => "11111001011", 159 => "11011111111", 
    160 => "11010111000", 161 => "11011000111", 162 => "01000011101", 
    163 => "01001100101", 164 => "10111111011", 165 => "00010111000", 
    166 => "11001111100", 167 => "11111010111", 168 => "11101101010", 
    169 => "01110011011", 170 => "11010110001", 171 => "11100100101", 
    172 => "01100100001", 173 => "10000001101", 174 => "11000000100", 
    175 => "00000100101", 176 => "00011000011", 177 => "10110000110", 
    178 => "10011001100", 179 => "01101001011", 180 => "00101100001", 
    181 => "00010000011", 182 => "00011110100", 183 => "00111101100", 
    184 => "01001111101", 185 => "10111111000", 186 => "10111010111", 
    187 => "00010010111", 188 => "11100000000", 189 => "00111110001", 
    190 => "10000000000", 191 => "10110100100", 192 => "01011010110", 
    193 => "00101010101", 194 => "00011101110", 195 => "10100011000", 
    196 => "11010101110", 197 => "01110000000", 198 => "11111010011", 
    199 => "11100010100", 200 => "00000100010", 201 => "00010000110", 
    202 => "01101001001", 203 => "01011001000", 204 => "01100100111", 
    205 => "00001011100", 206 => "11110100100", 207 => "01000010101", 
    208 => "00000100010", 209 => "10101010100", 210 => "00101010111", 
    211 => "00101010100", 212 => "00001110100", 213 => "11110100100", 
    214 => "11101001101", 215 => "10000000000", 216 => "01011001000", 
    217 => "01110000011", 218 => "11101111000", 219 => "11111000111", 
    220 => "11000011101", 221 => "01000011001", 222 => "10001111001", 
    223 => "00011101101", 224 => "11010111111", 225 => "01111100011", 
    226 => "01100001010", 227 => "10000000000", 228 => "11100111001", 
    229 => "00011001100", 230 => "00100001100", 231 => "10111111101", 
    232 => "10111111100", 233 => "01111111111", 234 => "11110011010", 
    235 => "10011111000", 236 => "00100001001", 237 => "01001110010", 
    238 => "11001110101", 239 => "10100101001", 240 => "01111101100", 
    241 => "01000101101", 242 => "00010010111", 243 => "11010100000", 
    244 => "11010101110", 245 => "11011100111", 246 => "00001001101", 
    247 => "11110011000", 248 => "10100101101", 249 => "00001010111", 
    250 => "00010110011", 251 => "00111100000", 252 => "11110010010", 
    253 => "00101000100", 254 => "01010100111", 255 => "01101011001", 
    256 => "01001010111", 257 => "01001010011", 258 => "11000101100", 
    259 => "00010100101", 260 => "00010110011", 261 => "11101010101", 
    262 => "10111010110", 263 => "01000110001", 264 => "00111011101", 
    265 => "11100100000", 266 => "10011101010", 267 => "01100101111", 
    268 => "00100101011", 269 => "01101110010", 270 => "11100111000", 
    271 => "11010001000", 272 => "00111111010", 273 => "11100111000", 
    274 => "10000001111", 275 => "10100100111", 276 => "01100000111", 
    277 => "11010001101", 278 => "11100111010", 279 => "11110100111", 
    280 => "01101010000", 281 => "11010000001", 282 => "11010111001", 
    283 => "10101010111", 284 => "00110010001", 285 => "01000010011", 
    286 => "10101010011", 287 => "01001001111", 288 => "11101110010", 
    289 => "10110100001", 290 => "01111111111", 291 => "11010011010", 
    292 => "00100010100", 293 => "01110111110", 294 => "01011111010", 
    295 => "10011110000", 296 => "00001100001", 297 => "11001010011", 
    298 => "11000101111", 299 => "01111100101", 300 => "00010001010", 
    301 => "01101010110", 302 => "00101101101", 303 => "11100001000", 
    304 => "00000011011", 305 => "01010101010", 306 => "11011000100", 
    307 => "00101101100", 308 => "11111010100", 309 => "11010001001", 
    310 => "11101011000", 311 => "00010000111", 312 => "10110110000", 
    313 => "11101101111", 314 => "00001010110", 315 => "11011111000", 
    316 => "01001100111", 317 => "10100000001", 318 => "00001011001", 
    319 => "01111010010", 320 => "11100010100", 321 => "00010100001", 
    322 => "10010101000", 323 => "11111101011", 324 => "11100010000", 
    325 => "00101101101", 326 => "01001000001", 327 => "00110001110", 
    328 => "00011011100", 329 => "01001100010", 330 => "11100111010", 
    331 => "10100001110", 332 => "10110100100", 333 => "01000110110", 
    334 => "00011010011", 335 => "11101111100", 336 => "10110101101", 
    337 => "00101100100", 338 => "01011011001", 339 => "00011110100", 
    340 => "00001110010", 341 => "01101001110", 342 => "00011111110", 
    343 => "10101101001", 344 => "00101010100", 345 => "11001110100", 
    346 => "00100110100", 347 => "11111111110", 348 => "00001000010", 
    349 => "01010010101", 350 => "11100000100", 351 => "00001010000", 
    352 => "00111110101", 353 => "00101000110", 354 => "10101011011", 
    355 => "00100101010", 356 => "11011101110", 357 => "11111101001", 
    358 => "10010110101", 359 => "10111011101", 360 => "11001100110", 
    361 => "00000100111", 362 => "00011110100", 363 => "10010010111", 
    364 => "11111110111", 365 => "00100011010", 366 => "10000000000", 
    367 => "11101111000", 368 => "00111110011", 369 => "10100011001", 
    370 => "11011111000", 371 => "00010000110", 372 => "00110000010", 
    373 => "00111000000", 374 => "01101111111", 375 => "01111000000", 
    376 => "11110000001", 377 => "00010111000", 378 => "01001110001", 
    379 => "11100110111", 380 => "11100010001", 381 => "01101101101", 
    382 => "10111010010", 383 => "01000011111", 384 => "11110001011", 
    385 => "00000111111", 386 => "00010101100", 387 => "00011001111", 
    388 => "00010101101", 389 => "11101111011", 390 => "10100110101", 
    391 => "11010010100", 392 => "00011000110", 393 => "00100111100", 
    394 => "11011101110", 395 => "00011000010", 396 => "00011101010", 
    397 => "11011100010", 398 => "11000000001", 399 => "01100111100", 
    400 => "10110101011", 401 => "11001110000", 402 => "11110110111", 
    403 => "01111010111", 404 => "11110011110", 405 => "11101010101", 
    406 => "00101110111", 407 => "01010001001", 408 => "10100010111", 
    409 => "10111101101", 410 => "11001010011", 411 => "10100000101", 
    412 => "11001001000", 413 => "10110111000", 414 => "10011000101", 
    415 => "00010111010", 416 => "11111001101", 417 => "00011101111", 
    418 => "11111001011", 419 => "11111100100", 420 => "00101101000", 
    421 => "11010001010", 422 => "00000100011", 423 => "10111110010", 
    424 => "00000000000", 425 => "11001010101", 426 => "01000101010", 
    427 => "00111000000", 428 => "00111010011", 429 => "11000001011", 
    430 => "11010111110", 431 => "00110011100", 432 => "00101100111", 
    433 => "11111000001", 434 => "11001111100", 435 => "00101010011", 
    436 => "11100001011", 437 => "11001011110", 438 => "00001110010", 
    439 => "11101110100", 440 => "10101110011", 441 => "11100011010", 
    442 => "00011001100", 443 => "00111011101", 444 => "00011000010", 
    445 => "11100100011", 446 => "11000010011", 447 => "01111011111", 
    448 => "11001100110", 449 => "01110000001", 450 => "00001111010", 
    451 => "11011011111", 452 => "11010100001", 453 => "00101010000", 
    454 => "00000100100", 455 => "11101111101", 456 => "01111010010", 
    457 => "00010101100", 458 => "11011100110", 459 => "01011010010", 
    460 => "00011101111", 461 => "11110011101", 462 => "01000010100", 
    463 => "10010101000", 464 => "01000110100", 465 => "00101010110", 
    466 => "01111111111", 467 => "01001100110", 468 => "11000101011", 
    469 => "10110001000", 470 => "01111111111", 471 => "11011011111", 
    472 => "11100101011", 473 => "00101010111", 474 => "00010111110", 
    475 => "00101100101", 476 => "10111010000", 477 => "11000000000", 
    478 => "01000011011", 479 => "11101111101", 480 => "01001010011", 
    481 => "01011001011", 482 => "11111000001", 483 => "11111001011", 
    484 => "00000000011", 485 => "01011100011", 486 => "11101101111", 
    487 => "00001111110", 488 => "01010010100", 489 => "10000000000", 
    490 => "00100000011", 491 => "01000100010", 492 => "00011011000", 
    493 => "00100011100", 494 => "11011100001", 495 => "01101001010", 
    496 => "00001111111", 497 => "10110100000", 498 => "11101000100", 
    499 => "10000011110", 500 => "11000111101", 501 => "00011011010", 
    502 => "10111000011", 503 => "01000111110", 504 => "00011010010", 
    505 => "00000010010", 506 => "00100011110", 507 => "00001110001", 
    508 => "11011001100", 509 => "10000000000", 510 => "00010001111", 
    511 => "00000101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv2_conv2_layer_weights_s is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv2_conv2_layer_weights_s is
    component conv2_conv2_layer_weights_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv2_conv2_layer_weights_s_rom_U :  component conv2_conv2_layer_weights_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


