// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        conv2_out_V_din,
        conv2_out_V_full_n,
        conv2_out_V_write,
        in_V_dout,
        in_V_empty_n,
        in_V_read
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [31:0] conv2_out_V_din;
input   conv2_out_V_full_n;
output   conv2_out_V_write;
input  [31:0] in_V_dout;
input   in_V_empty_n;
output   in_V_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg conv2_out_V_write;
reg in_V_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [3:0] conv2_layer_bias_address0;
reg    conv2_layer_bias_ce0;
wire   [31:0] conv2_layer_bias_q0;
wire   [8:0] conv2_layer_weights_address0;
reg    conv2_layer_weights_ce0;
wire   [31:0] conv2_layer_weights_q0;
reg    conv2_out_V_blk_n;
wire    ap_CS_fsm_state25;
reg    in_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond4_fu_339_p2;
wire   [10:0] k_3_fu_345_p2;
reg    ap_block_state2;
wire   [4:0] filter_1_fu_362_p2;
reg   [4:0] filter_1_reg_639;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_356_p2;
wire   [6:0] tmp_67_cast_fu_381_p1;
reg   [6:0] tmp_67_cast_reg_649;
wire    ap_CS_fsm_state4;
reg   [31:0] conv2_layer_bias_loa_reg_654;
wire   [3:0] i_11_fu_391_p2;
reg   [3:0] i_11_reg_662;
wire    ap_CS_fsm_state5;
wire   [3:0] j_7_fu_403_p2;
reg   [3:0] j_7_reg_670;
wire    ap_CS_fsm_state6;
wire   [1:0] row_offset_1_fu_419_p2;
reg   [1:0] row_offset_1_reg_678;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp_58_fu_455_p2;
reg   [8:0] tmp_58_reg_683;
wire   [0:0] exitcond9_fu_413_p2;
wire   [7:0] tmp_75_fu_470_p3;
reg   [7:0] tmp_75_reg_688;
wire   [1:0] col_offset_1_fu_488_p2;
reg   [1:0] col_offset_1_reg_696;
wire    ap_CS_fsm_state8;
wire   [10:0] tmp_79_cast_fu_503_p3;
reg   [10:0] tmp_79_cast_reg_701;
wire   [0:0] exitcond8_fu_482_p2;
wire  signed [11:0] tmp_65_cast_fu_526_p1;
reg  signed [11:0] tmp_65_cast_reg_706;
wire   [3:0] channel_offset_1_fu_540_p2;
reg   [3:0] channel_offset_1_reg_714;
wire    ap_CS_fsm_state9;
wire   [10:0] next_mul_fu_546_p2;
reg   [10:0] next_mul_reg_719;
wire   [0:0] exitcond_fu_534_p2;
reg   [31:0] conv2_layer_weights_1_reg_734;
wire    ap_CS_fsm_state10;
wire   [31:0] conv_buff_q0;
reg   [31:0] conv_buff_load_reg_739;
wire   [31:0] grp_fu_330_p2;
reg   [31:0] tmp_65_reg_744;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_324_p2;
wire    ap_CS_fsm_state19;
reg   [31:0] a_assign_reg_754;
wire    ap_CS_fsm_state23;
wire   [31:0] tmp_73_fu_621_p3;
reg   [31:0] tmp_73_reg_761;
wire    ap_CS_fsm_state24;
reg   [10:0] conv_buff_address0;
reg    conv_buff_ce0;
reg    conv_buff_we0;
reg   [10:0] k_reg_197;
reg    ap_block_state1;
reg   [4:0] filter_reg_208;
wire   [0:0] exitcond6_fu_385_p2;
reg   [3:0] i_reg_220;
wire   [0:0] exitcond7_fu_397_p2;
reg   [3:0] j_reg_232;
reg   [31:0] sum_3_reg_244;
reg   [1:0] row_offset_reg_256;
reg   [31:0] sum_4_reg_267;
reg   [1:0] col_offset_reg_279;
reg   [31:0] sum_5_reg_290;
reg   [3:0] channel_offset_reg_302;
reg   [10:0] phi_mul_reg_313;
wire   [63:0] tmp_fu_351_p1;
wire   [63:0] tmp_s_fu_368_p1;
wire   [63:0] tmp_80_cast_fu_570_p1;
wire   [63:0] tmp_64_fu_575_p1;
reg   [31:0] grp_fu_324_p0;
reg   [31:0] grp_fu_324_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state11;
wire   [5:0] tmp_66_fu_373_p3;
wire   [3:0] row_offset_cast7_fu_409_p1;
wire   [3:0] tmp_57_fu_425_p2;
wire   [7:0] p_shl_fu_431_p3;
wire   [4:0] p_shl3_fu_443_p3;
wire   [8:0] p_shl_cast_fu_439_p1;
wire   [8:0] p_shl3_cast_fu_451_p1;
wire   [6:0] tmp_59_cast_fu_461_p1;
wire   [6:0] tmp_74_fu_465_p2;
wire   [7:0] tmp_60_fu_494_p1;
wire   [7:0] tmp_76_fu_498_p2;
wire   [3:0] col_offset_cast4_cas_fu_478_p1;
wire   [3:0] tmp1_fu_511_p2;
wire   [8:0] tmp1_cast_fu_517_p1;
wire   [8:0] tmp_61_fu_521_p2;
wire   [11:0] phi_mul_cast_fu_530_p1;
wire   [11:0] t1_fu_552_p2;
wire   [10:0] tmp_63_cast_fu_561_p1;
wire   [10:0] tmp_77_fu_565_p2;
wire  signed [31:0] t1_cast_fu_557_p1;
wire   [31:0] a_assign_to_int_fu_580_p1;
wire   [7:0] tmp_68_fu_583_p4;
wire   [22:0] tmp_69_fu_593_p1;
wire   [0:0] notrhs_fu_603_p2;
wire   [0:0] notlhs_fu_597_p2;
wire   [0:0] tmp_70_fu_609_p2;
wire   [0:0] tmp_71_fu_334_p2;
wire   [0:0] tmp_72_fu_615_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 25'd1;
end

conv2_conv2_layer_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv2_layer_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_layer_bias_address0),
    .ce0(conv2_layer_bias_ce0),
    .q0(conv2_layer_bias_q0)
);

conv2_conv2_layer_weights #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
conv2_layer_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_layer_weights_address0),
    .ce0(conv2_layer_weights_ce0),
    .q0(conv2_layer_weights_q0)
);

conv2_conv_buff #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
conv_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_buff_address0),
    .ce0(conv_buff_ce0),
    .we0(conv_buff_we0),
    .d0(in_V_dout),
    .q0(conv_buff_q0)
);

lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_324_p0),
    .din1(grp_fu_324_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_buff_load_reg_739),
    .din1(conv2_layer_weights_1_reg_734),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

lenet_hls_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_hls_fcmp_32ns_32ns_1_1_1_U19(
    .din0(a_assign_reg_754),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_71_fu_334_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_356_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        channel_offset_reg_302 <= channel_offset_1_reg_714;
    end else if (((exitcond8_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        channel_offset_reg_302 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_534_p2 == 1'd1))) begin
        col_offset_reg_279 <= col_offset_1_reg_696;
    end else if (((exitcond9_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        col_offset_reg_279 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        filter_reg_208 <= 5'd0;
    end else if (((exitcond6_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        filter_reg_208 <= filter_1_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_220 <= 4'd0;
    end else if (((exitcond7_fu_397_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_220 <= i_11_reg_662;
    end
end

always @ (posedge ap_clk) begin
    if (((conv2_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        j_reg_232 <= j_7_reg_670;
    end else if (((exitcond6_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_232 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_197 <= k_3_fu_345_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_197 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul_reg_313 <= next_mul_reg_719;
    end else if (((exitcond8_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        phi_mul_reg_313 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond8_fu_482_p2 == 1'd1))) begin
        row_offset_reg_256 <= row_offset_1_reg_678;
    end else if (((exitcond7_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        row_offset_reg_256 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond8_fu_482_p2 == 1'd1))) begin
        sum_3_reg_244 <= sum_4_reg_267;
    end else if (((exitcond7_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_3_reg_244 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_534_p2 == 1'd1))) begin
        sum_4_reg_267 <= sum_5_reg_290;
    end else if (((exitcond9_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_4_reg_267 <= sum_3_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sum_5_reg_290 <= grp_fu_324_p2;
    end else if (((exitcond8_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sum_5_reg_290 <= sum_4_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        a_assign_reg_754 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        channel_offset_1_reg_714 <= channel_offset_1_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_offset_1_reg_696 <= col_offset_1_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv2_layer_bias_loa_reg_654 <= conv2_layer_bias_q0;
        tmp_67_cast_reg_649[5 : 1] <= tmp_67_cast_fu_381_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv2_layer_weights_1_reg_734 <= conv2_layer_weights_q0;
        conv_buff_load_reg_739 <= conv_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        filter_1_reg_639 <= filter_1_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_11_reg_662 <= i_11_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_7_reg_670 <= j_7_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_534_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        next_mul_reg_719 <= next_mul_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_offset_1_reg_678 <= row_offset_1_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_58_reg_683[8 : 1] <= tmp_58_fu_455_p2[8 : 1];
        tmp_75_reg_688[7 : 1] <= tmp_75_fu_470_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_65_cast_reg_706 <= tmp_65_cast_fu_526_p1;
        tmp_79_cast_reg_701[10 : 3] <= tmp_79_cast_fu_503_p3[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_65_reg_744 <= grp_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_73_reg_761 <= tmp_73_fu_621_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_356_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv2_layer_bias_ce0 = 1'b1;
    end else begin
        conv2_layer_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv2_layer_weights_ce0 = 1'b1;
    end else begin
        conv2_layer_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        conv2_out_V_blk_n = conv2_out_V_full_n;
    end else begin
        conv2_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((conv2_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        conv2_out_V_write = 1'b1;
    end else begin
        conv2_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_buff_address0 = tmp_64_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_buff_address0 = tmp_fu_351_p1;
    end else begin
        conv_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        conv_buff_ce0 = 1'b1;
    end else begin
        conv_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_buff_we0 = 1'b1;
    end else begin
        conv_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_324_p0 = sum_5_reg_290;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_324_p0 = sum_3_reg_244;
    end else begin
        grp_fu_324_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_324_p1 = tmp_65_reg_744;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_324_p1 = conv2_layer_bias_loa_reg_654;
    end else begin
        grp_fu_324_p1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond4_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_blk_n = in_V_empty_n;
    end else begin
        in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_read = 1'b1;
    end else begin
        in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_356_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (exitcond4_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_356_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond6_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond7_fu_397_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond9_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond8_fu_482_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_534_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((conv2_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_to_int_fu_580_p1 = a_assign_reg_754;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((exitcond4_fu_339_p2 == 1'd0) & (in_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign channel_offset_1_fu_540_p2 = (channel_offset_reg_302 + 4'd1);

assign col_offset_1_fu_488_p2 = (col_offset_reg_279 + 2'd1);

assign col_offset_cast4_cas_fu_478_p1 = col_offset_reg_279;

assign conv2_layer_bias_address0 = tmp_s_fu_368_p1;

assign conv2_layer_weights_address0 = tmp_80_cast_fu_570_p1;

assign conv2_out_V_din = tmp_73_reg_761;

assign exitcond4_fu_339_p2 = ((k_reg_197 == 11'd1568) ? 1'b1 : 1'b0);

assign exitcond5_fu_356_p2 = ((filter_reg_208 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond6_fu_385_p2 = ((i_reg_220 == 4'd13) ? 1'b1 : 1'b0);

assign exitcond7_fu_397_p2 = ((j_reg_232 == 4'd13) ? 1'b1 : 1'b0);

assign exitcond8_fu_482_p2 = ((col_offset_reg_279 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond9_fu_413_p2 = ((row_offset_reg_256 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_534_p2 = ((channel_offset_reg_302 == 4'd8) ? 1'b1 : 1'b0);

assign filter_1_fu_362_p2 = (filter_reg_208 + 5'd1);

assign i_11_fu_391_p2 = (i_reg_220 + 4'd1);

assign j_7_fu_403_p2 = (j_reg_232 + 4'd1);

assign k_3_fu_345_p2 = (k_reg_197 + 11'd1);

assign next_mul_fu_546_p2 = (phi_mul_reg_313 + 11'd196);

assign notlhs_fu_597_p2 = ((tmp_68_fu_583_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_603_p2 = ((tmp_69_fu_593_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl3_cast_fu_451_p1 = p_shl3_fu_443_p3;

assign p_shl3_fu_443_p3 = {{tmp_57_fu_425_p2}, {1'd0}};

assign p_shl_cast_fu_439_p1 = p_shl_fu_431_p3;

assign p_shl_fu_431_p3 = {{tmp_57_fu_425_p2}, {4'd0}};

assign phi_mul_cast_fu_530_p1 = phi_mul_reg_313;

assign row_offset_1_fu_419_p2 = (row_offset_reg_256 + 2'd1);

assign row_offset_cast7_fu_409_p1 = row_offset_reg_256;

assign start_out = real_start;

assign t1_cast_fu_557_p1 = $signed(t1_fu_552_p2);

assign t1_fu_552_p2 = ($signed(tmp_65_cast_reg_706) + $signed(phi_mul_cast_fu_530_p1));

assign tmp1_cast_fu_517_p1 = tmp1_fu_511_p2;

assign tmp1_fu_511_p2 = (col_offset_cast4_cas_fu_478_p1 + j_reg_232);

assign tmp_57_fu_425_p2 = (i_reg_220 + row_offset_cast7_fu_409_p1);

assign tmp_58_fu_455_p2 = (p_shl_cast_fu_439_p1 - p_shl3_cast_fu_451_p1);

assign tmp_59_cast_fu_461_p1 = row_offset_reg_256;

assign tmp_60_fu_494_p1 = col_offset_reg_279;

assign tmp_61_fu_521_p2 = (tmp_58_reg_683 + tmp1_cast_fu_517_p1);

assign tmp_63_cast_fu_561_p1 = channel_offset_reg_302;

assign tmp_64_fu_575_p1 = $unsigned(t1_cast_fu_557_p1);

assign tmp_65_cast_fu_526_p1 = $signed(tmp_61_fu_521_p2);

assign tmp_66_fu_373_p3 = {{filter_reg_208}, {1'd0}};

assign tmp_67_cast_fu_381_p1 = tmp_66_fu_373_p3;

assign tmp_68_fu_583_p4 = {{a_assign_to_int_fu_580_p1[30:23]}};

assign tmp_69_fu_593_p1 = a_assign_to_int_fu_580_p1[22:0];

assign tmp_70_fu_609_p2 = (notrhs_fu_603_p2 | notlhs_fu_597_p2);

assign tmp_72_fu_615_p2 = (tmp_71_fu_334_p2 & tmp_70_fu_609_p2);

assign tmp_73_fu_621_p3 = ((tmp_72_fu_615_p2[0:0] === 1'b1) ? a_assign_reg_754 : 32'd0);

assign tmp_74_fu_465_p2 = (tmp_59_cast_fu_461_p1 + tmp_67_cast_reg_649);

assign tmp_75_fu_470_p3 = {{tmp_74_fu_465_p2}, {1'd0}};

assign tmp_76_fu_498_p2 = (tmp_75_reg_688 + tmp_60_fu_494_p1);

assign tmp_77_fu_565_p2 = (tmp_79_cast_reg_701 + tmp_63_cast_fu_561_p1);

assign tmp_79_cast_fu_503_p3 = {{tmp_76_fu_498_p2}, {3'd0}};

assign tmp_80_cast_fu_570_p1 = tmp_77_fu_565_p2;

assign tmp_fu_351_p1 = k_reg_197;

assign tmp_s_fu_368_p1 = filter_reg_208;

always @ (posedge ap_clk) begin
    tmp_67_cast_reg_649[0] <= 1'b0;
    tmp_67_cast_reg_649[6] <= 1'b0;
    tmp_58_reg_683[0] <= 1'b0;
    tmp_75_reg_688[0] <= 1'b0;
    tmp_79_cast_reg_701[2:0] <= 3'b000;
end

endmodule //conv2
