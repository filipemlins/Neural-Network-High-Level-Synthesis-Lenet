-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    conv2_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2_out_V_full_n : IN STD_LOGIC;
    conv2_out_V_write : OUT STD_LOGIC;
    in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_empty_n : IN STD_LOGIC;
    in_V_read : OUT STD_LOGIC );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal conv2_layer_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv2_layer_bias_ce0 : STD_LOGIC;
    signal conv2_layer_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_layer_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_layer_weights_ce0 : STD_LOGIC;
    signal conv2_layer_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond4_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_345_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal filter_1_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal filter_1_reg_639 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond5_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_cast_fu_381_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_67_cast_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal conv2_layer_bias_loa_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_11_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_662 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_7_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_670 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_offset_1_fu_419_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_offset_1_reg_678 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_58_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_reg_683 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond9_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_1_fu_488_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_1_reg_696 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_79_cast_fu_503_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_cast_reg_701 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond8_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_cast_fu_526_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_cast_reg_706 : STD_LOGIC_VECTOR (11 downto 0);
    signal channel_offset_1_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal channel_offset_1_reg_714 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal next_mul_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_719 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_layer_weights_1_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_buff_load_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal a_assign_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_73_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal conv_buff_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_buff_ce0 : STD_LOGIC;
    signal conv_buff_we0 : STD_LOGIC;
    signal k_reg_197 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal filter_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_3_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_offset_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_4_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_offset_reg_279 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_5_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_offset_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_313 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_66_fu_373_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_offset_cast7_fu_409_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_cast_fu_461_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_fu_465_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_cast4_cas_fu_478_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_511_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_cast_fu_517_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_cast_fu_530_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal t1_fu_552_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_cast_fu_561_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_77_fu_565_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal t1_cast_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_to_int_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_593_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_hls_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv2_conv2_layer_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_conv2_layer_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_conv_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2_layer_bias_U : component conv2_conv2_layer_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_layer_bias_address0,
        ce0 => conv2_layer_bias_ce0,
        q0 => conv2_layer_bias_q0);

    conv2_layer_weights_U : component conv2_conv2_layer_weights
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_layer_weights_address0,
        ce0 => conv2_layer_weights_ce0,
        q0 => conv2_layer_weights_q0);

    conv_buff_U : component conv2_conv_buff
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_buff_address0,
        ce0 => conv_buff_ce0,
        we0 => conv_buff_we0,
        d0 => in_V_dout,
        q0 => conv_buff_q0);

    lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1_U17 : component lenet_hls_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_324_p0,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1_U18 : component lenet_hls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_buff_load_reg_739,
        din1 => conv2_layer_weights_1_reg_734,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    lenet_hls_fcmp_32ns_32ns_1_1_1_U19 : component lenet_hls_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_754,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_71_fu_334_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_356_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_offset_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                channel_offset_reg_302 <= channel_offset_1_reg_714;
            elsif (((exitcond8_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                channel_offset_reg_302 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col_offset_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_534_p2 = ap_const_lv1_1))) then 
                col_offset_reg_279 <= col_offset_1_reg_696;
            elsif (((exitcond9_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_offset_reg_279 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    filter_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                filter_reg_208 <= ap_const_lv5_0;
            elsif (((exitcond6_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                filter_reg_208 <= filter_1_reg_639;
            end if; 
        end if;
    end process;

    i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_220 <= ap_const_lv4_0;
            elsif (((exitcond7_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_220 <= i_11_reg_662;
            end if; 
        end if;
    end process;

    j_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((conv2_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                j_reg_232 <= j_7_reg_670;
            elsif (((exitcond6_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_232 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_197 <= k_3_fu_345_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_197 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_313 <= next_mul_reg_719;
            elsif (((exitcond8_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_mul_reg_313 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_offset_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond8_fu_482_p2 = ap_const_lv1_1))) then 
                row_offset_reg_256 <= row_offset_1_reg_678;
            elsif (((exitcond7_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                row_offset_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_3_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond8_fu_482_p2 = ap_const_lv1_1))) then 
                sum_3_reg_244 <= sum_4_reg_267;
            elsif (((exitcond7_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_3_reg_244 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_4_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_534_p2 = ap_const_lv1_1))) then 
                sum_4_reg_267 <= sum_5_reg_290;
            elsif (((exitcond9_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_4_reg_267 <= sum_3_reg_244;
            end if; 
        end if;
    end process;

    sum_5_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                sum_5_reg_290 <= grp_fu_324_p2;
            elsif (((exitcond8_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                sum_5_reg_290 <= sum_4_reg_267;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                a_assign_reg_754 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                channel_offset_1_reg_714 <= channel_offset_1_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                col_offset_1_reg_696 <= col_offset_1_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv2_layer_bias_loa_reg_654 <= conv2_layer_bias_q0;
                    tmp_67_cast_reg_649(5 downto 1) <= tmp_67_cast_fu_381_p1(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv2_layer_weights_1_reg_734 <= conv2_layer_weights_q0;
                conv_buff_load_reg_739 <= conv_buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                filter_1_reg_639 <= filter_1_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_11_reg_662 <= i_11_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_7_reg_670 <= j_7_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                next_mul_reg_719 <= next_mul_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                row_offset_1_reg_678 <= row_offset_1_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_58_reg_683(8 downto 1) <= tmp_58_fu_455_p2(8 downto 1);
                    tmp_75_reg_688(7 downto 1) <= tmp_75_fu_470_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_65_cast_reg_706 <= tmp_65_cast_fu_526_p1;
                    tmp_79_cast_reg_701(10 downto 3) <= tmp_79_cast_fu_503_p3(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_65_reg_744 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_73_reg_761 <= tmp_73_fu_621_p3;
            end if;
        end if;
    end process;
    tmp_67_cast_reg_649(0) <= '0';
    tmp_67_cast_reg_649(6) <= '0';
    tmp_58_reg_683(0) <= '0';
    tmp_75_reg_688(0) <= '0';
    tmp_79_cast_reg_701(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, conv2_out_V_full_n, in_V_empty_n, ap_CS_fsm_state25, ap_CS_fsm_state2, exitcond4_fu_339_p2, ap_CS_fsm_state3, exitcond5_fu_356_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond9_fu_413_p2, ap_CS_fsm_state8, exitcond8_fu_482_p2, ap_CS_fsm_state9, exitcond_fu_534_p2, exitcond6_fu_385_p2, exitcond7_fu_397_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_356_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond6_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond7_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond9_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond8_fu_482_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_534_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((conv2_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_to_int_fu_580_p1 <= a_assign_reg_754;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_V_empty_n, exitcond4_fu_339_p2)
    begin
                ap_block_state2 <= ((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, exitcond5_fu_356_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_356_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    channel_offset_1_fu_540_p2 <= std_logic_vector(unsigned(channel_offset_reg_302) + unsigned(ap_const_lv4_1));
    col_offset_1_fu_488_p2 <= std_logic_vector(unsigned(col_offset_reg_279) + unsigned(ap_const_lv2_1));
    col_offset_cast4_cas_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_279),4));
    conv2_layer_bias_address0 <= tmp_s_fu_368_p1(4 - 1 downto 0);

    conv2_layer_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_layer_bias_ce0 <= ap_const_logic_1;
        else 
            conv2_layer_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_layer_weights_address0 <= tmp_80_cast_fu_570_p1(9 - 1 downto 0);

    conv2_layer_weights_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_layer_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_layer_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_out_V_blk_n_assign_proc : process(conv2_out_V_full_n, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_out_V_blk_n <= conv2_out_V_full_n;
        else 
            conv2_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv2_out_V_din <= tmp_73_reg_761;

    conv2_out_V_write_assign_proc : process(conv2_out_V_full_n, ap_CS_fsm_state25)
    begin
        if (((conv2_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            conv2_out_V_write <= ap_const_logic_1;
        else 
            conv2_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    conv_buff_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_fu_351_p1, tmp_64_fu_575_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_buff_address0 <= tmp_64_fu_575_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_buff_address0 <= tmp_fu_351_p1(11 - 1 downto 0);
        else 
            conv_buff_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_buff_ce0_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, exitcond4_fu_339_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            conv_buff_ce0 <= ap_const_logic_1;
        else 
            conv_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_buff_we0_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, exitcond4_fu_339_p2)
    begin
        if ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv_buff_we0 <= ap_const_logic_1;
        else 
            conv_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_339_p2 <= "1" when (k_reg_197 = ap_const_lv11_620) else "0";
    exitcond5_fu_356_p2 <= "1" when (filter_reg_208 = ap_const_lv5_10) else "0";
    exitcond6_fu_385_p2 <= "1" when (i_reg_220 = ap_const_lv4_D) else "0";
    exitcond7_fu_397_p2 <= "1" when (j_reg_232 = ap_const_lv4_D) else "0";
    exitcond8_fu_482_p2 <= "1" when (col_offset_reg_279 = ap_const_lv2_2) else "0";
    exitcond9_fu_413_p2 <= "1" when (row_offset_reg_256 = ap_const_lv2_2) else "0";
    exitcond_fu_534_p2 <= "1" when (channel_offset_reg_302 = ap_const_lv4_8) else "0";
    filter_1_fu_362_p2 <= std_logic_vector(unsigned(filter_reg_208) + unsigned(ap_const_lv5_1));

    grp_fu_324_p0_assign_proc : process(ap_CS_fsm_state7, sum_3_reg_244, sum_5_reg_290, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_324_p0 <= sum_5_reg_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_324_p0 <= sum_3_reg_244;
        else 
            grp_fu_324_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p1_assign_proc : process(conv2_layer_bias_loa_reg_654, ap_CS_fsm_state7, tmp_65_reg_744, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_324_p1 <= tmp_65_reg_744;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_324_p1 <= conv2_layer_bias_loa_reg_654;
        else 
            grp_fu_324_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_fu_391_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv4_1));

    in_V_blk_n_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, exitcond4_fu_339_p2)
    begin
        if (((exitcond4_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_blk_n <= in_V_empty_n;
        else 
            in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_read_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, exitcond4_fu_339_p2)
    begin
        if ((not(((exitcond4_fu_339_p2 = ap_const_lv1_0) and (in_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_read <= ap_const_logic_1;
        else 
            in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond5_fu_356_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_356_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_7_fu_403_p2 <= std_logic_vector(unsigned(j_reg_232) + unsigned(ap_const_lv4_1));
    k_3_fu_345_p2 <= std_logic_vector(unsigned(k_reg_197) + unsigned(ap_const_lv11_1));
    next_mul_fu_546_p2 <= std_logic_vector(unsigned(phi_mul_reg_313) + unsigned(ap_const_lv11_C4));
    notlhs_fu_597_p2 <= "0" when (tmp_68_fu_583_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_603_p2 <= "1" when (tmp_69_fu_593_p1 = ap_const_lv23_0) else "0";
    p_shl3_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_443_p3),9));
    p_shl3_fu_443_p3 <= (tmp_57_fu_425_p2 & ap_const_lv1_0);
    p_shl_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_431_p3),9));
    p_shl_fu_431_p3 <= (tmp_57_fu_425_p2 & ap_const_lv4_0);
    phi_mul_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_313),12));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_offset_1_fu_419_p2 <= std_logic_vector(unsigned(row_offset_reg_256) + unsigned(ap_const_lv2_1));
    row_offset_cast7_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_256),4));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        t1_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_fu_552_p2),32));

    t1_fu_552_p2 <= std_logic_vector(signed(tmp_65_cast_reg_706) + signed(phi_mul_cast_fu_530_p1));
    tmp1_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_511_p2),9));
    tmp1_fu_511_p2 <= std_logic_vector(unsigned(col_offset_cast4_cas_fu_478_p1) + unsigned(j_reg_232));
    tmp_57_fu_425_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(row_offset_cast7_fu_409_p1));
    tmp_58_fu_455_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_439_p1) - unsigned(p_shl3_cast_fu_451_p1));
    tmp_59_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_256),7));
    tmp_60_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_279),8));
    tmp_61_fu_521_p2 <= std_logic_vector(unsigned(tmp_58_reg_683) + unsigned(tmp1_cast_fu_517_p1));
    tmp_63_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_offset_reg_302),11));
    tmp_64_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_cast_fu_557_p1),64));
        tmp_65_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_521_p2),12));

    tmp_66_fu_373_p3 <= (filter_reg_208 & ap_const_lv1_0);
    tmp_67_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_373_p3),7));
    tmp_68_fu_583_p4 <= a_assign_to_int_fu_580_p1(30 downto 23);
    tmp_69_fu_593_p1 <= a_assign_to_int_fu_580_p1(23 - 1 downto 0);
    tmp_70_fu_609_p2 <= (notrhs_fu_603_p2 or notlhs_fu_597_p2);
    tmp_72_fu_615_p2 <= (tmp_71_fu_334_p2 and tmp_70_fu_609_p2);
    tmp_73_fu_621_p3 <= 
        a_assign_reg_754 when (tmp_72_fu_615_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_74_fu_465_p2 <= std_logic_vector(unsigned(tmp_59_cast_fu_461_p1) + unsigned(tmp_67_cast_reg_649));
    tmp_75_fu_470_p3 <= (tmp_74_fu_465_p2 & ap_const_lv1_0);
    tmp_76_fu_498_p2 <= std_logic_vector(unsigned(tmp_75_reg_688) + unsigned(tmp_60_fu_494_p1));
    tmp_77_fu_565_p2 <= std_logic_vector(unsigned(tmp_79_cast_reg_701) + unsigned(tmp_63_cast_fu_561_p1));
    tmp_79_cast_fu_503_p3 <= (tmp_76_fu_498_p2 & ap_const_lv3_0);
    tmp_80_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_565_p2),64));
    tmp_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_197),64));
    tmp_s_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_208),64));
end behav;
