-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    conv2_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv2_out_V_V_full_n : IN STD_LOGIC;
    conv2_out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal conv2_layer_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv2_layer_bias_V_ce0 : STD_LOGIC;
    signal conv2_layer_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv2_layer_weights_s_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_layer_weights_s_ce0 : STD_LOGIC;
    signal conv2_layer_weights_s_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond7_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal filter_1_fu_443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal filter_1_reg_1321 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_462_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_reg_1331 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rhs_V_fu_466_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_reg_1336 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_11_fu_480_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_1349 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_7_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_1357 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_offset_1_fu_508_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_offset_1_reg_1365 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_185_fu_544_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_185_reg_1370 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_236_fu_559_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_236_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_55_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_55_reg_1385 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_29_fu_601_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_29_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_35_cast_fu_609_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_35_cast_reg_1396 : STD_LOGIC_VECTOR (16 downto 0);
    signal l_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_227_fu_639_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_227_reg_1407 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_1_fu_653_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_1_reg_1415 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_22_cast_fu_668_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_reg_1420 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_210_cast_fu_691_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_210_cast_reg_1425 : STD_LOGIC_VECTOR (11 downto 0);
    signal channel_offset_1_fu_705_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal channel_offset_1_reg_1433 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal next_mul_fu_711_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1438 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_layer_weights_2_reg_1453 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv_buff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_buff_V_load_reg_1458 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_155_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_155_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_160_fu_875_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_160_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_161_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1484 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_226_reg_1489 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_reg_1494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal a_assign_6_fu_1014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_6_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Result_58_reg_1506 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exp_tmp_V_reg_1511 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_231_fu_1047_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_231_reg_1516 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_173_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_8_fu_1077_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_8_reg_1527 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sh_amt_fu_1108_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1532 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_232_fu_1122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_232_reg_1538 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp4_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1543 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel1_fu_1237_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel1_reg_1553 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond8_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_reg_1558 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_27_fu_1294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_27_reg_1563 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal conv_buff_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_buff_V_ce0 : STD_LOGIC;
    signal conv_buff_V_we0 : STD_LOGIC;
    signal k_reg_285 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal filter_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_320 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_332 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_offset_reg_344 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0160_5_reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_offset_reg_367 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_30_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_offset_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_401 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_454_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_fu_466_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_470_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_offset_cast8_fu_498_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_184_fu_514_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_fu_532_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_528_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_540_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_189_cast_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_fu_567_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_28_fu_571_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_34_cast_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_cast_fu_595_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_613_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_56_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_187_fu_659_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_offset_cast5_cas_fu_643_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_fu_676_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp24_cast_fu_682_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_188_fu_686_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_cast_fu_695_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal t1_fu_717_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_211_cast_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal t1_cast_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1301_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lsb_index_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_208_fu_783_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_211_fu_799_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_215_fu_803_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_217_fu_809_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_221_fu_813_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_50_fu_819_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_225_fu_836_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_198_fu_773_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_157_fu_850_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_51_fu_856_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_162_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_163_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_164_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_165_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_204_cast_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_166_fu_919_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_167_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_16_fu_925_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_17_fu_935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_168_fu_969_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_247_cast_cast_ca_fu_962_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_11_trunc_fu_974_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_20_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_169_fu_980_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_57_fu_987_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_228_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_fu_1003_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_assign_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_229_fu_1025_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_172_fu_1060_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_59_fu_1067_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_7_fu_1071_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_171_fu_1057_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1084_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_174_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_175_fu_1096_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_176_fu_1102_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_233_fu_1132_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ireg_V_to_int_fu_1148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_235_fu_1151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_177_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_178_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_1159_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_1260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_179_fu_1263_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_180_fu_1267_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_cast1_fu_1257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_182_fu_1276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_234_fu_1272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel_fu_1281_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel2_fu_1288_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1301_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component lenet_hls_fpext_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenet_hls_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_hls_mac_muladd_11s_16s_27ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component conv2_conv2_layer_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2_conv2_layer_weights_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component conv2_conv_buff_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv2_layer_bias_V_U : component conv2_conv2_layer_bias_V
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_layer_bias_V_address0,
        ce0 => conv2_layer_bias_V_ce0,
        q0 => conv2_layer_bias_V_q0);

    conv2_layer_weights_s_U : component conv2_conv2_layer_weights_s
    generic map (
        DataWidth => 11,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_layer_weights_s_address0,
        ce0 => conv2_layer_weights_s_ce0,
        q0 => conv2_layer_weights_s_q0);

    conv_buff_V_U : component conv2_conv_buff_V
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_buff_V_address0,
        ce0 => conv_buff_V_ce0,
        we0 => conv_buff_V_we0,
        d0 => in_V_V_dout,
        q0 => conv_buff_V_q0);

    lenet_hls_fpext_32ns_64_1_1_U16 : component lenet_hls_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => a_assign_6_reg_1500,
        dout => d_assign_fu_412_p1);

    lenet_hls_fcmp_32ns_32ns_1_1_1_U17 : component lenet_hls_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_1494,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_i_fu_415_p2);

    lenet_hls_mac_muladd_11s_16s_27ns_27_1_1_U18 : component lenet_hls_mac_muladd_11s_16s_27ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => conv2_layer_weights_2_reg_1453,
        din1 => conv_buff_V_load_reg_1458,
        din2 => grp_fu_1301_p2,
        dout => grp_fu_1301_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_437_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_offset_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                channel_offset_reg_390 <= channel_offset_1_reg_1433;
            elsif (((exitcond3_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                channel_offset_reg_390 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col_offset_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_699_p2 = ap_const_lv1_1))) then 
                col_offset_reg_367 <= col_offset_1_reg_1415;
            elsif (((exitcond2_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_offset_reg_367 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    filter_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                filter_reg_296 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond9_fu_474_p2 = ap_const_lv1_1))) then 
                filter_reg_296 <= filter_1_reg_1321;
            end if; 
        end if;
    end process;

    i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_308 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_486_p2 = ap_const_lv1_1))) then 
                i_reg_308 <= i_11_reg_1349;
            end if; 
        end if;
    end process;

    j_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((conv2_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_reg_320 <= j_7_reg_1357;
            elsif (((exitcond9_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_320 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_285 <= ap_const_lv11_0;
            elsif ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_285 <= k_3_fu_426_p2;
            end if; 
        end if;
    end process;

    p_0160_5_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_699_p2 = ap_const_lv1_1))) then 
                p_0160_5_reg_355 <= p_Val2_30_reg_378;
            elsif (((exitcond2_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0160_5_reg_355 <= p_Val2_s_reg_332;
            end if; 
        end if;
    end process;

    p_Val2_30_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_30_reg_378 <= grp_fu_1301_p3(26 downto 11);
            elsif (((exitcond3_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_Val2_30_reg_378 <= p_0160_5_reg_355;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_332 <= p_0160_5_reg_355;
            elsif (((exitcond1_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_s_reg_332 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_401 <= next_mul_reg_1438;
            elsif (((exitcond3_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_mul_reg_401 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_offset_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then 
                row_offset_reg_344 <= row_offset_1_reg_1365;
            elsif (((exitcond1_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                row_offset_reg_344 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                a_assign_6_reg_1500 <= a_assign_6_fu_1014_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                a_assign_reg_1494 <= a_assign_fu_1007_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                channel_offset_1_reg_1433 <= channel_offset_1_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                col_offset_1_reg_1415 <= col_offset_1_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv2_layer_weights_2_reg_1453 <= conv2_layer_weights_s_q0;
                conv_buff_V_load_reg_1458 <= conv_buff_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                exp_tmp_V_reg_1511 <= ireg_V_fu_1021_p1(62 downto 52);
                p_Result_58_reg_1506 <= ireg_V_fu_1021_p1(63 downto 63);
                tmp_173_reg_1521 <= tmp_173_fu_1051_p2;
                tmp_231_reg_1516 <= tmp_231_fu_1047_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                filter_1_reg_1321 <= filter_1_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_11_reg_1349 <= i_11_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_7_reg_1357 <= j_7_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_502_p2 = ap_const_lv1_1))) then
                l_reg_1402 <= l_fu_631_p3;
                p_Result_55_reg_1385 <= tmp_V_28_fu_571_p2(16 downto 16);
                tmp_154_reg_1380 <= tmp_154_fu_581_p2;
                tmp_227_reg_1407 <= tmp_227_fu_639_p1;
                tmp_V_29_reg_1390 <= tmp_V_29_fu_601_p3;
                    tmp_V_35_cast_reg_1396(15 downto 0) <= tmp_V_35_cast_fu_609_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_154_reg_1380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                m_s_reg_1484 <= m_17_fu_935_p2(63 downto 1);
                tmp_226_reg_1489 <= m_17_fu_935_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                man_V_8_reg_1527 <= man_V_8_fu_1077_p3;
                newSel1_reg_1553 <= newSel1_fu_1237_p3;
                or_cond8_reg_1558 <= or_cond8_fu_1251_p2;
                or_cond_reg_1548 <= or_cond_fu_1231_p2;
                sel_tmp4_reg_1543 <= sel_tmp4_fu_1225_p2;
                sh_amt_reg_1532 <= sh_amt_fu_1108_p3;
                tmp_232_reg_1538 <= tmp_232_fu_1122_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_699_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                next_mul_reg_1438 <= next_mul_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rhs_V_reg_1336 <= rhs_V_fu_466_p1;
                    tmp_15_cast_reg_1331(5 downto 1) <= tmp_15_cast_fu_462_p1(5 downto 1);
                tmp_3_reg_1341 <= tmp_3_fu_470_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                row_offset_1_reg_1365 <= row_offset_1_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_154_reg_1380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_155_reg_1468 <= tmp_155_fu_768_p2;
                    tmp_160_reg_1474(0) <= tmp_160_fu_875_p3(0);
                tmp_161_reg_1479 <= tmp_161_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_185_reg_1370(8 downto 1) <= tmp_185_fu_544_p2(8 downto 1);
                    tmp_236_reg_1375(7 downto 1) <= tmp_236_fu_559_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_210_cast_reg_1425 <= tmp_210_cast_fu_691_p1;
                    tmp_22_cast_reg_1420(10 downto 3) <= tmp_22_cast_fu_668_p3(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_V_27_reg_1563 <= tmp_V_27_fu_1294_p3;
            end if;
        end if;
    end process;
    tmp_15_cast_reg_1331(0) <= '0';
    tmp_15_cast_reg_1331(6) <= '0';
    tmp_185_reg_1370(0) <= '0';
    tmp_236_reg_1375(0) <= '0';
    tmp_V_35_cast_reg_1396(16) <= '0';
    tmp_22_cast_reg_1420(2 downto 0) <= "000";
    tmp_160_reg_1474(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, conv2_out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state19, ap_CS_fsm_state2, exitcond7_fu_420_p2, ap_CS_fsm_state3, exitcond8_fu_437_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond2_fu_502_p2, ap_CS_fsm_state8, exitcond3_fu_647_p2, ap_CS_fsm_state9, exitcond_fu_699_p2, exitcond9_fu_474_p2, exitcond1_fu_486_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_437_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond9_fu_474_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_699_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((conv2_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_1084_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_171_fu_1057_p1));
    a_assign_6_fu_1014_p3 <= 
        a_assign_reg_1494 when (tmp_i_fu_415_p2(0) = '1') else 
        ap_const_lv32_0;
    a_assign_fu_1007_p3 <= 
        ap_const_lv32_0 when (tmp_154_reg_1380(0) = '1') else 
        tmp_170_fu_1003_p1;
    a_fu_830_p2 <= (tmp_156_fu_824_p2 and icmp_fu_793_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_V_V_empty_n, exitcond7_fu_420_p2)
    begin
                ap_block_state2 <= ((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, exitcond8_fu_437_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_437_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    channel_offset_1_fu_705_p2 <= std_logic_vector(unsigned(channel_offset_reg_390) + unsigned(ap_const_lv4_1));
    col_offset_1_fu_653_p2 <= std_logic_vector(unsigned(col_offset_reg_367) + unsigned(ap_const_lv2_1));
    col_offset_cast5_cas_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_367),4));
    conv2_layer_bias_V_address0 <= tmp_s_fu_449_p1(4 - 1 downto 0);

    conv2_layer_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_layer_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv2_layer_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_layer_weights_s_address0 <= tmp_23_cast_fu_735_p1(9 - 1 downto 0);

    conv2_layer_weights_s_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_layer_weights_s_ce0 <= ap_const_logic_1;
        else 
            conv2_layer_weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_out_V_V_blk_n_assign_proc : process(conv2_out_V_V_full_n, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_out_V_V_blk_n <= conv2_out_V_V_full_n;
        else 
            conv2_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv2_out_V_V_din <= tmp_V_27_reg_1563;

    conv2_out_V_V_write_assign_proc : process(conv2_out_V_V_full_n, ap_CS_fsm_state19)
    begin
        if (((conv2_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            conv2_out_V_V_write <= ap_const_logic_1;
        else 
            conv2_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    conv_buff_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_fu_432_p1, tmp_189_fu_740_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_buff_V_address0 <= tmp_189_fu_740_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_buff_V_address0 <= tmp_fu_432_p1(11 - 1 downto 0);
        else 
            conv_buff_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_buff_V_ce0_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond7_fu_420_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            conv_buff_V_ce0 <= ap_const_logic_1;
        else 
            conv_buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_buff_V_we0_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond7_fu_420_p2)
    begin
        if ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            conv_buff_V_we0 <= ap_const_logic_1;
        else 
            conv_buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_486_p2 <= "1" when (j_reg_320 = ap_const_lv4_D) else "0";
    exitcond2_fu_502_p2 <= "1" when (row_offset_reg_344 = ap_const_lv2_2) else "0";
    exitcond3_fu_647_p2 <= "1" when (col_offset_reg_367 = ap_const_lv2_2) else "0";
    exitcond7_fu_420_p2 <= "1" when (k_reg_285 = ap_const_lv11_620) else "0";
    exitcond8_fu_437_p2 <= "1" when (filter_reg_296 = ap_const_lv5_10) else "0";
    exitcond9_fu_474_p2 <= "1" when (i_reg_308 = ap_const_lv4_D) else "0";
    exitcond_fu_699_p2 <= "1" when (channel_offset_reg_390 = ap_const_lv4_8) else "0";
    filter_1_fu_443_p2 <= std_logic_vector(unsigned(filter_reg_296) + unsigned(ap_const_lv5_1));
    grp_fu_1301_p2 <= (p_Val2_30_reg_378 & ap_const_lv11_0);
    i_11_fu_480_p2 <= std_logic_vector(unsigned(i_reg_308) + unsigned(ap_const_lv4_1));
    icmp5_fu_1142_p2 <= "1" when (tmp_233_fu_1132_p4 = ap_const_lv8_0) else "0";
    icmp_fu_793_p2 <= "1" when (signed(tmp_208_fu_783_p4) > signed(ap_const_lv31_0)) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond7_fu_420_p2)
    begin
        if (((exitcond7_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond7_fu_420_p2)
    begin
        if ((not(((exitcond7_fu_420_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond8_fu_437_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_437_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_1021_p1 <= d_assign_fu_412_p1;
    ireg_V_to_int_fu_1148_p1 <= a_assign_6_reg_1500;
    j_7_fu_492_p2 <= std_logic_vector(unsigned(j_reg_320) + unsigned(ap_const_lv4_1));
    k_3_fu_426_p2 <= std_logic_vector(unsigned(k_reg_285) + unsigned(ap_const_lv11_1));
    
    l_fu_631_p3_proc : process(p_Result_56_fu_623_p3)
    begin
        l_fu_631_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_56_fu_623_p3(i) = '1' then
                l_fu_631_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

        lhs_V_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_332),17));

    lsb_index_fu_777_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(tmp_155_fu_768_p2));
    m_16_fu_925_p3 <= 
        tmp_204_cast_fu_906_p1 when (tmp_161_reg_1479(0) = '1') else 
        tmp_166_fu_919_p2;
    m_17_fu_935_p2 <= std_logic_vector(unsigned(tmp_167_fu_932_p1) + unsigned(m_16_fu_925_p3));
    m_20_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1484),64));
    m_cast_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_reg_1390),32));
    m_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_reg_1390),64));
    man_V_7_fu_1071_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_59_fu_1067_p1));
    man_V_8_fu_1077_p3 <= 
        man_V_7_fu_1071_p2 when (p_Result_58_reg_1506(0) = '1') else 
        p_Result_59_fu_1067_p1;
    newSel1_fu_1237_p3 <= 
        tmp_181_fu_1159_p3 when (sel_tmp9_fu_1201_p2(0) = '1') else 
        tmp_232_fu_1122_p1;
    newSel2_fu_1288_p3 <= 
        newSel_fu_1281_p3 when (or_cond_reg_1548(0) = '1') else 
        newSel1_reg_1553;
    newSel_fu_1281_p3 <= 
        tmp_182_fu_1276_p2 when (sel_tmp4_reg_1543(0) = '1') else 
        tmp_234_fu_1272_p1;
    next_mul_fu_711_p2 <= std_logic_vector(unsigned(phi_mul_reg_401) + unsigned(ap_const_lv11_C4));
    or_cond7_fu_1245_p2 <= (sel_tmp9_fu_1201_p2 or sel_tmp2_fu_1172_p2);
    or_cond8_fu_1251_p2 <= (or_cond_fu_1231_p2 or or_cond7_fu_1245_p2);
    or_cond_fu_1231_p2 <= (sel_tmp_fu_1207_p2 or sel_tmp4_fu_1225_p2);
    p_Repl2_11_trunc_fu_974_p2 <= std_logic_vector(unsigned(tmp_168_fu_969_p2) + unsigned(tmp_247_cast_cast_ca_fu_962_p3));
    p_Result_50_fu_819_p2 <= (tmp_V_35_cast_reg_1396 and tmp_221_fu_813_p2);
    p_Result_51_fu_856_p3 <= tmp_V_35_cast_reg_1396(to_integer(unsigned(tmp_157_fu_850_p2)) downto to_integer(unsigned(tmp_157_fu_850_p2))) when (to_integer(unsigned(tmp_157_fu_850_p2))>= 0 and to_integer(unsigned(tmp_157_fu_850_p2))<=16) else "-";
    p_Result_55_fu_587_p3 <= tmp_V_28_fu_571_p2(16 downto 16);
    p_Result_56_fu_623_p3 <= (ap_const_lv15_7FFF & p_Result_s_fu_613_p4);
    p_Result_57_fu_987_p5 <= (m_20_fu_959_p1(63 downto 32) & tmp_169_fu_980_p3 & m_20_fu_959_p1(22 downto 0));
    p_Result_59_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_172_fu_1060_p3),54));
    
    p_Result_s_fu_613_p4_proc : process(tmp_V_35_cast_fu_609_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_s_fu_613_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_35_cast_fu_609_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_s_fu_613_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_s_fu_613_p4_i) := tmp_V_35_cast_fu_609_p1(17-1-p_Result_s_fu_613_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_613_p4 <= resvalue(17-1 downto 0);
    end process;

    p_shl2_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_532_p3),9));
    p_shl2_fu_532_p3 <= (tmp_184_fu_514_p2 & ap_const_lv1_0);
    p_shl_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_520_p3),9));
    p_shl_fu_520_p3 <= (tmp_184_fu_514_p2 & ap_const_lv4_0);
    phi_mul_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_401),12));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev_fu_844_p2 <= (tmp_225_fu_836_p3 xor ap_const_lv1_1);
    rhs_V_fu_466_p0 <= conv2_layer_bias_V_q0;
        rhs_V_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_466_p0),17));

    row_offset_1_fu_508_p2 <= std_logic_vector(unsigned(row_offset_reg_344) + unsigned(ap_const_lv2_1));
    row_offset_cast8_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_344),4));
    sel_tmp1_fu_1167_p2 <= (tmp_173_reg_1521 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_1213_p2 <= (tmp_174_fu_1090_p2 or sel_tmp6_demorgan_fu_1178_p2);
    sel_tmp2_fu_1172_p2 <= (tmp_177_fu_1116_p2 and sel_tmp1_fu_1167_p2);
    sel_tmp3_fu_1219_p2 <= (sel_tmp21_demorgan_fu_1213_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_1225_p2 <= (sel_tmp3_fu_1219_p2 and icmp5_fu_1142_p2);
    sel_tmp6_demorgan_fu_1178_p2 <= (tmp_177_fu_1116_p2 or tmp_173_reg_1521);
    sel_tmp6_fu_1183_p2 <= (sel_tmp6_demorgan_fu_1178_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_1189_p2 <= (tmp_174_fu_1090_p2 and sel_tmp6_fu_1183_p2);
    sel_tmp8_fu_1195_p2 <= (tmp_178_fu_1126_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_1201_p2 <= (sel_tmp8_fu_1195_p2 and sel_tmp7_fu_1189_p2);
    sel_tmp_fu_1207_p2 <= (tmp_178_fu_1126_p2 and sel_tmp7_fu_1189_p2);
        sh_amt_cast1_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1532),16));

        sh_amt_cast_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1532),32));

    sh_amt_fu_1108_p3 <= 
        tmp_175_fu_1096_p2 when (tmp_174_fu_1090_p2(0) = '1') else 
        tmp_176_fu_1102_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        t1_cast_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_fu_717_p2),32));

    t1_fu_717_p2 <= std_logic_vector(unsigned(phi_mul_cast_fu_695_p1) + unsigned(tmp_210_cast_reg_1425));
    tmp24_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_676_p2),9));
    tmp4_fu_676_p2 <= std_logic_vector(unsigned(col_offset_cast5_cas_fu_643_p1) + unsigned(j_reg_320));
    tmp_14_fu_454_p3 <= (filter_reg_296 & ap_const_lv1_0);
    tmp_154_fu_581_p2 <= "1" when (tmp_V_28_fu_571_p2 = ap_const_lv17_0) else "0";
    tmp_155_fu_768_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_reg_1402));
    tmp_156_fu_824_p2 <= "0" when (p_Result_50_fu_819_p2 = ap_const_lv17_0) else "1";
    tmp_157_fu_850_p2 <= std_logic_vector(signed(ap_const_lv17_1FFE8) + signed(tmp_198_fu_773_p1));
    tmp_158_fu_863_p2 <= (rev_fu_844_p2 and p_Result_51_fu_856_p3);
    tmp_159_fu_869_p2 <= (tmp_158_fu_863_p2 or a_fu_830_p2);
    tmp_15_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_454_p3),7));
    tmp_160_fu_875_p3 <= (ap_const_lv31_0 & tmp_159_fu_869_p2);
    tmp_161_fu_883_p2 <= "1" when (signed(lsb_index_fu_777_p2) > signed(ap_const_lv32_0)) else "0";
    tmp_162_fu_895_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(tmp_155_reg_1468));
    tmp_163_fu_900_p2 <= std_logic_vector(shift_right(unsigned(m_cast_fu_892_p1),to_integer(unsigned('0' & tmp_162_fu_895_p2(31-1 downto 0)))));
    tmp_164_fu_910_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(tmp_155_reg_1468));
    tmp_165_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_164_fu_910_p2),64));
    tmp_166_fu_919_p2 <= std_logic_vector(shift_left(unsigned(m_fu_889_p1),to_integer(unsigned('0' & tmp_165_fu_915_p1(31-1 downto 0)))));
    tmp_167_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_reg_1474),64));
    tmp_168_fu_969_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(tmp_227_reg_1407));
    tmp_169_fu_980_p3 <= (p_Result_55_reg_1385 & p_Repl2_11_trunc_fu_974_p2);
    tmp_170_fu_1003_p1 <= tmp_228_fu_999_p1;
    tmp_171_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1511),12));
    tmp_172_fu_1060_p3 <= (ap_const_lv1_1 & tmp_231_reg_1516);
    tmp_173_fu_1051_p2 <= "1" when (tmp_229_fu_1025_p1 = ap_const_lv63_0) else "0";
    tmp_174_fu_1090_p2 <= "1" when (signed(F2_fu_1084_p2) > signed(ap_const_lv12_B)) else "0";
    tmp_175_fu_1096_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_1084_p2));
    tmp_176_fu_1102_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_1084_p2));
    tmp_177_fu_1116_p2 <= "1" when (F2_fu_1084_p2 = ap_const_lv12_B) else "0";
    tmp_178_fu_1126_p2 <= "1" when (unsigned(sh_amt_fu_1108_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_179_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_1260_p1),54));
    tmp_17_fu_554_p2 <= std_logic_vector(unsigned(tmp_189_cast_fu_550_p1) + unsigned(tmp_15_cast_reg_1331));
    tmp_180_fu_1267_p2 <= std_logic_vector(shift_right(signed(man_V_8_reg_1527),to_integer(unsigned('0' & tmp_179_fu_1263_p1(31-1 downto 0)))));
    tmp_181_fu_1159_p3 <= 
        ap_const_lv16_FFFF when (tmp_235_fu_1151_p3(0) = '1') else 
        ap_const_lv16_0;
    tmp_182_fu_1276_p2 <= std_logic_vector(shift_left(unsigned(tmp_232_reg_1538),to_integer(unsigned('0' & sh_amt_cast1_fu_1257_p1(16-1 downto 0)))));
    tmp_184_fu_514_p2 <= std_logic_vector(unsigned(i_reg_308) + unsigned(row_offset_cast8_fu_498_p1));
    tmp_185_fu_544_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_528_p1) - unsigned(p_shl2_cast_fu_540_p1));
    tmp_187_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_367),8));
    tmp_188_fu_686_p2 <= std_logic_vector(unsigned(tmp_185_reg_1370) + unsigned(tmp24_cast_fu_682_p1));
    tmp_189_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_344),7));
    tmp_189_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_cast_fu_722_p1),64));
    tmp_198_fu_773_p1 <= tmp_155_fu_768_p2(17 - 1 downto 0);
    tmp_204_cast_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_163_fu_900_p2),64));
    tmp_208_fu_783_p4 <= lsb_index_fu_777_p2(31 downto 1);
    tmp_20_fu_663_p2 <= std_logic_vector(unsigned(tmp_236_reg_1375) + unsigned(tmp_187_fu_659_p1));
        tmp_210_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_188_fu_686_p2),12));

    tmp_211_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_offset_reg_390),11));
    tmp_211_fu_799_p1 <= tmp_155_fu_768_p2(5 - 1 downto 0);
    tmp_215_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(tmp_211_fu_799_p1));
    tmp_217_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_215_fu_803_p2),17));
    tmp_221_fu_813_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & tmp_217_fu_809_p1(17-1 downto 0)))));
    tmp_225_fu_836_p3 <= lsb_index_fu_777_p2(31 downto 31);
    tmp_227_fu_639_p1 <= l_fu_631_p3(8 - 1 downto 0);
    tmp_228_fu_999_p1 <= p_Result_57_fu_987_p5(32 - 1 downto 0);
    tmp_229_fu_1025_p1 <= ireg_V_fu_1021_p1(63 - 1 downto 0);
    tmp_22_cast_fu_668_p3 <= (tmp_20_fu_663_p2 & ap_const_lv3_0);
    tmp_231_fu_1047_p1 <= ireg_V_fu_1021_p1(52 - 1 downto 0);
    tmp_232_fu_1122_p1 <= man_V_8_fu_1077_p3(16 - 1 downto 0);
    tmp_233_fu_1132_p4 <= sh_amt_fu_1108_p3(11 downto 4);
    tmp_234_fu_1272_p1 <= tmp_180_fu_1267_p2(16 - 1 downto 0);
    tmp_235_fu_1151_p3 <= ireg_V_to_int_fu_1148_p1(31 downto 31);
    tmp_236_fu_559_p3 <= (tmp_17_fu_554_p2 & ap_const_lv1_0);
    tmp_23_cast_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_730_p2),64));
    tmp_23_fu_730_p2 <= std_logic_vector(unsigned(tmp_211_cast_fu_726_p1) + unsigned(tmp_22_cast_reg_1420));
    tmp_247_cast_cast_ca_fu_962_p3 <= 
        ap_const_lv8_7F when (tmp_226_reg_1489(0) = '1') else 
        ap_const_lv8_7E;
    tmp_3_fu_470_p0 <= conv2_layer_bias_V_q0;
        tmp_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_470_p0),16));

    tmp_V_27_fu_1294_p3 <= 
        newSel2_fu_1288_p3 when (or_cond8_reg_1558(0) = '1') else 
        ap_const_lv16_0;
    tmp_V_28_fu_571_p2 <= std_logic_vector(signed(rhs_V_reg_1336) + signed(lhs_V_fu_567_p1));
    tmp_V_29_fu_601_p3 <= 
        tmp_V_cast_fu_595_p2 when (p_Result_55_fu_587_p3(0) = '1') else 
        tmp_V_34_cast_fu_576_p2;
    tmp_V_34_cast_fu_576_p2 <= std_logic_vector(signed(tmp_3_reg_1341) + signed(p_Val2_s_reg_332));
    tmp_V_35_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_fu_601_p3),17));
    tmp_V_cast_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_34_cast_fu_576_p2));
    tmp_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_285),64));
    tmp_s_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_296),64));
end behav;
