-- ==============================================================
-- File generated on Thu Jun 18 10:15:05 -03 2020
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv2_conv2_layer_weights_s_rom is 
    generic(
             DWIDTH     : integer := 12; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv2_conv2_layer_weights_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000011001", 1 => "110101110101", 2 => "110111001011", 
    3 => "111011101001", 4 => "111000011010", 5 => "000111011000", 
    6 => "000000010010", 7 => "110010101111", 8 => "111001101100", 
    9 => "001001010010", 10 => "001011011010", 11 => "111000001101", 
    12 => "000010000101", 13 => "010101101100", 14 => "010000001100", 
    15 => "110010101001", 16 => "110101000110", 17 => "111001000000", 
    18 => "000000101010", 19 => "001110000010", 20 => "111001001011", 
    21 => "110110001000", 22 => "111010111001", 23 => "001011100010", 
    24 => "000010100010", 25 => "000110010010", 26 => "000011111101", 
    27 => "111110100101", 28 => "000111000111", 29 => "000010100101", 
    30 => "110100001100", 31 => "001010110000", 32 => "001101011110", 
    33 => "001000101100", 34 => "110110110110", 35 => "001011000110", 
    36 => "110011010101", 37 => "111011100100", 38 => "111010111000", 
    39 => "001100010011", 40 => "010001001101", 41 => "111000010001", 
    42 => "110110001100", 43 => "011010000000", 44 => "111011100111", 
    45 => "110001001000", 46 => "111011101001", 47 => "010000000101", 
    48 => "111110111001", 49 => "110111001110", 50 => "001000101001", 
    51 => "001010000000", 52 => "001001000011", 53 => "101100000100", 
    54 => "000010101100", 55 => "000010010001", 56 => "111110000011", 
    57 => "111011011100", 58 => "000010111011", 59 => "010001011111", 
    60 => "100101110100", 61 => "101011101110", 62 => "001001011001", 
    63 => "001010010001", 64 => "001110100100", 65 => "011000100011", 
    66 => "110001110000", 67 => "001101101111", 68 => "000110000101", 
    69 => "110100011010", 70 => "001101110011", 71 => "110100101001", 
    72 => "110101111100", 73 => "000111011001", 74 => "001010001110", 
    75 => "110000110100", 76 => "001011011101", 77 => "000111100010", 
    78 => "110101111000", 79 => "110010110110", 80 => "111101011011", 
    81 => "010101101110", 82 => "111101111001", 83 => "010001000010", 
    84 => "110100111010", 85 => "111010111101", 86 => "110110001011", 
    87 => "000100010010", 88 => "110000010111", 89 => "000010111011", 
    90 => "001001011010", 91 => "110110110011", 92 => "010010101111", 
    93 => "000101011111", 94 => "110111101010", 95 => "001011101010", 
    96 => "111101000010", 97 => "110010111000", 98 => "001001100011", 
    99 => "111101110110", 100 => "101011011101", 101 => "110100011111", 
    102 => "111000010010", 103 => "110101110001", 104 => "111110101011", 
    105 => "001010101110", 106 => "110010101001", 107 => "001011010111", 
    108 => "111100101100", 109 => "001011100110", 110 => "111100110011", 
    111 => "110011000111", 112 => "001010000101", 113 => "000000000000", 
    114 => "000010001100", 115 => "001000110101", 116 => "110001011110", 
    117 => "101110110101", 118 => "000100110001", 119 => "111100100111", 
    120 => "001110001110", 121 => "111001010001", 122 => "111001011010", 
    123 => "011001111100", 124 => "111101110001", 125 => "000100001100", 
    126 => "110011000001", 127 => "010000101001", 128 => "111010101110", 
    129 => "001111011001", 130 => "001101111101", 131 => "111111100110", 
    132 => "000110111011", 133 => "111100011011", 134 => "111101000011", 
    135 => "000101101100", 136 => "101011110001", 137 => "101110011001", 
    138 => "111010110101", 139 => "110100000010", 140 => "000011101000", 
    141 => "111101111111", 142 => "111110101001", 143 => "001110010010", 
    144 => "101111110000", 145 => "000001100100", 146 => "000001010010", 
    147 => "001011111000", 148 => "111000110101", 149 => "001101011100", 
    150 => "001111101011", 151 => "111100111010", 152 => "111011100111", 
    153 => "001000111011", 154 => "111011000000", 155 => "010001010110", 
    156 => "000001000001", 157 => "000000000100", 158 => "001001001110", 
    159 => "000001101101", 160 => "111011010101", 161 => "011001101000", 
    162 => "000001010001", 163 => "110111100100", 164 => "011100010111", 
    165 => "010010011101", 166 => "001000110000", 167 => "111110101000", 
    168 => "010000100001", 169 => "010011011110", 170 => "001001111110", 
    171 => "111001110110", 172 => "011101001101", 173 => "010000001010", 
    174 => "001000011111", 175 => "111100110100", 176 => "111001101101", 
    177 => "111101111000", 178 => "010001010000", 179 => "101000010001", 
    180 => "001101111100", 181 => "010000011010", 182 => "000000100001", 
    183 => "001010111100", 184 => "011000100111", 185 => "001100100001", 
    186 => "111101000011", 187 => "101010100000", 188 => "001011100010", 
    189 => "001011111010", 190 => "001011111101", 191 => "111011111001", 
    192 => "110010100001", 193 => "110010111100", 194 => "110010010101", 
    195 => "111010001111", 196 => "000010111000", 197 => "110110100000", 
    198 => "001101000001", 199 => "110011100110", 200 => "001101101111", 
    201 => "000011000010", 202 => "000101010000", 203 => "000111011110", 
    204 => "001100001011", 205 => "110010001011", 206 => "111011100111", 
    207 => "111010110000", 208 => "101111101101", 209 => "000001100111", 
    210 => "000100111101", 211 => "110011000010", 212 => "000110000001", 
    213 => "111100101001", 214 => "000101101100", 215 => "111100111000", 
    216 => "110001111111", 217 => "110010111000", 218 => "001001111110", 
    219 => "111110100011", 220 => "111000000100", 221 => "001010010011", 
    222 => "111101001011", 223 => "000000100011", 224 => "110000101001", 
    225 => "000001011001", 226 => "111101110001", 227 => "110111010000", 
    228 => "000100111010", 229 => "110100010000", 230 => "010000000110", 
    231 => "001100011001", 232 => "111001110110", 233 => "000110011110", 
    234 => "001111011011", 235 => "110011001100", 236 => "010101100011", 
    237 => "110011110100", 238 => "111011010110", 239 => "000100011100", 
    240 => "000011000100", 241 => "110111011110", 242 => "110101111111", 
    243 => "000011001110", 244 => "110101111110", 245 => "010001110111", 
    246 => "111111001010", 247 => "110110100011", 248 => "111101110000", 
    249 => "001000110101", 250 => "001011000010", 251 => "111111110110", 
    252 => "010011011111", 253 => "010010010100", 254 => "010001111011", 
    255 => "110100010111", 256 => "111001011000", 257 => "111111001101", 
    258 => "111110000100", 259 => "001111101110", 260 => "001000010000", 
    261 => "110100001110", 262 => "110010011000", 263 => "111101000101", 
    264 => "110010010010", 265 => "010001100001", 266 => "000010001111", 
    267 => "000000001111", 268 => "000101010011", 269 => "111001011110", 
    270 => "000111110110", 271 => "111010001010", 272 => "110011101100", 
    273 => "001000101001", 274 => "001101100111", 275 => "010011000101", 
    276 => "001101100110", 277 => "001000111010", 278 => "101100110100", 
    279 => "000000100111", 280 => "101111001111", 281 => "001110000000", 
    282 => "111110100011", 283 => "001100010101", 284 => "110011010100", 
    285 => "000111001111", 286 => "101111100001", 287 => "110100100011", 
    288 => "111001101010", 289 => "000100110011", 290 => "001001101000", 
    291 => "110100111101", 292 => "000101100000", 293 => "001101110110", 
    294 => "010011100100", 295 => "001110100111", 296 => "001100100001", 
    297 => "111100110011", 298 => "110110100100", 299 => "101101010110", 
    300 => "001010010101", 301 => "010110111001", 302 => "000010010001", 
    303 => "111000010100", 304 => "111100011101", 305 => "110110011100", 
    306 => "001011000111", 307 => "000000000110", 308 => "110101011101", 
    309 => "110001010000", 310 => "111000111111", 311 => "001010011001", 
    312 => "111000100011", 313 => "010001111000", 314 => "001001110101", 
    315 => "010000111001", 316 => "000001011001", 317 => "111000011110", 
    318 => "110111001100", 319 => "110111001101", 320 => "000010001011", 
    321 => "001000011100", 322 => "000000001010", 323 => "111111000100", 
    324 => "111110000011", 325 => "110111110110", 326 => "001101011101", 
    327 => "111111011000", 328 => "001110101000", 329 => "110001000001", 
    330 => "111000110001", 331 => "110011110010", 332 => "110110011110", 
    333 => "111001001111", 334 => "000100010101", 335 => "000100011110", 
    336 => "001010101101", 337 => "110001111001", 338 => "111100001101", 
    339 => "110101011011", 340 => "001001100100", 341 => "110010010000", 
    342 => "001100010111", 343 => "111100111011", 344 => "110010101000", 
    345 => "110010111100", 346 => "111000110010", 347 => "110110011110", 
    348 => "000011011101", 349 => "111111100110", 350 => "000110100001", 
    351 => "001111100101", 352 => "010001010110", 353 => "001010100000", 
    354 => "001101000111", 355 => "111110010101", 356 => "110000011110", 
    357 => "111101010010", 358 => "010001010000", 359 => "110010101100", 
    360 => "001101010110", 361 => "010010101011", 362 => "111100000100", 
    363 => "001001011000", 364 => "001000001111", 365 => "110011001110", 
    366 => "010010001101", 367 => "001010010001", 368 => "110111000101", 
    369 => "111110101111", 370 => "001100011001", 371 => "111011110110", 
    372 => "110001101100", 373 => "000111000001", 374 => "111100100111", 
    375 => "000100100000", 376 => "001011111101", 377 => "010101010111", 
    378 => "001110001100", 379 => "001101011111", 380 => "000111101000", 
    381 => "101100110011", 382 => "001110100100", 383 => "111110110111", 
    384 => "001110001001", 385 => "001000101010", 386 => "110100110100", 
    387 => "110000010100", 388 => "000010100000", 389 => "110100111110", 
    390 => "110000100001", 391 => "110101101100", 392 => "111110110111", 
    393 => "111010100010", 394 => "001000010110", 395 => "110010100000", 
    396 => "000111000011", 397 => "110001110011", 398 => "000010011010", 
    399 => "001100011000", 400 => "000001001111", 401 => "111101000110", 
    402 => "110110111011", 403 => "110110111110", 404 => "110100111001", 
    405 => "000111100000", 406 => "111110100111", 407 => "111010110000", 
    408 => "111011110001", 409 => "110001011001", 410 => "111010111011", 
    411 => "000011010111", 412 => "111100001001", 413 => "111000001110", 
    414 => "111110100010", 415 => "000010111001", 416 => "000100000001", 
    417 => "000011100000", 418 => "010000010111", 419 => "010111011000", 
    420 => "000100101100", 421 => "101100101101", 422 => "111011000101", 
    423 => "110010001000", 424 => "000011110000", 425 => "010000010111", 
    426 => "000001001101", 427 => "011011001000", 428 => "111001111111", 
    429 => "101111100100", 430 => "001001100101", 431 => "000011110100", 
    432 => "010000000011", 433 => "001001000001", 434 => "110111100011", 
    435 => "000111001001", 436 => "110110011100", 437 => "000100001101", 
    438 => "110101101111", 439 => "110010110000", 440 => "010011011111", 
    441 => "000101010111", 442 => "110000110011", 443 => "111010101000", 
    444 => "111101101011", 445 => "000101000111", 446 => "101011010111", 
    447 => "111111110111", 448 => "000110000111", 449 => "111100110101", 
    450 => "000011111100", 451 => "000010111101", 452 => "110011010100", 
    453 => "111010001111", 454 => "110001111011", 455 => "110001101101", 
    456 => "111010101000", 457 => "110011100111", 458 => "000101011010", 
    459 => "001000100010", 460 => "001001101111", 461 => "111010010001", 
    462 => "111010100101", 463 => "001011110101", 464 => "001001001001", 
    465 => "001010111010", 466 => "110001100110", 467 => "110000100000", 
    468 => "010101010001", 469 => "001011101110", 470 => "001101101101", 
    471 => "000111010101", 472 => "110110110011", 473 => "111001011100", 
    474 => "111011101111", 475 => "000010110101", 476 => "110101011010", 
    477 => "000100101110", 478 => "000100111100", 479 => "001000111011", 
    480 => "110000001100", 481 => "010100001101", 482 => "110111100011", 
    483 => "111011010101", 484 => "111011110110", 485 => "110001110100", 
    486 => "110011111110", 487 => "111001110001", 488 => "001010011011", 
    489 => "000000001100", 490 => "110011100001", 491 => "110011001010", 
    492 => "111000111110", 493 => "110111000000", 494 => "111001010110", 
    495 => "110001000000", 496 => "110110111010", 497 => "010111110011", 
    498 => "001110011001", 499 => "111100010110", 500 => "011001000100", 
    501 => "111111001101", 502 => "111110111111", 503 => "000010101101", 
    504 => "111000000001", 505 => "010110010011", 506 => "111101110101", 
    507 => "000110101001", 508 => "000100011110", 509 => "111100011111", 
    510 => "001101011000", 511 => "110110111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv2_conv2_layer_weights_s is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv2_conv2_layer_weights_s is
    component conv2_conv2_layer_weights_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv2_conv2_layer_weights_s_rom_U :  component conv2_conv2_layer_weights_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


