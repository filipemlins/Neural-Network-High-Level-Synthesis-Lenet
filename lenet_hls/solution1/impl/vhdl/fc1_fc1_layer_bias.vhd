-- ==============================================================
-- File generated on Wed Jun 17 16:36:41 -03 2020
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc1_fc1_layer_bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc1_fc1_layer_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010001100101110011111111011", 
    1 => "00111100000011011001110100111000", 
    2 => "00111010100001001111111011110101", 
    3 => "10111001100001011101110101011100", 
    4 => "00111001110110100100000100100010", 
    5 => "10111011101100001010100000111011", 
    6 => "10111011001100011001010001010100", 
    7 => "00111011101101001010011110111011", 
    8 => "00111010010100111111100010100110", 
    9 => "00111011111110011111110000011000", 
    10 => "10111001100010001000010011110000", 
    11 => "00110100110101000001110010100110", 
    12 => "00111000000111011010110010010101", 
    13 => "10111100011110010111011010001000", 
    14 => "10111011110111011110001110111010", 
    15 => "10111011011011100000000010011001", 
    16 => "00111010110001110101111011100110", 
    17 => "00111011100100110100001010001111", 
    18 => "00111100000000111010111111001110", 
    19 => "00111100001011011111011100101011", 
    20 => "00111011111000010000111011001010", 
    21 => "10110111110100010100110011000101", 
    22 => "00111011010100101011001110001001", 
    23 => "10111010111001111110101111001110", 
    24 => "10111011110100111011111100011110", 
    25 => "00111001101101001110101001111000", 
    26 => "10111011000010111100101001110110", 
    27 => "00111100000010100000110100000011", 
    28 => "10111011000110001001101000111101", 
    29 => "00111011111111000000100100010101", 
    30 => "00111100010100110110110110111101", 
    31 => "10111010010001011011010001110101", 
    32 => "10111011110001010000101010001100", 
    33 => "00111011000011100111011111111111", 
    34 => "10111010000010110000001111010100", 
    35 => "10111011110010110001100111101101", 
    36 => "00111011010010110100101101011111", 
    37 => "10111010011001001111100011000001", 
    38 => "10111001001001100000100101011110", 
    39 => "10111011000110100101000001010100", 
    40 => "10111011101010000010111100100100", 
    41 => "00111100010101011001110010010011", 
    42 => "00111100000110111111010000111001", 
    43 => "10111010101110100111010100000110", 
    44 => "10111011001010100110001101011000", 
    45 => "10111011101011000001010011000111", 
    46 => "00111010010100011010100100101100", 
    47 => "00111011110100101110000110110011", 
    48 => "00111011100001010011001011111011", 
    49 => "10111010101011001111111101010101", 
    50 => "10111011101000101111101011011100", 
    51 => "10111011110011011001110011101100", 
    52 => "00111011000100111100101110111011", 
    53 => "00111010100010111000101111100010", 
    54 => "00111010111010010110001000101111", 
    55 => "00111010000100100111110101000110", 
    56 => "10111010110111111001111100000011", 
    57 => "00111011011010100011110010000111", 
    58 => "10111100011100111011010101110010", 
    59 => "00111100000111010011101011101101", 
    60 => "00111000001100111000110101111111", 
    61 => "10111011010111000111011101100111", 
    62 => "10111011100011100110111110011100", 
    63 => "00111010010001100011110000101000", 
    64 => "10111011100001100100110101011000", 
    65 => "00111100011000011011100110010011", 
    66 => "10111010101011001010111011010011", 
    67 => "10111011110000111111000110100000", 
    68 => "00111011110101000101101010110110", 
    69 => "00111011010111110000101101001110", 
    70 => "00111100000010011110101111010000", 
    71 => "10111010100100110100000111011111", 
    72 => "10111000110011110101000011101000", 
    73 => "10111100011011000111000001011011", 
    74 => "10111011101010010001101111011010", 
    75 => "10111011010001010101110010101100", 
    76 => "00111010010000100110111010001111", 
    77 => "10111011010000010001000000100001", 
    78 => "00111100100000011011010110001100", 
    79 => "00111011111101000001110100001000", 
    80 => "10111011111100011111101100001101", 
    81 => "00111100000000000101000001100101", 
    82 => "00110111101010010101110101101100", 
    83 => "10111011011000011111001000100010", 
    84 => "00111010101101100000010101100100", 
    85 => "00111011100110000101001101000001", 
    86 => "00111010101100000101001011111111", 
    87 => "00111011110011111111000000111011", 
    88 => "10111010000110101000110010001101", 
    89 => "00111000010101110101001011101000", 
    90 => "10111001101100000110101001011000", 
    91 => "10111011111111111010110111101000", 
    92 => "10111010101001011100101111111101", 
    93 => "00111100000110100101001100001101", 
    94 => "00111100101010000100110110111101", 
    95 => "00111100000000110100011010110000", 
    96 => "00111100100110111110011111111110", 
    97 => "00111100000010001100101010100110", 
    98 => "00110110100100101011101010000111", 
    99 => "00111100000010010001000111000011", 
    100 => "10111011101010111110101110000110", 
    101 => "00111011001101010111000110100100", 
    102 => "00111011011011101111101000110111", 
    103 => "00111010011001000011110010001000", 
    104 => "10111011001100000001110100111011", 
    105 => "10111011000100111001001100110011", 
    106 => "00111100000110110111001011101010", 
    107 => "10111011101010101011101011000010", 
    108 => "00111011100010110101010101000101", 
    109 => "00111100000110111011011111111000", 
    110 => "00111010011101100111100001010110", 
    111 => "10111011100101110101111101110001", 
    112 => "10111100001111110100000111000001", 
    113 => "00111011101010110001001100110111", 
    114 => "10111011011111011101011110111111", 
    115 => "10111100010010010001110010010100", 
    116 => "00111010111110101011011111010000", 
    117 => "10111011001110100001111001010000", 
    118 => "00111011000110011001001100111110", 
    119 => "10111011101100101001010101001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fc1_fc1_layer_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc1_fc1_layer_bias is
    component fc1_fc1_layer_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc1_fc1_layer_bias_rom_U :  component fc1_fc1_layer_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


